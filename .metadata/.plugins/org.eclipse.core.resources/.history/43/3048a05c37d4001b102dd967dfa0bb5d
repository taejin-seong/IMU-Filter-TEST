/*
 * mpu9250.h
 *
 *  Created on: 2021. 6. 14.
 *      Author: sungt
 */

#ifndef SRC_COMMON_HW_INCLUDE_IMU_H_
#define SRC_COMMON_HW_INCLUDE_IMU_H_

#include "hw_def.h"

#ifdef _USE_HW_IMU

#define MPU6050_ADDRESS_AD0_LOW     	0x68 // address pin low (GND)
#define MPU6050_ADDRESS_AD0_HIGH    	0x69 // address pin high (VCC)
#define MPU9250_ADDRESS_DEFAULT       ( MPU6050_ADDRESS_AD0_LOW << 1)  //0xD0
#define MAG_ADDRESS  0x0C   // Address of Magnetometer

#define MAG_ADDRESS_DEFAULT  (MAG_ADDRESS<<1)   // 0x18

// Magnetometer Register
#define WHO_AM_I  0x00 // (AKA WIA) should return 0x48
#define INFO      0x01
#define ST1       0x02  // data ready status bit 0
#define XOUT_L    0x03  // data
#define XOUT_H    0x04
#define YOUT_L    0x05
#define YOUT_H    0x06
#define ZOUT_L    0x07
#define ZOUT_H    0x08
#define ST2       0x09  // Data overflow bit 3 and data read error status bit 2
#define CNTL      0x0A  // Power down (0000), single-measurement (0001), self-test (1000) and Fuse ROM (1111) modes on bits 3:0
#define ASTC      0x0C  // Self test control
#define I2CDIS    0x0F  // I2C disable
#define ASAX      0x10  // Fuse ROM x-axis sensitivity adjustment value
#define ASAY      0x11  // Fuse ROM y-axis sensitivity adjustment value
#define ASAZ      0x12  // Fuse ROM z-axis sensitivity adjustment value

#define SELF_TEST_X_GYRO 0x00
#define SELF_TEST_Y_GYRO 0x01
#define SELF_TEST_Z_GYRO 0x02

#define SELF_TEST_A       0x10

#define XG_OFFSET_H       0x13  // User-defined trim values for gyroscope
#define XG_OFFSET_L       0x14
#define YG_OFFSET_H       0x15
#define YG_OFFSET_L       0x16
#define ZG_OFFSET_H       0x17
#define ZG_OFFSET_L       0x18
#define SMPLRT_DIV        0x19
#define CONFIG            0x1A
#define GYRO_CONFIG       0x1B
#define ACCEL_CONFIG      0x1C
#define ACCEL_CONFIG2     0x1D
#define LP_ACCEL_ODR      0x1E
#define WOM_THR           0x1F

#define FIFO_EN            0x23
#define I2C_MST_CTRL       0x24
#define I2C_SLV0_ADDR      0x25
#define I2C_SLV0_REG       0x26
#define I2C_SLV0_CTRL      0x27
#define I2C_SLV1_ADDR      0x28
#define I2C_SLV1_REG       0x29
#define I2C_SLV1_CTRL      0x2A
#define I2C_SLV2_ADDR      0x2B
#define I2C_SLV2_REG       0x2C
#define I2C_SLV2_CTRL      0x2D
#define I2C_SLV3_ADDR      0x2E
#define I2C_SLV3_REG       0x2F
#define I2C_SLV3_CTRL      0x30
#define I2C_SLV4_ADDR      0x31
#define I2C_SLV4_REG       0x32
#define I2C_SLV4_DO        0x33
#define I2C_SLV4_CTRL      0x34
#define I2C_SLV4_DI        0x35
#define I2C_MST_STATUS     0x36
#define INT_PIN_CFG        0x37
#define INT_ENABLE         0x38
#define DMP_INT_STATUS     0x39  // Check DMP interrupt
#define INT_STATUS         0x3A
#define ACCEL_XOUT_H       0x3B
#define ACCEL_XOUT_L       0x3C
#define ACCEL_YOUT_H       0x3D
#define ACCEL_YOUT_L       0x3E
#define ACCEL_ZOUT_H       0x3F
#define ACCEL_ZOUT_L       0x40
#define TEMP_OUT_H         0x41
#define TEMP_OUT_L         0x42
#define GYRO_XOUT_H        0x43
#define GYRO_XOUT_L        0x44
#define GYRO_YOUT_H        0x45
#define GYRO_YOUT_L        0x46
#define GYRO_ZOUT_H        0x47
#define GYRO_ZOUT_L        0x48
#define EXT_SENS_DATA_00   0x49
#define EXT_SENS_DATA_01   0x4A
#define EXT_SENS_DATA_02   0x4B
#define EXT_SENS_DATA_03   0x4C
#define EXT_SENS_DATA_04   0x4D
#define EXT_SENS_DATA_05   0x4E
#define EXT_SENS_DATA_06   0x4F
#define EXT_SENS_DATA_07   0x50
#define EXT_SENS_DATA_08   0x51
#define EXT_SENS_DATA_09   0x52
#define EXT_SENS_DATA_10   0x53
#define EXT_SENS_DATA_11   0x54
#define EXT_SENS_DATA_12   0x55
#define EXT_SENS_DATA_13   0x56
#define EXT_SENS_DATA_14   0x57
#define EXT_SENS_DATA_15   0x58
#define EXT_SENS_DATA_16   0x59
#define EXT_SENS_DATA_17   0x5A
#define EXT_SENS_DATA_18   0x5B
#define EXT_SENS_DATA_19   0x5C
#define EXT_SENS_DATA_20   0x5D
#define EXT_SENS_DATA_21   0x5E
#define EXT_SENS_DATA_22   0x5F
#define EXT_SENS_DATA_23   0x60
#define MOT_DETECT_STATUS  0x61
#define I2C_SLV0_DO        0x63
#define I2C_SLV1_DO        0x64
#define I2C_SLV2_DO        0x65
#define I2C_SLV3_DO        0x66
#define I2C_MST_DELAY_CTRL 0x67
#define SIGNAL_PATH_RESET  0x68
#define MOT_DETECT_CTRL    0x69
#define USER_CTRL          0x6A  // Bit 7 enable DMP, bit 3 reset DMP
#define PWR_MGMT_1         0x6B // Device defaults to the SLEEP mode
#define PWR_MGMT_2         0x6C
#define DMP_BANK           0x6D  // Activates a specific bank in the DMP
#define DMP_RW_PNT         0x6E  // Set read/write pointer to a specific start address in specified DMP bank
#define DMP_REG            0x6F  // Register in DMP from which to read or to which to write
#define DMP_REG_1          0x70
#define DMP_REG_2          0x71
#define FIFO_COUNTH        0x72
#define FIFO_COUNTL        0x73
#define FIFO_R_W           0x74
#define WHO_AM_I_MPU9250   0x75 // Should return 0x71
#define XA_OFFSET_H        0x77
#define XA_OFFSET_L        0x78
#define YA_OFFSET_H        0x7A
#define YA_OFFSET_L        0x7B
#define ZA_OFFSET_H        0x7D
#define ZA_OFFSET_L        0x7E


#define SAMPLE_RATE_1khz     7
#define gyro_sensitivity     131.0// 65.5//131.0   // =  LSB/degrees/sec
#define accel_sensitivity    16384.0//8192.0//16384.0      // =  LSB/g
#define mag_sensitivity      1.499389499  // Divide raw data by mag_sensitivity to change uT -> mG      raw_Data/(10*4912/32760)
#define scale_mag	     0.1499389499									   // 1 Micr�tesla [�T] =   10 Miligauss [mG]
#define alpha                0.99

#define RAD2DEG		     57.29577951




#ifdef _USE_HW_MPU6050

#define WHO_AM_I_REG 	    0x75
#define PWR_MGMT_1_REG      0x6B
#define SMPLRT_DIV_REG 	    0x19
#define ACCEL_CONFIG_REG    0x1C
#define ACCEL_XOUT_H_REG    0x3B
#define TEMP_OUT_H_REG      0x41
#define GYRO_CONFIG_REG     0x1B
#define GYRO_XOUT_H_REG     0x43
#define RAD_TO_DEG	    57.29577951308232087679815481410


// Setup MPU6050
#define MPU6050_ADDR 	    0xD0
#define i2c_timeout 	    100
#define Accel_Z_corrector   14418.0;

#endif /*_USE_HW_MPU6050 */



float roll,yaw,pitch;
uint8_t temp;



int16_t Accel_x,Accel_y,Accel_z,Gyro_x,Gyro_y,Gyro_z;
int32_t Accel_x_bias,Accel_y_bias,Accel_z_bias,Gyro_x_bias,Gyro_y_bias,Gyro_z_bias;
float Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z;


#ifdef _USE_HW_MPU6050

int16_t Mag_x,Mag_y,Mag_z;
int32_t mag_bias[3] , mag_scale[3];
float Mag_X_calib,Mag_Y_calib,Mag_Z_calib;
float mag_offset[3];
float asax,asay,asaz;
float scale_x ,scale_y,scale_z;

#endif /* _USE_HW_MAG */


/* TODO: 1. 칼만 필터 적용  -2 */

typedef struct
{

    int16_t Accel_X_RAW;
    int16_t Accel_Y_RAW;
    int16_t Accel_Z_RAW;
    double Ax;
    double Ay;
    double Az;

    int16_t Gyro_X_RAW;
    int16_t Gyro_Y_RAW;
    int16_t Gyro_Z_RAW;
    double Gx;
    double Gy;
    double Gz;

    float Temperature;

    double KalmanAngleX;
    double KalmanAngleY;

} MPU6050_t;


typedef enum{
	MPU9250_CLOCK_INTERNAL        = 0 <<0 ,
	MPU9250_CLOCK_PLL_XGYRO       = 1 <<0,
	MPU9250_CLOCK_PLL_YGYRO       = 2 <<0,
	MPU9250_CLOCK_PLL_ZGYRO       = 3 <<0,
	MPU9250_CLOCK_PLL_EXT32K      = 4 <<0,
	MPU9250_CLOCK_PLL_EXT19M      = 5 <<0,
	MPU9250_CLOCK_KEEP_RESET      = 7 <<0,
}MPU9250_clock_source_t;

typedef enum{
	MPU9250_GYRO_FS_250       =  0 << 3,  //0x00   // � 250 �/s
	MPU9250_GYRO_FS_500       =  1 << 3,// 0x08   // � 500 �/s
	MPU9250_GYRO_FS_1000      =  2 << 3,// 0x10   // � 1000 �/s
	MPU9250_GYRO_FS_2000      =  3 << 3,// 0x18	  // � 2000 �/s
}MPU9250_GYRO_FULL_SCALE;

typedef enum{
	MPU9250_ACCEL_FS_2        =  0 <<3,//  0x00   // � 2g
	MPU9250_ACCEL_FS_4        =  1 << 3,// 0x08   // � 4g
	MPU9250_ACCEL_FS_8        =  2 << 3,// 0x10   // � 8g
	MPU9250_ACCEL_FS_16       =  3 << 3,// 0x18  // � 16g
}MPU9250_ACCEL_FULL_SCALE;
typedef enum{
	MFS_14BITS	= 0,
	MFS_16BITS	= 1,
}MPU9250_MAG_FULL_SCALE;

typedef enum  {
	Result_Ok = 0x00,          /*!< Everything OK */
	Result_Error,              /*!< Unknown error */
	Result_DeviceNotConnected, /*!< There is no device with valid slave address */
	Result_DeviceInvalid       /*!< Connected device with address is not MPU6050 */
}Result;





#ifdef _USE_HW_MPU6050

uint8_t Init_MPU6050(I2C_HandleTypeDef *I2Cx);

#endif /*_USE_HW_MPU6050 */

#ifdef _USE_HW_MAG

void Init_Magnetometer();
void Calib_Magnetometer();
void Get_Magnetometer();

#endif /* _USE_HW_MAG */





void Init_IMU();

void Process_IMU_Kalman(MPU6050_t *DataStruct);
void Process_IMU_Mahony();
void Process_IMU_Madgwick();
void Process_IMU_Complementary(float Gyro_x,float Gyro_y,float Gyro_z,float  Acc_x,float Acc_y,float Acc_z, float dt);

void Calibration_IMU();

int Check_Connection(uint8_t return_true_val);
void Set_Accel_Range(MPU9250_ACCEL_FULL_SCALE accel_FS);
void Set_Gyro_Range(MPU9250_GYRO_FULL_SCALE gyro_FS);
void IMU_Set_Clock_Source(MPU9250_clock_source_t clock_source);
void Reset_MPU();





#endif /* _USE_HW_MPU9250 */
#endif /* SRC_COMMON_HW_INCLUDE_IMU_H_ */
