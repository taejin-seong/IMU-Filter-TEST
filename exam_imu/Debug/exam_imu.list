
exam_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d0  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  0800ab00  0800ab00  0001ab00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b34c  0800b34c  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800b34c  0800b34c  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b34c  0800b34c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b34c  0800b34c  0001b34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b350  0800b350  0001b350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800b354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000200  0800b554  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800b554  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7f0  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3b  00000000  00000000  0003ca19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00040558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00041730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcf6  00000000  00000000  000427e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cfc  00000000  00000000  0005e4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090130  00000000  00000000  000781d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108302  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa8  00000000  00000000  00108358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000200 	.word	0x20000200
 800014c:	00000000 	.word	0x00000000
 8000150:	0800aae8 	.word	0x0800aae8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000204 	.word	0x20000204
 800016c:	0800aae8 	.word	0x0800aae8

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	; 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000db6:	2afd      	cmp	r2, #253	; 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	; 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	; 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	; 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__gesf2>:
 8001004:	f04f 3cff 	mov.w	ip, #4294967295
 8001008:	e006      	b.n	8001018 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__lesf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e002      	b.n	8001018 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__cmpsf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	bf18      	it	ne
 800102a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800102e:	d011      	beq.n	8001054 <__cmpsf2+0x40>
 8001030:	b001      	add	sp, #4
 8001032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001036:	bf18      	it	ne
 8001038:	ea90 0f01 	teqne	r0, r1
 800103c:	bf58      	it	pl
 800103e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001042:	bf88      	it	hi
 8001044:	17c8      	asrhi	r0, r1, #31
 8001046:	bf38      	it	cc
 8001048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800104c:	bf18      	it	ne
 800104e:	f040 0001 	orrne.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	d102      	bne.n	8001060 <__cmpsf2+0x4c>
 800105a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800105e:	d105      	bne.n	800106c <__cmpsf2+0x58>
 8001060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001064:	d1e4      	bne.n	8001030 <__cmpsf2+0x1c>
 8001066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106a:	d0e1      	beq.n	8001030 <__cmpsf2+0x1c>
 800106c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_cfrcmple>:
 8001074:	4684      	mov	ip, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4661      	mov	r1, ip
 800107a:	e7ff      	b.n	800107c <__aeabi_cfcmpeq>

0800107c <__aeabi_cfcmpeq>:
 800107c:	b50f      	push	{r0, r1, r2, r3, lr}
 800107e:	f7ff ffc9 	bl	8001014 <__cmpsf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	bf48      	it	mi
 8001086:	f110 0f00 	cmnmi.w	r0, #0
 800108a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800108c <__aeabi_fcmpeq>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff fff4 	bl	800107c <__aeabi_cfcmpeq>
 8001094:	bf0c      	ite	eq
 8001096:	2001      	moveq	r0, #1
 8001098:	2000      	movne	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmplt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffea 	bl	800107c <__aeabi_cfcmpeq>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmple>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffe0 	bl	800107c <__aeabi_cfcmpeq>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpge>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffd2 	bl	8001074 <__aeabi_cfrcmple>
 80010d0:	bf94      	ite	ls
 80010d2:	2001      	movls	r0, #1
 80010d4:	2000      	movhi	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_fcmpgt>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff ffc8 	bl	8001074 <__aeabi_cfrcmple>
 80010e4:	bf34      	ite	cc
 80010e6:	2001      	movcc	r0, #1
 80010e8:	2000      	movcs	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <apInit>:
float a12, a22, a31, a32, a33;



void apInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
   uartOpen(_DEF_UART1, 115200);
 8001140:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001144:	2000      	movs	r0, #0
 8001146:	f001 fcd5 	bl	8002af4 <uartOpen>

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a88      	ldr	r2, [pc, #544]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800115e:	4293      	cmp	r3, r2
 8001160:	f040 8195 	bne.w	800148e <HAL_TIM_PeriodElapsedCallback+0x33e>
	{

	     /* TODO: Select IMU Filter (1) */

	      //Process_IMU_Madgwick();
		Process_IMU_Mahony();
 8001164:	f000 fdf0 	bl	8001d48 <Process_IMU_Mahony>

		q[0] = q0;
 8001168:	4b86      	ldr	r3, [pc, #536]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a86      	ldr	r2, [pc, #536]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800116e:	6013      	str	r3, [r2, #0]
		q[1] = q1;
 8001170:	4b86      	ldr	r3, [pc, #536]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a84      	ldr	r2, [pc, #528]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001176:	6053      	str	r3, [r2, #4]
		q[2] = q2;
 8001178:	4b85      	ldr	r3, [pc, #532]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a82      	ldr	r2, [pc, #520]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800117e:	6093      	str	r3, [r2, #8]
		q[3] = q3;
 8001180:	4b84      	ldr	r3, [pc, #528]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a80      	ldr	r2, [pc, #512]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001186:	60d3      	str	r3, [r2, #12]


		a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8001188:	4b7f      	ldr	r3, [pc, #508]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a7e      	ldr	r2, [pc, #504]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800118e:	6892      	ldr	r2, [r2, #8]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fde6 	bl	8000d64 <__aeabi_fmul>
 8001198:	4603      	mov	r3, r0
 800119a:	461c      	mov	r4, r3
 800119c:	4b7a      	ldr	r3, [pc, #488]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a79      	ldr	r2, [pc, #484]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011a2:	68d2      	ldr	r2, [r2, #12]
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fddc 	bl	8000d64 <__aeabi_fmul>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4619      	mov	r1, r3
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff fccf 	bl	8000b54 <__addsf3>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4619      	mov	r1, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fcca 	bl	8000b54 <__addsf3>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b74      	ldr	r3, [pc, #464]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011c6:	601a      	str	r2, [r3, #0]
		a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 80011c8:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a6e      	ldr	r2, [pc, #440]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fdc6 	bl	8000d64 <__aeabi_fmul>
 80011d8:	4603      	mov	r3, r0
 80011da:	461c      	mov	r4, r3
 80011dc:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a69      	ldr	r2, [pc, #420]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011e2:	6852      	ldr	r2, [r2, #4]
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fdbc 	bl	8000d64 <__aeabi_fmul>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4620      	mov	r0, r4
 80011f2:	f7ff fcaf 	bl	8000b54 <__addsf3>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461c      	mov	r4, r3
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	4a62      	ldr	r2, [pc, #392]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001200:	6892      	ldr	r2, [r2, #8]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fdad 	bl	8000d64 <__aeabi_fmul>
 800120a:	4603      	mov	r3, r0
 800120c:	4619      	mov	r1, r3
 800120e:	4620      	mov	r0, r4
 8001210:	f7ff fc9e 	bl	8000b50 <__aeabi_fsub>
 8001214:	4603      	mov	r3, r0
 8001216:	461c      	mov	r4, r3
 8001218:	4b5b      	ldr	r3, [pc, #364]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4a5a      	ldr	r2, [pc, #360]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800121e:	68d2      	ldr	r2, [r2, #12]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fd9e 	bl	8000d64 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	4620      	mov	r0, r4
 800122e:	f7ff fc8f 	bl	8000b50 <__aeabi_fsub>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b59      	ldr	r3, [pc, #356]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001238:	601a      	str	r2, [r3, #0]
		a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a52      	ldr	r2, [pc, #328]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001240:	6852      	ldr	r2, [r2, #4]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fd8d 	bl	8000d64 <__aeabi_fmul>
 800124a:	4603      	mov	r3, r0
 800124c:	461c      	mov	r4, r3
 800124e:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001254:	68d2      	ldr	r2, [r2, #12]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd83 	bl	8000d64 <__aeabi_fmul>
 800125e:	4603      	mov	r3, r0
 8001260:	4619      	mov	r1, r3
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff fc76 	bl	8000b54 <__addsf3>
 8001268:	4603      	mov	r3, r0
 800126a:	4619      	mov	r1, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fc71 	bl	8000b54 <__addsf3>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001278:	601a      	str	r2, [r3, #0]
		a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 800127a:	4b43      	ldr	r3, [pc, #268]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4a42      	ldr	r2, [pc, #264]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001280:	68d2      	ldr	r2, [r2, #12]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fd6d 	bl	8000d64 <__aeabi_fmul>
 800128a:	4603      	mov	r3, r0
 800128c:	461c      	mov	r4, r3
 800128e:	4b3e      	ldr	r3, [pc, #248]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001294:	6892      	ldr	r2, [r2, #8]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fd63 	bl	8000d64 <__aeabi_fmul>
 800129e:	4603      	mov	r3, r0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff fc54 	bl	8000b50 <__aeabi_fsub>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4619      	mov	r1, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fc51 	bl	8000b54 <__addsf3>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80012b8:	601a      	str	r2, [r3, #0]
		a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a32      	ldr	r2, [pc, #200]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd4d 	bl	8000d64 <__aeabi_fmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461c      	mov	r4, r3
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80012d4:	6852      	ldr	r2, [r2, #4]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fd43 	bl	8000d64 <__aeabi_fmul>
 80012de:	4603      	mov	r3, r0
 80012e0:	4619      	mov	r1, r3
 80012e2:	4620      	mov	r0, r4
 80012e4:	f7ff fc34 	bl	8000b50 <__aeabi_fsub>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461c      	mov	r4, r3
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a25      	ldr	r2, [pc, #148]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80012f2:	6892      	ldr	r2, [r2, #8]
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fd34 	bl	8000d64 <__aeabi_fmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4619      	mov	r1, r3
 8001300:	4620      	mov	r0, r4
 8001302:	f7ff fc25 	bl	8000b50 <__aeabi_fsub>
 8001306:	4603      	mov	r3, r0
 8001308:	461c      	mov	r4, r3
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001310:	68d2      	ldr	r2, [r2, #12]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd25 	bl	8000d64 <__aeabi_fmul>
 800131a:	4603      	mov	r3, r0
 800131c:	4619      	mov	r1, r3
 800131e:	4620      	mov	r0, r4
 8001320:	f7ff fc18 	bl	8000b54 <__addsf3>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800132a:	601a      	str	r2, [r3, #0]



		double sinp = a32;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f889 	bl	8000448 <__aeabi_f2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if (abs(sinp) >= 1)
 800133e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001342:	f7ff fb89 	bl	8000a58 <__aeabi_d2iz>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	bfb8      	it	lt
 800134c:	425b      	neglt	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	dd2e      	ble.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0x260>
		{
		  pitch = copysign(M_PI/2,sinp);
 8001352:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001356:	a108      	add	r1, pc, #32	; (adr r1, 8001378 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800135c:	f005 feee 	bl	800713c <copysign>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fb9e 	bl	8000aa8 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001370:	6013      	str	r3, [r2, #0]
		   roll  *= 180.0f / pi;
		}

	  }

}
 8001372:	e08c      	b.n	800148e <HAL_TIM_PeriodElapsedCallback+0x33e>
 8001374:	f3af 8000 	nop.w
 8001378:	54442d18 	.word	0x54442d18
 800137c:	3ff921fb 	.word	0x3ff921fb
 8001380:	40012c00 	.word	0x40012c00
 8001384:	20000020 	.word	0x20000020
 8001388:	20000000 	.word	0x20000000
 800138c:	20000234 	.word	0x20000234
 8001390:	20000238 	.word	0x20000238
 8001394:	2000023c 	.word	0x2000023c
 8001398:	200003d8 	.word	0x200003d8
 800139c:	200003e0 	.word	0x200003e0
 80013a0:	200003f4 	.word	0x200003f4
 80013a4:	200003f8 	.word	0x200003f8
 80013a8:	20000364 	.word	0x20000364
 80013ac:	20000410 	.word	0x20000410
		   pitch =  asin(sinp);
 80013b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013b4:	f008 f98c 	bl	80096d0 <asin>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb72 	bl	8000aa8 <__aeabi_d2f>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a36      	ldr	r2, [pc, #216]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80013c8:	6013      	str	r3, [r2, #0]
		   roll  = atan2f(a31, a33);
 80013ca:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a36      	ldr	r2, [pc, #216]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f008 f9a9 	bl	800972c <atan2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a33      	ldr	r2, [pc, #204]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80013de:	6013      	str	r3, [r2, #0]
		   yaw   = atan2f(a12, a22);
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a33      	ldr	r2, [pc, #204]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f008 f99e 	bl	800972c <atan2f>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80013f4:	6013      	str	r3, [r2, #0]
		   pitch *= 180.0f / pi;
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f824 	bl	8000448 <__aeabi_f2d>
 8001400:	a325      	add	r3, pc, #148	; (adr r3, 8001498 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f877 	bl	80004f8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fb49 	bl	8000aa8 <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800141a:	6013      	str	r3, [r2, #0]
		   yaw = atan2f(sinf(yaw),cosf(yaw));
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f008 f91f 	bl	8009664 <sinf>
 8001426:	4604      	mov	r4, r0
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f008 f8e5 	bl	80095fc <cosf>
 8001432:	4603      	mov	r3, r0
 8001434:	4619      	mov	r1, r3
 8001436:	4620      	mov	r0, r4
 8001438:	f008 f978 	bl	800972c <atan2f>
 800143c:	4603      	mov	r3, r0
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001440:	6013      	str	r3, [r2, #0]
		   yaw   *= 180.0f / pi;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe fffe 	bl	8000448 <__aeabi_f2d>
 800144c:	a312      	add	r3, pc, #72	; (adr r3, 8001498 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff f851 	bl	80004f8 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fb23 	bl	8000aa8 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001466:	6013      	str	r3, [r2, #0]
		   roll  *= 180.0f / pi;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe ffeb 	bl	8000448 <__aeabi_f2d>
 8001472:	a309      	add	r3, pc, #36	; (adr r3, 8001498 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f83e 	bl	80004f8 <__aeabi_dmul>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb10 	bl	8000aa8 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800148c:	6013      	str	r3, [r2, #0]
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	1a63c1f8 	.word	0x1a63c1f8
 800149c:	404ca5dc 	.word	0x404ca5dc
 80014a0:	20000410 	.word	0x20000410
 80014a4:	200003f4 	.word	0x200003f4
 80014a8:	20000364 	.word	0x20000364
 80014ac:	20000414 	.word	0x20000414
 80014b0:	200003d8 	.word	0x200003d8
 80014b4:	200003e0 	.word	0x200003e0
 80014b8:	20000400 	.word	0x20000400

080014bc <apMahony>:

}


void apMahony(void)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af02      	add	r7, sp, #8

    if (Check_Connection(0x71) == 1)
 80014c2:	2071      	movs	r0, #113	; 0x71
 80014c4:	f000 fae2 	bl	8001a8c <Check_Connection>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <apMahony+0x1e>
    {
  	Calibration_IMU();
 80014ce:	f000 fda7 	bl	8002020 <Calibration_IMU>
  	delay_ms(100);
 80014d2:	2064      	movs	r0, #100	; 0x64
 80014d4:	f000 f86e 	bl	80015b4 <delay_ms>
 80014d8:	e00b      	b.n	80014f2 <apMahony+0x36>

    }
    else
    {
         count += 1;
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <apMahony+0x78>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <apMahony+0x78>)
 80014e2:	6013      	str	r3, [r2, #0]
         uartPrintf(_DEF_UART1, "check connection...%ds\n\r",count);
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <apMahony+0x78>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4913      	ldr	r1, [pc, #76]	; (8001538 <apMahony+0x7c>)
 80014ec:	2000      	movs	r0, #0
 80014ee:	f001 fbaf 	bl	8002c50 <uartPrintf>

#ifdef _USE_HW_MAG
    Calib_Magnetometer();
#endif /* _USE_HW_MAG */

    HAL_TIM_Base_Start_IT(&htim3);
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <apMahony+0x80>)
 80014f4:	f003 ffb0 	bl	8005458 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim1);
 80014f8:	4811      	ldr	r0, [pc, #68]	; (8001540 <apMahony+0x84>)
 80014fa:	f003 ffad 	bl	8005458 <HAL_TIM_Base_Start_IT>

   while(1)
   {


 	  uartPrintf(_DEF_UART1, "Roll:%2.2f, Ptich:%2.2f \n\r",roll,pitch);
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <apMahony+0x88>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ffa0 	bl	8000448 <__aeabi_f2d>
 8001508:	4604      	mov	r4, r0
 800150a:	460d      	mov	r5, r1
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <apMahony+0x8c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ff99 	bl	8000448 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	e9cd 2300 	strd	r2, r3, [sp]
 800151e:	4622      	mov	r2, r4
 8001520:	462b      	mov	r3, r5
 8001522:	490a      	ldr	r1, [pc, #40]	; (800154c <apMahony+0x90>)
 8001524:	2000      	movs	r0, #0
 8001526:	f001 fb93 	bl	8002c50 <uartPrintf>
    	  delay_ms(10);
 800152a:	200a      	movs	r0, #10
 800152c:	f000 f842 	bl	80015b4 <delay_ms>
 	  uartPrintf(_DEF_UART1, "Roll:%2.2f, Ptich:%2.2f \n\r",roll,pitch);
 8001530:	e7e5      	b.n	80014fe <apMahony+0x42>
 8001532:	bf00      	nop
 8001534:	2000021c 	.word	0x2000021c
 8001538:	0800ab1c 	.word	0x0800ab1c
 800153c:	200004c0 	.word	0x200004c0
 8001540:	20000508 	.word	0x20000508
 8001544:	20000414 	.word	0x20000414
 8001548:	20000410 	.word	0x20000410
 800154c:	0800ab00 	.word	0x0800ab00

08001550 <bspInit>:

void SystemClock_Config(void);


void bspInit(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
	  HAL_Init();
 8001556:	f001 fc4b 	bl	8002df0 <HAL_Init>
	  SystemClock_Config();
 800155a:	f000 f836 	bl	80015ca <SystemClock_Config>

	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <bspInit+0x60>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <bspInit+0x60>)
 8001564:	f043 0320 	orr.w	r3, r3, #32
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <bspInit+0x60>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <bspInit+0x60>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <bspInit+0x60>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6193      	str	r3, [r2, #24]
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <bspInit+0x60>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <bspInit+0x60>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <bspInit+0x60>)
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <bspInit+0x60>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]


}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <delay_ms>:


void delay_ms(uint32_t ms)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f001 fc79 	bl	8002eb4 <HAL_Delay>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <SystemClock_Config>:




void SystemClock_Config(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b090      	sub	sp, #64	; 0x40
 80015ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d0:	f107 0318 	add.w	r3, r7, #24
 80015d4:	2228      	movs	r2, #40	; 0x28
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 f947 	bl	800686c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fa:	2301      	movs	r3, #1
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fe:	2302      	movs	r3, #2
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001608:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	4618      	mov	r0, r3
 8001614:	f003 fab6 	bl	8004b84 <HAL_RCC_OscConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800161e:	f000 f819 	bl	8001654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001622:	230f      	movs	r3, #15
 8001624:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001626:	2302      	movs	r3, #2
 8001628:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800162e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2102      	movs	r1, #2
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fd21 	bl	8005084 <HAL_RCC_ClockConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001648:	f000 f804 	bl	8001654 <Error_Handler>
  }
}
 800164c:	bf00      	nop
 800164e:	3740      	adds	r7, #64	; 0x40
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <Error_Handler>:




void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_MspInit+0x5c>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_MspInit+0x5c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_MspInit+0x5c>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_MspInit+0x5c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_MspInit+0x5c>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_MspInit+0x5c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_MspInit+0x60>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_MspInit+0x60>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <NMI_Handler+0x4>

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170a:	f001 fbb7 	bl	8002e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA1_Channel5_IRQHandler+0x10>)
 800171a:	f001 fe67 	bl	80033ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000550 	.word	0x20000550

08001728 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <TIM1_BRK_IRQHandler+0x10>)
 800172e:	f003 fee5 	bl	80054fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000508 	.word	0x20000508

0800173c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <TIM1_UP_IRQHandler+0x10>)
 8001742:	f003 fedb 	bl	80054fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000508 	.word	0x20000508

08001750 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001756:	f003 fed1 	bl	80054fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000508 	.word	0x20000508

08001764 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <TIM1_CC_IRQHandler+0x10>)
 800176a:	f003 fec7 	bl	80054fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000508 	.word	0x20000508

08001778 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM3_IRQHandler+0x10>)
 800177e:	f003 febd 	bl	80054fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200004c0 	.word	0x200004c0

0800178c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <USART1_IRQHandler+0x10>)
 8001792:	f004 fb1b 	bl	8005dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000594 	.word	0x20000594

080017a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
	return 1;
 80017a4:	2301      	movs	r3, #1
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <_kill>:

int _kill(int pid, int sig)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017b8:	f005 f82e 	bl	8006818 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	2216      	movs	r2, #22
 80017c0:	601a      	str	r2, [r3, #0]
	return -1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_exit>:

void _exit (int status)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017d6:	f04f 31ff 	mov.w	r1, #4294967295
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffe7 	bl	80017ae <_kill>
	while (1) {}		/* Make sure we hang here */
 80017e0:	e7fe      	b.n	80017e0 <_exit+0x12>

080017e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e00a      	b.n	800180a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017f4:	f3af 8000 	nop.w
 80017f8:	4601      	mov	r1, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	60ba      	str	r2, [r7, #8]
 8001800:	b2ca      	uxtb	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3301      	adds	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	429a      	cmp	r2, r3
 8001810:	dbf0      	blt.n	80017f4 <_read+0x12>
	}

return len;
 8001812:	687b      	ldr	r3, [r7, #4]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e009      	b.n	8001842 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	60ba      	str	r2, [r7, #8]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	429a      	cmp	r2, r3
 8001848:	dbf1      	blt.n	800182e <_write+0x12>
	}
	return len;
 800184a:	687b      	ldr	r3, [r7, #4]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_close>:

int _close(int file)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	return -1;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187a:	605a      	str	r2, [r3, #4]
	return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <_isatty>:

int _isatty(int file)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f004 ff98 	bl	8006818 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20005000 	.word	0x20005000
 8001914:	00000400 	.word	0x00000400
 8001918:	20000220 	.word	0x20000220
 800191c:	200005f0 	.word	0x200005f0

08001920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800192e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001930:	f7ff fff6 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <LoopForever+0x6>)
  ldr r1, =_edata
 8001936:	490d      	ldr	r1, [pc, #52]	; (800196c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001938:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <LoopForever+0xe>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800194c:	4c0a      	ldr	r4, [pc, #40]	; (8001978 <LoopForever+0x16>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800195a:	f004 ff63 	bl	8006824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800195e:	f004 ff4f 	bl	8006800 <main>

08001962 <LoopForever>:

LoopForever:
    b LoopForever
 8001962:	e7fe      	b.n	8001962 <LoopForever>
  ldr   r0, =_estack
 8001964:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001970:	0800b354 	.word	0x0800b354
  ldr r2, =_sbss
 8001974:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001978:	200005ec 	.word	0x200005ec

0800197c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>

0800197e <qbufferCreate>:


}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800197e:	b480      	push	{r7}
 8001980:	b087      	sub	sp, #28
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]

	bool ret = true;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]

	p_node->in  = 0;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
	p_node->out = 0;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]
	p_node->len = length;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	609a      	str	r2, [r3, #8]
	p_node->p_buf = p_buf;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	60da      	str	r2, [r3, #12]

	return ret;
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
	...

080019b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <MX_I2C1_Init+0x54>)
 80019bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <MX_I2C1_Init+0x58>)
 80019c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_I2C1_Init+0x50>)
 80019f2:	f001 ffcb 	bl	800398c <HAL_I2C_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019fc:	f7ff fe2a 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000424 	.word	0x20000424
 8001a08:	40005400 	.word	0x40005400
 8001a0c:	00061a80 	.word	0x00061a80

08001a10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <HAL_I2C_MspInit+0x70>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d123      	bne.n	8001a78 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_I2C_MspInit+0x74>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_I2C_MspInit+0x74>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_I2C_MspInit+0x74>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a48:	23c0      	movs	r3, #192	; 0xc0
 8001a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4c:	2312      	movs	r3, #18
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <HAL_I2C_MspInit+0x78>)
 8001a5c:	f001 fdfa 	bl	8003654 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_I2C_MspInit+0x74>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_I2C_MspInit+0x74>)
 8001a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a6a:	61d3      	str	r3, [r2, #28]
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_I2C_MspInit+0x74>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40005400 	.word	0x40005400
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010c00 	.word	0x40010c00

08001a8c <Check_Connection>:
};



int Check_Connection(uint8_t return_true_val)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
	// Check WHO_AM_I
	uint8_t who_i_am = (uint8_t)WHO_AM_I_MPU9250;
 8001a96:	2375      	movs	r3, #117	; 0x75
 8001a98:	73bb      	strb	r3, [r7, #14]
	uint8_t mpu_address = MPU9250_ADDRESS_DEFAULT;
 8001a9a:	23d0      	movs	r3, #208	; 0xd0
 8001a9c:	73fb      	strb	r3, [r7, #15]


	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,&who_i_am,1,1000)!= HAL_OK);
 8001a9e:	bf00      	nop
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	b299      	uxth	r1, r3
 8001aa4:	f107 020e 	add.w	r2, r7, #14
 8001aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	480f      	ldr	r0, [pc, #60]	; (8001af0 <Check_Connection+0x64>)
 8001ab2:	f002 f8af 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f1      	bne.n	8001aa0 <Check_Connection+0x14>
	while(HAL_I2C_Master_Receive(&hi2c1,mpu_address,&temp,1,1000) != HAL_OK);
 8001abc:	bf00      	nop
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	b299      	uxth	r1, r3
 8001ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <Check_Connection+0x68>)
 8001acc:	4808      	ldr	r0, [pc, #32]	; (8001af0 <Check_Connection+0x64>)
 8001ace:	f002 f99f 	bl	8003e10 <HAL_I2C_Master_Receive>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f2      	bne.n	8001abe <Check_Connection+0x32>
	if (temp == return_true_val)
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <Check_Connection+0x68>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d101      	bne.n	8001ae6 <Check_Connection+0x5a>
	  return 1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <Check_Connection+0x5c>
	else
	  return 0;
 8001ae6:	2300      	movs	r3, #0

}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000424 	.word	0x20000424
 8001af4:	200003d4 	.word	0x200003d4

08001af8 <IMU_Set_Clock_Source>:

void IMU_Set_Clock_Source(MPU9250_clock_source_t clock_source)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_address = MPU9250_ADDRESS_DEFAULT;
 8001b02:	23d0      	movs	r3, #208	; 0xd0
 8001b04:	73fb      	strb	r3, [r7, #15]
	uint8_t d[2];

	d[0] = PWR_MGMT_1;
 8001b06:	236b      	movs	r3, #107	; 0x6b
 8001b08:	733b      	strb	r3, [r7, #12]
	d[1] = clock_source;
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c1,mpu_address,(uint8_t *)d,2,100)!= HAL_OK);
 8001b0e:	bf00      	nop
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	b299      	uxth	r1, r3
 8001b14:	f107 020c 	add.w	r2, r7, #12
 8001b18:	2364      	movs	r3, #100	; 0x64
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <IMU_Set_Clock_Source+0x3c>)
 8001b20:	f002 f878 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f2      	bne.n	8001b10 <IMU_Set_Clock_Source+0x18>
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000424 	.word	0x20000424

08001b38 <Set_Accel_Range>:


void Set_Accel_Range(MPU9250_ACCEL_FULL_SCALE accel_FS)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_address = MPU9250_ADDRESS_DEFAULT;
 8001b42:	23d0      	movs	r3, #208	; 0xd0
 8001b44:	73fb      	strb	r3, [r7, #15]
	uint8_t d[2];
	uint8_t reg1 = ACCEL_CONFIG;
 8001b46:	231c      	movs	r3, #28
 8001b48:	72fb      	strb	r3, [r7, #11]
	//uint8_t reg2 = ACCEL_CONFIG2;

	uint8_t c;
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,&reg1,1,1000) != HAL_OK);
 8001b4a:	bf00      	nop
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	b299      	uxth	r1, r3
 8001b50:	f107 020b 	add.w	r2, r7, #11
 8001b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4823      	ldr	r0, [pc, #140]	; (8001bec <Set_Accel_Range+0xb4>)
 8001b5e:	f002 f859 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f1      	bne.n	8001b4c <Set_Accel_Range+0x14>
	while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)mpu_address,&c, 1, 1000) != HAL_OK);
 8001b68:	bf00      	nop
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	b299      	uxth	r1, r3
 8001b6e:	f107 020a 	add.w	r2, r7, #10
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	481c      	ldr	r0, [pc, #112]	; (8001bec <Set_Accel_Range+0xb4>)
 8001b7c:	f002 f948 	bl	8003e10 <HAL_I2C_Master_Receive>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f1      	bne.n	8001b6a <Set_Accel_Range+0x32>
//	c[0] &=  ~0x18; // Clear AFS bits [4:3]
//	c[0] |= accel_FS; // Set full scale range for the gyro

	d[0] = ACCEL_CONFIG;
 8001b86:	231c      	movs	r3, #28
 8001b88:	733b      	strb	r3, [r7, #12]
	d[1] = (c & 0xE7) | (uint8_t)accel_FS ;
 8001b8a:	7abb      	ldrb	r3, [r7, #10]
 8001b8c:	b25b      	sxtb	r3, r3
 8001b8e:	f023 0318 	bic.w	r3, r3, #24
 8001b92:	b25a      	sxtb	r2, r3
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,(uint8_t *)d,2,100) != HAL_OK);
 8001ba0:	bf00      	nop
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	b299      	uxth	r1, r3
 8001ba6:	f107 020c 	add.w	r2, r7, #12
 8001baa:	2364      	movs	r3, #100	; 0x64
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2302      	movs	r3, #2
 8001bb0:	480e      	ldr	r0, [pc, #56]	; (8001bec <Set_Accel_Range+0xb4>)
 8001bb2:	f002 f82f 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f2      	bne.n	8001ba2 <Set_Accel_Range+0x6a>

//	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,&reg2,1,1000) != HAL_OK);
//	while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)mpu_address,c, 1, 1000) != HAL_OK);
//	c[0] &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
//	c[0] |=  0x03; // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	d[0] = ACCEL_CONFIG2;
 8001bbc:	231d      	movs	r3, #29
 8001bbe:	733b      	strb	r3, [r7, #12]
	d[1] = 0x05;
 8001bc0:	2305      	movs	r3, #5
 8001bc2:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001bc4:	bf00      	nop
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	b299      	uxth	r1, r3
 8001bca:	f107 020c 	add.w	r2, r7, #12
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <Set_Accel_Range+0xb4>)
 8001bd8:	f002 f81c 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f1      	bne.n	8001bc6 <Set_Accel_Range+0x8e>
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000424 	.word	0x20000424

08001bf0 <Set_Gyro_Range>:

void Set_Gyro_Range(MPU9250_GYRO_FULL_SCALE gyro_FS)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]

//	uint8_t reg = GYRO_CONFIG;
	uint8_t mpu_address = MPU9250_ADDRESS_DEFAULT;
 8001bfa:	23d0      	movs	r3, #208	; 0xd0
 8001bfc:	73fb      	strb	r3, [r7, #15]
//	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,&reg,1,1000) != HAL_OK);
//	while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)mpu_address,c, 1, 1000) != HAL_OK);
//	c[0] &=  ~0x02; // Clear Fchoice bits [1:0]
//	c[0] &=  ~0x18; // Clear AFS bits [4:3]
//	c[0] |= gyro_FS;
	d[0] = GYRO_CONFIG;
 8001bfe:	231b      	movs	r3, #27
 8001c00:	733b      	strb	r3, [r7, #12]
	d[1] = gyro_FS;
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	737b      	strb	r3, [r7, #13]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,(uint8_t *)d,2,100) != HAL_OK);
 8001c06:	bf00      	nop
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	f107 020c 	add.w	r2, r7, #12
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2302      	movs	r3, #2
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <Set_Gyro_Range+0x3c>)
 8001c18:	f001 fffc 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f2      	bne.n	8001c08 <Set_Gyro_Range+0x18>

}
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000424 	.word	0x20000424

08001c30 <Init_IMU>:
	HAL_Delay(1000);
}


void Init_IMU()
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af02      	add	r7, sp, #8

	uint8_t mpu_address = MPU9250_ADDRESS_DEFAULT;
 8001c36:	23d0      	movs	r3, #208	; 0xd0
 8001c38:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	/* Check if device is connected */
	while(HAL_I2C_IsDeviceReady(&hi2c1,mpu_address,2,3) != HAL_OK);
 8001c3a:	bf00      	nop
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	b299      	uxth	r1, r3
 8001c40:	2303      	movs	r3, #3
 8001c42:	2202      	movs	r2, #2
 8001c44:	483f      	ldr	r0, [pc, #252]	; (8001d44 <Init_IMU+0x114>)
 8001c46:	f002 fb43 	bl	80042d0 <HAL_I2C_IsDeviceReady>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f5      	bne.n	8001c3c <Init_IMU+0xc>

	/* Wakeup MPU6050 */
	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8001c50:	236b      	movs	r3, #107	; 0x6b
 8001c52:	713b      	strb	r3, [r7, #4]
	d[1] = 0x00;
 8001c54:	2300      	movs	r3, #0
 8001c56:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,(uint8_t *)d,2,100) != HAL_OK);
 8001c58:	bf00      	nop
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	b299      	uxth	r1, r3
 8001c5e:	1d3a      	adds	r2, r7, #4
 8001c60:	2364      	movs	r3, #100	; 0x64
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2302      	movs	r3, #2
 8001c66:	4837      	ldr	r0, [pc, #220]	; (8001d44 <Init_IMU+0x114>)
 8001c68:	f001 ffd4 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f3      	bne.n	8001c5a <Init_IMU+0x2a>
	HAL_Delay(100);
 8001c72:	2064      	movs	r0, #100	; 0x64
 8001c74:	f001 f91e 	bl	8002eb4 <HAL_Delay>

	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	IMU_Set_Clock_Source(MPU9250_CLOCK_PLL_XGYRO);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff ff3d 	bl	8001af8 <IMU_Set_Clock_Source>

	//CONGFIG
	d[0] = CONFIG;
 8001c7e:	231a      	movs	r3, #26
 8001c80:	713b      	strb	r3, [r7, #4]
	d[1] = 0x09;//0x05//0x03
 8001c82:	2309      	movs	r3, #9
 8001c84:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,(uint8_t *)d,2,100) != HAL_OK);
 8001c86:	bf00      	nop
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	b299      	uxth	r1, r3
 8001c8c:	1d3a      	adds	r2, r7, #4
 8001c8e:	2364      	movs	r3, #100	; 0x64
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2302      	movs	r3, #2
 8001c94:	482b      	ldr	r0, [pc, #172]	; (8001d44 <Init_IMU+0x114>)
 8001c96:	f001 ffbd 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f3      	bne.n	8001c88 <Init_IMU+0x58>

	/* Set data sample rate */
	d[0] = SMPLRT_DIV;   // sample rate = SAMPLE_RATE/(1 + 7) = 1khz
 8001ca0:	2319      	movs	r3, #25
 8001ca2:	713b      	strb	r3, [r7, #4]
	d[1] = SAMPLE_RATE_1khz;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,(uint8_t *)d,2,100) != HAL_OK);
 8001ca8:	bf00      	nop
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	b299      	uxth	r1, r3
 8001cae:	1d3a      	adds	r2, r7, #4
 8001cb0:	2364      	movs	r3, #100	; 0x64
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	4823      	ldr	r0, [pc, #140]	; (8001d44 <Init_IMU+0x114>)
 8001cb8:	f001 ffac 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f3      	bne.n	8001caa <Init_IMU+0x7a>
	// config accelerometer
	Set_Accel_Range(MPU9250_ACCEL_FS_2);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff ff38 	bl	8001b38 <Set_Accel_Range>
	// config gyro
	Set_Gyro_Range(MPU9250_GYRO_FS_250);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff ff91 	bl	8001bf0 <Set_Gyro_Range>
	d[0] = USER_CTRL;
 8001cce:	236a      	movs	r3, #106	; 0x6a
 8001cd0:	713b      	strb	r3, [r7, #4]
	d[1] = 0x00;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,(uint8_t *)d,2,100) != HAL_OK);
 8001cd6:	bf00      	nop
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	b299      	uxth	r1, r3
 8001cdc:	1d3a      	adds	r2, r7, #4
 8001cde:	2364      	movs	r3, #100	; 0x64
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	4817      	ldr	r0, [pc, #92]	; (8001d44 <Init_IMU+0x114>)
 8001ce6:	f001 ff95 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f3      	bne.n	8001cd8 <Init_IMU+0xa8>
	d[0] = INT_ENABLE;
 8001cf0:	2338      	movs	r3, #56	; 0x38
 8001cf2:	713b      	strb	r3, [r7, #4]
	d[1] = 0x01;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001cf8:	bf00      	nop
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	b299      	uxth	r1, r3
 8001cfe:	1d3a      	adds	r2, r7, #4
 8001d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2302      	movs	r3, #2
 8001d08:	480e      	ldr	r0, [pc, #56]	; (8001d44 <Init_IMU+0x114>)
 8001d0a:	f001 ff83 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f2      	bne.n	8001cfa <Init_IMU+0xca>
	d[0] = INT_PIN_CFG;
 8001d14:	2337      	movs	r3, #55	; 0x37
 8001d16:	713b      	strb	r3, [r7, #4]
	d[1] = 0x22;  // turn on AK8963
 8001d18:	2322      	movs	r3, #34	; 0x22
 8001d1a:	717b      	strb	r3, [r7, #5]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001d1c:	bf00      	nop
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	b299      	uxth	r1, r3
 8001d22:	1d3a      	adds	r2, r7, #4
 8001d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	4805      	ldr	r0, [pc, #20]	; (8001d44 <Init_IMU+0x114>)
 8001d2e:	f001 ff71 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f2      	bne.n	8001d1e <Init_IMU+0xee>

}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000424 	.word	0x20000424

08001d48 <Process_IMU_Mahony>:



//TODO 3. 마호니 필터 적용 코드
void Process_IMU_Mahony() // 최근 수정일: 21/06/14/월
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af02      	add	r7, sp, #8

	//read raw data
	uint8_t data[14];
	uint8_t reg = ACCEL_XOUT_H;
 8001d4e:	233b      	movs	r3, #59	; 0x3b
 8001d50:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_address = MPU9250_ADDRESS_DEFAULT;
 8001d52:	23d0      	movs	r3, #208	; 0xd0
 8001d54:	75fb      	strb	r3, [r7, #23]


	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,&reg,1,1000) != HAL_OK);
 8001d56:	bf00      	nop
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
 8001d5a:	b299      	uxth	r1, r3
 8001d5c:	1dfa      	adds	r2, r7, #7
 8001d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2301      	movs	r3, #1
 8001d66:	4898      	ldr	r0, [pc, #608]	; (8001fc8 <Process_IMU_Mahony+0x280>)
 8001d68:	f001 ff54 	bl	8003c14 <HAL_I2C_Master_Transmit>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f2      	bne.n	8001d58 <Process_IMU_Mahony+0x10>
	while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)mpu_address, data, 14, 1000) != HAL_OK);
 8001d72:	bf00      	nop
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	b299      	uxth	r1, r3
 8001d78:	f107 0208 	add.w	r2, r7, #8
 8001d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	230e      	movs	r3, #14
 8001d84:	4890      	ldr	r0, [pc, #576]	; (8001fc8 <Process_IMU_Mahony+0x280>)
 8001d86:	f002 f843 	bl	8003e10 <HAL_I2C_Master_Receive>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f1      	bne.n	8001d74 <Process_IMU_Mahony+0x2c>

	/*-------- Accel ---------*/
	Accel_x = (int16_t)((int16_t)( data[0] << 8 ) | data[1]);
 8001d90:	7a3b      	ldrb	r3, [r7, #8]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	7a7b      	ldrb	r3, [r7, #9]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	4b8b      	ldr	r3, [pc, #556]	; (8001fcc <Process_IMU_Mahony+0x284>)
 8001da0:	801a      	strh	r2, [r3, #0]
	Accel_y = (int16_t)((int16_t)( data[2] << 8 ) | data[3]);
 8001da2:	7abb      	ldrb	r3, [r7, #10]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	7afb      	ldrb	r3, [r7, #11]
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	4b87      	ldr	r3, [pc, #540]	; (8001fd0 <Process_IMU_Mahony+0x288>)
 8001db2:	801a      	strh	r2, [r3, #0]
	Accel_z = (int16_t)((int16_t)( data[4] << 8 ) | data[5]);
 8001db4:	7b3b      	ldrb	r3, [r7, #12]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	7b7b      	ldrb	r3, [r7, #13]
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	4b84      	ldr	r3, [pc, #528]	; (8001fd4 <Process_IMU_Mahony+0x28c>)
 8001dc4:	801a      	strh	r2, [r3, #0]

	/*-------- Gyrometer --------*/
	Gyro_x = (int16_t)((int16_t)( data[8] << 8  ) | data[9]);
 8001dc6:	7c3b      	ldrb	r3, [r7, #16]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	7c7b      	ldrb	r3, [r7, #17]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21a      	sxth	r2, r3
 8001dd4:	4b80      	ldr	r3, [pc, #512]	; (8001fd8 <Process_IMU_Mahony+0x290>)
 8001dd6:	801a      	strh	r2, [r3, #0]
	Gyro_y = (int16_t)((int16_t)( data[10] << 8 ) | data[11]);
 8001dd8:	7cbb      	ldrb	r3, [r7, #18]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	7cfb      	ldrb	r3, [r7, #19]
 8001de0:	b21b      	sxth	r3, r3
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b21a      	sxth	r2, r3
 8001de6:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <Process_IMU_Mahony+0x294>)
 8001de8:	801a      	strh	r2, [r3, #0]
	Gyro_z = (int16_t)((int16_t)( data[12] << 8 ) | data[13]);
 8001dea:	7d3b      	ldrb	r3, [r7, #20]
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	7d7b      	ldrb	r3, [r7, #21]
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <Process_IMU_Mahony+0x298>)
 8001dfa:	801a      	strh	r2, [r3, #0]


	Accel_X = 10*(float)((int32_t)Accel_x - Accel_x_bias)/(float)accel_sensitivity;
 8001dfc:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <Process_IMU_Mahony+0x284>)
 8001dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e02:	461a      	mov	r2, r3
 8001e04:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <Process_IMU_Mahony+0x29c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff56 	bl	8000cbc <__aeabi_i2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4975      	ldr	r1, [pc, #468]	; (8001fe8 <Process_IMU_Mahony+0x2a0>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe ffa5 	bl	8000d64 <__aeabi_fmul>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f853 	bl	8000ecc <__aeabi_fdiv>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b70      	ldr	r3, [pc, #448]	; (8001fec <Process_IMU_Mahony+0x2a4>)
 8001e2c:	601a      	str	r2, [r3, #0]
	Accel_Y = 10*(float)((int32_t)Accel_y - Accel_y_bias)/(float)accel_sensitivity;
 8001e2e:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <Process_IMU_Mahony+0x288>)
 8001e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b6e      	ldr	r3, [pc, #440]	; (8001ff0 <Process_IMU_Mahony+0x2a8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe ff3d 	bl	8000cbc <__aeabi_i2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4968      	ldr	r1, [pc, #416]	; (8001fe8 <Process_IMU_Mahony+0x2a0>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe ff8c 	bl	8000d64 <__aeabi_fmul>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f83a 	bl	8000ecc <__aeabi_fdiv>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <Process_IMU_Mahony+0x2ac>)
 8001e5e:	601a      	str	r2, [r3, #0]
	Accel_Z =  10*(float)((int32_t)Accel_z - Accel_z_bias)/(float)accel_sensitivity ;
 8001e60:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <Process_IMU_Mahony+0x28c>)
 8001e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <Process_IMU_Mahony+0x2b0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff24 	bl	8000cbc <__aeabi_i2f>
 8001e74:	4603      	mov	r3, r0
 8001e76:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <Process_IMU_Mahony+0x2a0>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe ff73 	bl	8000d64 <__aeabi_fmul>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f821 	bl	8000ecc <__aeabi_fdiv>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <Process_IMU_Mahony+0x2b4>)
 8001e90:	601a      	str	r2, [r3, #0]

	Gyro_X =  (float)(((int32_t)Gyro_x - Gyro_x_bias)/(float)gyro_sensitivity)*M_PI/180.0f;
 8001e92:	4b51      	ldr	r3, [pc, #324]	; (8001fd8 <Process_IMU_Mahony+0x290>)
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b59      	ldr	r3, [pc, #356]	; (8002000 <Process_IMU_Mahony+0x2b8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff0b 	bl	8000cbc <__aeabi_i2f>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4956      	ldr	r1, [pc, #344]	; (8002004 <Process_IMU_Mahony+0x2bc>)
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f80e 	bl	8000ecc <__aeabi_fdiv>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fac8 	bl	8000448 <__aeabi_f2d>
 8001eb8:	a341      	add	r3, pc, #260	; (adr r3, 8001fc0 <Process_IMU_Mahony+0x278>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f7fe fb1b 	bl	80004f8 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <Process_IMU_Mahony+0x2c0>)
 8001ed0:	f7fe fc3c 	bl	800074c <__aeabi_ddiv>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fde4 	bl	8000aa8 <__aeabi_d2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4a4a      	ldr	r2, [pc, #296]	; (800200c <Process_IMU_Mahony+0x2c4>)
 8001ee4:	6013      	str	r3, [r2, #0]
	Gyro_Y =  (float)(((int32_t)Gyro_y - Gyro_y_bias)/(float)gyro_sensitivity)*M_PI/180.0f;
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <Process_IMU_Mahony+0x294>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b48      	ldr	r3, [pc, #288]	; (8002010 <Process_IMU_Mahony+0x2c8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fee1 	bl	8000cbc <__aeabi_i2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4941      	ldr	r1, [pc, #260]	; (8002004 <Process_IMU_Mahony+0x2bc>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ffe4 	bl	8000ecc <__aeabi_fdiv>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fa9e 	bl	8000448 <__aeabi_f2d>
 8001f0c:	a32c      	add	r3, pc, #176	; (adr r3, 8001fc0 <Process_IMU_Mahony+0x278>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	f7fe faf1 	bl	80004f8 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <Process_IMU_Mahony+0x2c0>)
 8001f24:	f7fe fc12 	bl	800074c <__aeabi_ddiv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fdba 	bl	8000aa8 <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a37      	ldr	r2, [pc, #220]	; (8002014 <Process_IMU_Mahony+0x2cc>)
 8001f38:	6013      	str	r3, [r2, #0]
	Gyro_Z =  (float)(((int32_t)Gyro_z - Gyro_z_bias)/(float)gyro_sensitivity)*M_PI/180.0f;
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <Process_IMU_Mahony+0x298>)
 8001f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b35      	ldr	r3, [pc, #212]	; (8002018 <Process_IMU_Mahony+0x2d0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe feb7 	bl	8000cbc <__aeabi_i2f>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	492c      	ldr	r1, [pc, #176]	; (8002004 <Process_IMU_Mahony+0x2bc>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe ffba 	bl	8000ecc <__aeabi_fdiv>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fa74 	bl	8000448 <__aeabi_f2d>
 8001f60:	a317      	add	r3, pc, #92	; (adr r3, 8001fc0 <Process_IMU_Mahony+0x278>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe fac7 	bl	80004f8 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <Process_IMU_Mahony+0x2c0>)
 8001f78:	f7fe fbe8 	bl	800074c <__aeabi_ddiv>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fd90 	bl	8000aa8 <__aeabi_d2f>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <Process_IMU_Mahony+0x2d4>)
 8001f8c:	6013      	str	r3, [r2, #0]
#ifdef _USE_HW_MAG
	// Get data of Magnetometer
	 Get_magnetometer();
#endif /* _USE_HW_MAG */

	 MahonyAHRSupdateIMU(Gyro_X,Gyro_Y,Gyro_Z,Accel_X,Accel_Y,Accel_Z);
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <Process_IMU_Mahony+0x2c4>)
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <Process_IMU_Mahony+0x2cc>)
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <Process_IMU_Mahony+0x2d4>)
 8001f98:	681c      	ldr	r4, [r3, #0]
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <Process_IMU_Mahony+0x2a4>)
 8001f9c:	681d      	ldr	r5, [r3, #0]
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <Process_IMU_Mahony+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <Process_IMU_Mahony+0x2b4>)
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	9201      	str	r2, [sp, #4]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	462b      	mov	r3, r5
 8001fac:	4622      	mov	r2, r4
 8001fae:	f000 f993 	bl	80022d8 <MahonyAHRSupdateIMU>



}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	54442d18 	.word	0x54442d18
 8001fc4:	400921fb 	.word	0x400921fb
 8001fc8:	20000424 	.word	0x20000424
 8001fcc:	200003e4 	.word	0x200003e4
 8001fd0:	200003de 	.word	0x200003de
 8001fd4:	20000360 	.word	0x20000360
 8001fd8:	20000370 	.word	0x20000370
 8001fdc:	20000408 	.word	0x20000408
 8001fe0:	200003dc 	.word	0x200003dc
 8001fe4:	20000368 	.word	0x20000368
 8001fe8:	41200000 	.word	0x41200000
 8001fec:	200003d0 	.word	0x200003d0
 8001ff0:	200003ec 	.word	0x200003ec
 8001ff4:	20000404 	.word	0x20000404
 8001ff8:	200003f0 	.word	0x200003f0
 8001ffc:	2000036c 	.word	0x2000036c
 8002000:	20000418 	.word	0x20000418
 8002004:	43030000 	.word	0x43030000
 8002008:	40668000 	.word	0x40668000
 800200c:	20000420 	.word	0x20000420
 8002010:	2000040c 	.word	0x2000040c
 8002014:	2000041c 	.word	0x2000041c
 8002018:	200003fc 	.word	0x200003fc
 800201c:	200003e8 	.word	0x200003e8

08002020 <Calibration_IMU>:




void Calibration_IMU()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af02      	add	r7, sp, #8
	uint8_t data[14];
	uint8_t reg = ACCEL_XOUT_H;
 8002026:	233b      	movs	r3, #59	; 0x3b
 8002028:	70fb      	strb	r3, [r7, #3]

	uint8_t mpu_address = MPU9250_ADDRESS_DEFAULT;
 800202a:	23d0      	movs	r3, #208	; 0xd0
 800202c:	74fb      	strb	r3, [r7, #19]

	for(int i=0; i < 100; i++){
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e08a      	b.n	800214a <Calibration_IMU+0x12a>
		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)mpu_address,&reg,1,1000) != HAL_OK);
 8002034:	bf00      	nop
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	b299      	uxth	r1, r3
 800203a:	1cfa      	adds	r2, r7, #3
 800203c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2301      	movs	r3, #1
 8002044:	486b      	ldr	r0, [pc, #428]	; (80021f4 <Calibration_IMU+0x1d4>)
 8002046:	f001 fde5 	bl	8003c14 <HAL_I2C_Master_Transmit>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f2      	bne.n	8002036 <Calibration_IMU+0x16>
		while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)mpu_address, data, 14, 1000) != HAL_OK);
 8002050:	bf00      	nop
 8002052:	7cfb      	ldrb	r3, [r7, #19]
 8002054:	b299      	uxth	r1, r3
 8002056:	1d3a      	adds	r2, r7, #4
 8002058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	230e      	movs	r3, #14
 8002060:	4864      	ldr	r0, [pc, #400]	; (80021f4 <Calibration_IMU+0x1d4>)
 8002062:	f001 fed5 	bl	8003e10 <HAL_I2C_Master_Receive>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f2      	bne.n	8002052 <Calibration_IMU+0x32>

				/*-------- Accel ---------*/
		Accel_x = (int16_t)( (int16_t)( data[0] << 8 ) | data[1]);
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	b21a      	sxth	r2, r3
 8002072:	797b      	ldrb	r3, [r7, #5]
 8002074:	b21b      	sxth	r3, r3
 8002076:	4313      	orrs	r3, r2
 8002078:	b21a      	sxth	r2, r3
 800207a:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <Calibration_IMU+0x1d8>)
 800207c:	801a      	strh	r2, [r3, #0]
		Accel_y = (int16_t)( (int16_t)( data[2] << 8 ) | data[3]);
 800207e:	79bb      	ldrb	r3, [r7, #6]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b21a      	sxth	r2, r3
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	b21b      	sxth	r3, r3
 8002088:	4313      	orrs	r3, r2
 800208a:	b21a      	sxth	r2, r3
 800208c:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <Calibration_IMU+0x1dc>)
 800208e:	801a      	strh	r2, [r3, #0]
		Accel_z = (int16_t)( (int16_t)( data[4] << 8 ) | data[5]);
 8002090:	7a3b      	ldrb	r3, [r7, #8]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	b21a      	sxth	r2, r3
 8002096:	7a7b      	ldrb	r3, [r7, #9]
 8002098:	b21b      	sxth	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b21a      	sxth	r2, r3
 800209e:	4b58      	ldr	r3, [pc, #352]	; (8002200 <Calibration_IMU+0x1e0>)
 80020a0:	801a      	strh	r2, [r3, #0]

				/*-------- Gyrometer --------*/
		Gyro_x = (int16_t)( (int16_t)( data[8]  << 8 ) | data[9]);
 80020a2:	7b3b      	ldrb	r3, [r7, #12]
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	7b7b      	ldrb	r3, [r7, #13]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	4313      	orrs	r3, r2
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	4b54      	ldr	r3, [pc, #336]	; (8002204 <Calibration_IMU+0x1e4>)
 80020b2:	801a      	strh	r2, [r3, #0]
		Gyro_y = (int16_t)( (int16_t)( data[10] << 8 ) | data[11]);
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	b21b      	sxth	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	4b51      	ldr	r3, [pc, #324]	; (8002208 <Calibration_IMU+0x1e8>)
 80020c4:	801a      	strh	r2, [r3, #0]
		Gyro_z = (int16_t)( (int16_t)( data[12] << 8 ) | data[13]);
 80020c6:	7c3b      	ldrb	r3, [r7, #16]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	7c7b      	ldrb	r3, [r7, #17]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	4b4d      	ldr	r3, [pc, #308]	; (800220c <Calibration_IMU+0x1ec>)
 80020d6:	801a      	strh	r2, [r3, #0]

		Accel_x_bias += (int32_t)Accel_x;
 80020d8:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <Calibration_IMU+0x1d8>)
 80020da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020de:	461a      	mov	r2, r3
 80020e0:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <Calibration_IMU+0x1f0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <Calibration_IMU+0x1f0>)
 80020e8:	6013      	str	r3, [r2, #0]
		Accel_y_bias += (int32_t)Accel_y;
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <Calibration_IMU+0x1dc>)
 80020ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <Calibration_IMU+0x1f4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a46      	ldr	r2, [pc, #280]	; (8002214 <Calibration_IMU+0x1f4>)
 80020fa:	6013      	str	r3, [r2, #0]
		Accel_z_bias += (int32_t)Accel_z;
 80020fc:	4b40      	ldr	r3, [pc, #256]	; (8002200 <Calibration_IMU+0x1e0>)
 80020fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002102:	461a      	mov	r2, r3
 8002104:	4b44      	ldr	r3, [pc, #272]	; (8002218 <Calibration_IMU+0x1f8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4413      	add	r3, r2
 800210a:	4a43      	ldr	r2, [pc, #268]	; (8002218 <Calibration_IMU+0x1f8>)
 800210c:	6013      	str	r3, [r2, #0]

		Gyro_x_bias += (int32_t)Gyro_x;
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <Calibration_IMU+0x1e4>)
 8002110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002114:	461a      	mov	r2, r3
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <Calibration_IMU+0x1fc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	4a3f      	ldr	r2, [pc, #252]	; (800221c <Calibration_IMU+0x1fc>)
 800211e:	6013      	str	r3, [r2, #0]
		Gyro_y_bias += (int32_t)Gyro_y;
 8002120:	4b39      	ldr	r3, [pc, #228]	; (8002208 <Calibration_IMU+0x1e8>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002126:	461a      	mov	r2, r3
 8002128:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <Calibration_IMU+0x200>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4413      	add	r3, r2
 800212e:	4a3c      	ldr	r2, [pc, #240]	; (8002220 <Calibration_IMU+0x200>)
 8002130:	6013      	str	r3, [r2, #0]
		Gyro_z_bias += (int32_t)Gyro_z;
 8002132:	4b36      	ldr	r3, [pc, #216]	; (800220c <Calibration_IMU+0x1ec>)
 8002134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002138:	461a      	mov	r2, r3
 800213a:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <Calibration_IMU+0x204>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a38      	ldr	r2, [pc, #224]	; (8002224 <Calibration_IMU+0x204>)
 8002142:	6013      	str	r3, [r2, #0]
	for(int i=0; i < 100; i++){
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3301      	adds	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b63      	cmp	r3, #99	; 0x63
 800214e:	f77f af71 	ble.w	8002034 <Calibration_IMU+0x14>
	}
	Accel_x_bias /= 100;
 8002152:	4b2f      	ldr	r3, [pc, #188]	; (8002210 <Calibration_IMU+0x1f0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a34      	ldr	r2, [pc, #208]	; (8002228 <Calibration_IMU+0x208>)
 8002158:	fb82 1203 	smull	r1, r2, r2, r3
 800215c:	1152      	asrs	r2, r2, #5
 800215e:	17db      	asrs	r3, r3, #31
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <Calibration_IMU+0x1f0>)
 8002164:	6013      	str	r3, [r2, #0]
	Accel_y_bias /= 100;
 8002166:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <Calibration_IMU+0x1f4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <Calibration_IMU+0x208>)
 800216c:	fb82 1203 	smull	r1, r2, r2, r3
 8002170:	1152      	asrs	r2, r2, #5
 8002172:	17db      	asrs	r3, r3, #31
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	4a27      	ldr	r2, [pc, #156]	; (8002214 <Calibration_IMU+0x1f4>)
 8002178:	6013      	str	r3, [r2, #0]
	Accel_z_bias /= 100;
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <Calibration_IMU+0x1f8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <Calibration_IMU+0x208>)
 8002180:	fb82 1203 	smull	r1, r2, r2, r3
 8002184:	1152      	asrs	r2, r2, #5
 8002186:	17db      	asrs	r3, r3, #31
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	4a23      	ldr	r2, [pc, #140]	; (8002218 <Calibration_IMU+0x1f8>)
 800218c:	6013      	str	r3, [r2, #0]

	Gyro_x_bias /= 100;
 800218e:	4b23      	ldr	r3, [pc, #140]	; (800221c <Calibration_IMU+0x1fc>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a25      	ldr	r2, [pc, #148]	; (8002228 <Calibration_IMU+0x208>)
 8002194:	fb82 1203 	smull	r1, r2, r2, r3
 8002198:	1152      	asrs	r2, r2, #5
 800219a:	17db      	asrs	r3, r3, #31
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	4a1f      	ldr	r2, [pc, #124]	; (800221c <Calibration_IMU+0x1fc>)
 80021a0:	6013      	str	r3, [r2, #0]
	Gyro_y_bias /= 100;
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <Calibration_IMU+0x200>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a20      	ldr	r2, [pc, #128]	; (8002228 <Calibration_IMU+0x208>)
 80021a8:	fb82 1203 	smull	r1, r2, r2, r3
 80021ac:	1152      	asrs	r2, r2, #5
 80021ae:	17db      	asrs	r3, r3, #31
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <Calibration_IMU+0x200>)
 80021b4:	6013      	str	r3, [r2, #0]
	Gyro_z_bias /= 100;
 80021b6:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <Calibration_IMU+0x204>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <Calibration_IMU+0x208>)
 80021bc:	fb82 1203 	smull	r1, r2, r2, r3
 80021c0:	1152      	asrs	r2, r2, #5
 80021c2:	17db      	asrs	r3, r3, #31
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	4a17      	ldr	r2, [pc, #92]	; (8002224 <Calibration_IMU+0x204>)
 80021c8:	6013      	str	r3, [r2, #0]

	if(Accel_z_bias > 0) //// Remove gravity from the z-axis accelerometer bias calculation
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <Calibration_IMU+0x1f8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	dd06      	ble.n	80021e0 <Calibration_IMU+0x1c0>
	{
		Accel_z_bias -= (int32_t)accel_sensitivity;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <Calibration_IMU+0x1f8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80021da:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <Calibration_IMU+0x1f8>)
 80021dc:	6013      	str	r3, [r2, #0]
	}
	else
	{
		Accel_z_bias += (int32_t)accel_sensitivity;
	}
}
 80021de:	e005      	b.n	80021ec <Calibration_IMU+0x1cc>
		Accel_z_bias += (int32_t)accel_sensitivity;
 80021e0:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <Calibration_IMU+0x1f8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <Calibration_IMU+0x1f8>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000424 	.word	0x20000424
 80021f8:	200003e4 	.word	0x200003e4
 80021fc:	200003de 	.word	0x200003de
 8002200:	20000360 	.word	0x20000360
 8002204:	20000370 	.word	0x20000370
 8002208:	20000408 	.word	0x20000408
 800220c:	200003dc 	.word	0x200003dc
 8002210:	20000368 	.word	0x20000368
 8002214:	200003ec 	.word	0x200003ec
 8002218:	200003f0 	.word	0x200003f0
 800221c:	20000418 	.word	0x20000418
 8002220:	2000040c 	.word	0x2000040c
 8002224:	200003fc 	.word	0x200003fc
 8002228:	51eb851f 	.word	0x51eb851f

0800222c <LedInit>:




bool LedInit(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
	bool ret = true;
 8002232:	2301      	movs	r3, #1
 8002234:	74fb      	strb	r3, [r7, #19]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	463b      	mov	r3, r7
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002242:	2301      	movs	r3, #1
 8002244:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2302      	movs	r3, #2
 800224c:	60fb      	str	r3, [r7, #12]


	  for (int i =0; i<LED_MAX_CH; i++)
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	e016      	b.n	8002282 <LedInit+0x56>
	  {

		  GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002254:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <LedInit+0x68>)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	889b      	ldrh	r3, [r3, #4]
 800225e:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <LedInit+0x68>)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002268:	463a      	mov	r2, r7
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f001 f9f1 	bl	8003654 <HAL_GPIO_Init>

		  LedOff(i);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f80e 	bl	8002298 <LedOff>
	  for (int i =0; i<LED_MAX_CH; i++)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	dde5      	ble.n	8002254 <LedInit+0x28>

	  }
	return ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000014 	.word	0x20000014

08002298 <LedOff>:
}



void LedOff(uint8_t ch)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
	if (ch >= LED_MAX_CH) return;
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <LedOff+0x34>
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <LedOff+0x3c>)
 80022ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <LedOff+0x3c>)
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	8899      	ldrh	r1, [r3, #4]
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <LedOff+0x3c>)
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	79db      	ldrb	r3, [r3, #7]
 80022c4:	461a      	mov	r2, r3
 80022c6:	f001 fb49 	bl	800395c <HAL_GPIO_WritePin>
 80022ca:	e000      	b.n	80022ce <LedOff+0x36>
	if (ch >= LED_MAX_CH) return;
 80022cc:	bf00      	nop

}
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000014 	.word	0x20000014

080022d8 <MahonyAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b08f      	sub	sp, #60	; 0x3c
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	f7fe fece 	bl	800108c <__aeabi_fcmpeq>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <MahonyAHRSupdateIMU+0x40>
 80022f6:	f04f 0100 	mov.w	r1, #0
 80022fa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80022fc:	f7fe fec6 	bl	800108c <__aeabi_fcmpeq>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <MahonyAHRSupdateIMU+0x40>
 8002306:	f04f 0100 	mov.w	r1, #0
 800230a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800230c:	f7fe febe 	bl	800108c <__aeabi_fcmpeq>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 8163 	bne.w	80025de <MahonyAHRSupdateIMU+0x306>
	{

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f7fe fd22 	bl	8000d64 <__aeabi_fmul>
 8002320:	4603      	mov	r3, r0
 8002322:	461c      	mov	r4, r3
 8002324:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002326:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002328:	f7fe fd1c 	bl	8000d64 <__aeabi_fmul>
 800232c:	4603      	mov	r3, r0
 800232e:	4619      	mov	r1, r3
 8002330:	4620      	mov	r0, r4
 8002332:	f7fe fc0f 	bl	8000b54 <__addsf3>
 8002336:	4603      	mov	r3, r0
 8002338:	461c      	mov	r4, r3
 800233a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800233c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800233e:	f7fe fd11 	bl	8000d64 <__aeabi_fmul>
 8002342:	4603      	mov	r3, r0
 8002344:	4619      	mov	r1, r3
 8002346:	4620      	mov	r0, r4
 8002348:	f7fe fc04 	bl	8000b54 <__addsf3>
 800234c:	4603      	mov	r3, r0
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fa82 	bl	8002858 <invSqrt>
 8002354:	6378      	str	r0, [r7, #52]	; 0x34
		ax *= recipNorm;
 8002356:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002358:	6838      	ldr	r0, [r7, #0]
 800235a:	f7fe fd03 	bl	8000d64 <__aeabi_fmul>
 800235e:	4603      	mov	r3, r0
 8002360:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8002362:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002364:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002366:	f7fe fcfd 	bl	8000d64 <__aeabi_fmul>
 800236a:	4603      	mov	r3, r0
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
		az *= recipNorm;
 800236e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002370:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002372:	f7fe fcf7 	bl	8000d64 <__aeabi_fmul>
 8002376:	4603      	mov	r3, r0
 8002378:	64fb      	str	r3, [r7, #76]	; 0x4c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <MahonyAHRSupdateIMU+0x27c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a76      	ldr	r2, [pc, #472]	; (8002558 <MahonyAHRSupdateIMU+0x280>)
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fced 	bl	8000d64 <__aeabi_fmul>
 800238a:	4603      	mov	r3, r0
 800238c:	461c      	mov	r4, r3
 800238e:	4b73      	ldr	r3, [pc, #460]	; (800255c <MahonyAHRSupdateIMU+0x284>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a73      	ldr	r2, [pc, #460]	; (8002560 <MahonyAHRSupdateIMU+0x288>)
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fce3 	bl	8000d64 <__aeabi_fmul>
 800239e:	4603      	mov	r3, r0
 80023a0:	4619      	mov	r1, r3
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7fe fbd4 	bl	8000b50 <__aeabi_fsub>
 80023a8:	4603      	mov	r3, r0
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
		halfvy = q0 * q1 + q2 * q3;
 80023ac:	4b6b      	ldr	r3, [pc, #428]	; (800255c <MahonyAHRSupdateIMU+0x284>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a68      	ldr	r2, [pc, #416]	; (8002554 <MahonyAHRSupdateIMU+0x27c>)
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fcd4 	bl	8000d64 <__aeabi_fmul>
 80023bc:	4603      	mov	r3, r0
 80023be:	461c      	mov	r4, r3
 80023c0:	4b67      	ldr	r3, [pc, #412]	; (8002560 <MahonyAHRSupdateIMU+0x288>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a64      	ldr	r2, [pc, #400]	; (8002558 <MahonyAHRSupdateIMU+0x280>)
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe fcca 	bl	8000d64 <__aeabi_fmul>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4619      	mov	r1, r3
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7fe fbbd 	bl	8000b54 <__addsf3>
 80023da:	4603      	mov	r3, r0
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 80023de:	4b5f      	ldr	r3, [pc, #380]	; (800255c <MahonyAHRSupdateIMU+0x284>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5e      	ldr	r2, [pc, #376]	; (800255c <MahonyAHRSupdateIMU+0x284>)
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fcbb 	bl	8000d64 <__aeabi_fmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe fbab 	bl	8000b50 <__aeabi_fsub>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461c      	mov	r4, r3
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <MahonyAHRSupdateIMU+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a55      	ldr	r2, [pc, #340]	; (8002558 <MahonyAHRSupdateIMU+0x280>)
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fcab 	bl	8000d64 <__aeabi_fmul>
 800240e:	4603      	mov	r3, r0
 8002410:	4619      	mov	r1, r3
 8002412:	4620      	mov	r0, r4
 8002414:	f7fe fb9e 	bl	8000b54 <__addsf3>
 8002418:	4603      	mov	r3, r0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 800241c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800241e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002420:	f7fe fca0 	bl	8000d64 <__aeabi_fmul>
 8002424:	4603      	mov	r3, r0
 8002426:	461c      	mov	r4, r3
 8002428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800242a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800242c:	f7fe fc9a 	bl	8000d64 <__aeabi_fmul>
 8002430:	4603      	mov	r3, r0
 8002432:	4619      	mov	r1, r3
 8002434:	4620      	mov	r0, r4
 8002436:	f7fe fb8b 	bl	8000b50 <__aeabi_fsub>
 800243a:	4603      	mov	r3, r0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
		halfey = (az * halfvx - ax * halfvz);
 800243e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002440:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002442:	f7fe fc8f 	bl	8000d64 <__aeabi_fmul>
 8002446:	4603      	mov	r3, r0
 8002448:	461c      	mov	r4, r3
 800244a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f7fe fc89 	bl	8000d64 <__aeabi_fmul>
 8002452:	4603      	mov	r3, r0
 8002454:	4619      	mov	r1, r3
 8002456:	4620      	mov	r0, r4
 8002458:	f7fe fb7a 	bl	8000b50 <__aeabi_fsub>
 800245c:	4603      	mov	r3, r0
 800245e:	623b      	str	r3, [r7, #32]
		halfez = (ax * halfvy - ay * halfvx);
 8002460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002462:	6838      	ldr	r0, [r7, #0]
 8002464:	f7fe fc7e 	bl	8000d64 <__aeabi_fmul>
 8002468:	4603      	mov	r3, r0
 800246a:	461c      	mov	r4, r3
 800246c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800246e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002470:	f7fe fc78 	bl	8000d64 <__aeabi_fmul>
 8002474:	4603      	mov	r3, r0
 8002476:	4619      	mov	r1, r3
 8002478:	4620      	mov	r0, r4
 800247a:	f7fe fb69 	bl	8000b50 <__aeabi_fsub>
 800247e:	4603      	mov	r3, r0
 8002480:	61fb      	str	r3, [r7, #28]

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f)
 8002482:	4b38      	ldr	r3, [pc, #224]	; (8002564 <MahonyAHRSupdateIMU+0x28c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fe26 	bl	80010dc <__aeabi_fcmpgt>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d070      	beq.n	8002578 <MahonyAHRSupdateIMU+0x2a0>
		{
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8002496:	4b33      	ldr	r3, [pc, #204]	; (8002564 <MahonyAHRSupdateIMU+0x28c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc61 	bl	8000d64 <__aeabi_fmul>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4930      	ldr	r1, [pc, #192]	; (8002568 <MahonyAHRSupdateIMU+0x290>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fc5c 	bl	8000d64 <__aeabi_fmul>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <MahonyAHRSupdateIMU+0x294>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7fe fb4c 	bl	8000b54 <__addsf3>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <MahonyAHRSupdateIMU+0x294>)
 80024c2:	601a      	str	r2, [r3, #0]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <MahonyAHRSupdateIMU+0x28c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6a39      	ldr	r1, [r7, #32]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fc4a 	bl	8000d64 <__aeabi_fmul>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4925      	ldr	r1, [pc, #148]	; (8002568 <MahonyAHRSupdateIMU+0x290>)
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fc45 	bl	8000d64 <__aeabi_fmul>
 80024da:	4603      	mov	r3, r0
 80024dc:	461a      	mov	r2, r3
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <MahonyAHRSupdateIMU+0x298>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f7fe fb35 	bl	8000b54 <__addsf3>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <MahonyAHRSupdateIMU+0x298>)
 80024f0:	601a      	str	r2, [r3, #0]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <MahonyAHRSupdateIMU+0x28c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69f9      	ldr	r1, [r7, #28]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fc33 	bl	8000d64 <__aeabi_fmul>
 80024fe:	4603      	mov	r3, r0
 8002500:	4919      	ldr	r1, [pc, #100]	; (8002568 <MahonyAHRSupdateIMU+0x290>)
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fc2e 	bl	8000d64 <__aeabi_fmul>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <MahonyAHRSupdateIMU+0x29c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	4610      	mov	r0, r2
 8002514:	f7fe fb1e 	bl	8000b54 <__addsf3>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <MahonyAHRSupdateIMU+0x29c>)
 800251e:	601a      	str	r2, [r3, #0]
			gx += integralFBx;	// apply integral feedback
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MahonyAHRSupdateIMU+0x294>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7fe fb14 	bl	8000b54 <__addsf3>
 800252c:	4603      	mov	r3, r0
 800252e:	60fb      	str	r3, [r7, #12]
			gy += integralFBy;
 8002530:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <MahonyAHRSupdateIMU+0x298>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	68b8      	ldr	r0, [r7, #8]
 8002538:	f7fe fb0c 	bl	8000b54 <__addsf3>
 800253c:	4603      	mov	r3, r0
 800253e:	60bb      	str	r3, [r7, #8]
			gz += integralFBz;
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <MahonyAHRSupdateIMU+0x29c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fb04 	bl	8000b54 <__addsf3>
 800254c:	4603      	mov	r3, r0
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	e01e      	b.n	8002590 <MahonyAHRSupdateIMU+0x2b8>
 8002552:	bf00      	nop
 8002554:	20000234 	.word	0x20000234
 8002558:	2000023c 	.word	0x2000023c
 800255c:	20000020 	.word	0x20000020
 8002560:	20000238 	.word	0x20000238
 8002564:	20000224 	.word	0x20000224
 8002568:	3c23d70a 	.word	0x3c23d70a
 800256c:	20000228 	.word	0x20000228
 8002570:	2000022c 	.word	0x2000022c
 8002574:	20000230 	.word	0x20000230
		}
		else
		{
			integralFBx = 0.0f;	// prevent integral windup
 8002578:	4b95      	ldr	r3, [pc, #596]	; (80027d0 <MahonyAHRSupdateIMU+0x4f8>)
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002580:	4b94      	ldr	r3, [pc, #592]	; (80027d4 <MahonyAHRSupdateIMU+0x4fc>)
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002588:	4b93      	ldr	r3, [pc, #588]	; (80027d8 <MahonyAHRSupdateIMU+0x500>)
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8002590:	4b92      	ldr	r3, [pc, #584]	; (80027dc <MahonyAHRSupdateIMU+0x504>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fbe4 	bl	8000d64 <__aeabi_fmul>
 800259c:	4603      	mov	r3, r0
 800259e:	4619      	mov	r1, r3
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7fe fad7 	bl	8000b54 <__addsf3>
 80025a6:	4603      	mov	r3, r0
 80025a8:	60fb      	str	r3, [r7, #12]
		gy += twoKp * halfey;
 80025aa:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <MahonyAHRSupdateIMU+0x504>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fbd7 	bl	8000d64 <__aeabi_fmul>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4619      	mov	r1, r3
 80025ba:	68b8      	ldr	r0, [r7, #8]
 80025bc:	f7fe faca 	bl	8000b54 <__addsf3>
 80025c0:	4603      	mov	r3, r0
 80025c2:	60bb      	str	r3, [r7, #8]
		gz += twoKp * halfez;
 80025c4:	4b85      	ldr	r3, [pc, #532]	; (80027dc <MahonyAHRSupdateIMU+0x504>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69f9      	ldr	r1, [r7, #28]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fbca 	bl	8000d64 <__aeabi_fmul>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4619      	mov	r1, r3
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7fe fabd 	bl	8000b54 <__addsf3>
 80025da:	4603      	mov	r3, r0
 80025dc:	607b      	str	r3, [r7, #4]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 80025de:	4980      	ldr	r1, [pc, #512]	; (80027e0 <MahonyAHRSupdateIMU+0x508>)
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7fe fbbf 	bl	8000d64 <__aeabi_fmul>
 80025e6:	4603      	mov	r3, r0
 80025e8:	60fb      	str	r3, [r7, #12]
	gy *= (0.5f * (1.0f / sampleFreq));
 80025ea:	497d      	ldr	r1, [pc, #500]	; (80027e0 <MahonyAHRSupdateIMU+0x508>)
 80025ec:	68b8      	ldr	r0, [r7, #8]
 80025ee:	f7fe fbb9 	bl	8000d64 <__aeabi_fmul>
 80025f2:	4603      	mov	r3, r0
 80025f4:	60bb      	str	r3, [r7, #8]
	gz *= (0.5f * (1.0f / sampleFreq));
 80025f6:	497a      	ldr	r1, [pc, #488]	; (80027e0 <MahonyAHRSupdateIMU+0x508>)
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fe fbb3 	bl	8000d64 <__aeabi_fmul>
 80025fe:	4603      	mov	r3, r0
 8002600:	607b      	str	r3, [r7, #4]
	qa = q0;
 8002602:	4b78      	ldr	r3, [pc, #480]	; (80027e4 <MahonyAHRSupdateIMU+0x50c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]
	qb = q1;
 8002608:	4b77      	ldr	r3, [pc, #476]	; (80027e8 <MahonyAHRSupdateIMU+0x510>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	617b      	str	r3, [r7, #20]
	qc = q2;
 800260e:	4b77      	ldr	r3, [pc, #476]	; (80027ec <MahonyAHRSupdateIMU+0x514>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	613b      	str	r3, [r7, #16]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fba1 	bl	8000d64 <__aeabi_fmul>
 8002622:	4603      	mov	r3, r0
 8002624:	461c      	mov	r4, r3
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	6938      	ldr	r0, [r7, #16]
 800262a:	f7fe fb9b 	bl	8000d64 <__aeabi_fmul>
 800262e:	4603      	mov	r3, r0
 8002630:	4619      	mov	r1, r3
 8002632:	4620      	mov	r0, r4
 8002634:	f7fe fa8c 	bl	8000b50 <__aeabi_fsub>
 8002638:	4603      	mov	r3, r0
 800263a:	461c      	mov	r4, r3
 800263c:	4b6c      	ldr	r3, [pc, #432]	; (80027f0 <MahonyAHRSupdateIMU+0x518>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fb8e 	bl	8000d64 <__aeabi_fmul>
 8002648:	4603      	mov	r3, r0
 800264a:	4619      	mov	r1, r3
 800264c:	4620      	mov	r0, r4
 800264e:	f7fe fa7f 	bl	8000b50 <__aeabi_fsub>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <MahonyAHRSupdateIMU+0x50c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7fe fa79 	bl	8000b54 <__addsf3>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <MahonyAHRSupdateIMU+0x50c>)
 8002668:	601a      	str	r2, [r3, #0]
	q1 += (qa * gx + qc * gz - q3 * gy);
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	69b8      	ldr	r0, [r7, #24]
 800266e:	f7fe fb79 	bl	8000d64 <__aeabi_fmul>
 8002672:	4603      	mov	r3, r0
 8002674:	461c      	mov	r4, r3
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	6938      	ldr	r0, [r7, #16]
 800267a:	f7fe fb73 	bl	8000d64 <__aeabi_fmul>
 800267e:	4603      	mov	r3, r0
 8002680:	4619      	mov	r1, r3
 8002682:	4620      	mov	r0, r4
 8002684:	f7fe fa66 	bl	8000b54 <__addsf3>
 8002688:	4603      	mov	r3, r0
 800268a:	461c      	mov	r4, r3
 800268c:	4b58      	ldr	r3, [pc, #352]	; (80027f0 <MahonyAHRSupdateIMU+0x518>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fb66 	bl	8000d64 <__aeabi_fmul>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	4620      	mov	r0, r4
 800269e:	f7fe fa57 	bl	8000b50 <__aeabi_fsub>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <MahonyAHRSupdateIMU+0x510>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4610      	mov	r0, r2
 80026ae:	f7fe fa51 	bl	8000b54 <__addsf3>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <MahonyAHRSupdateIMU+0x510>)
 80026b8:	601a      	str	r2, [r3, #0]
	q2 += (qa * gy - qb * gz + q3 * gx);
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	69b8      	ldr	r0, [r7, #24]
 80026be:	f7fe fb51 	bl	8000d64 <__aeabi_fmul>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461c      	mov	r4, r3
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	6978      	ldr	r0, [r7, #20]
 80026ca:	f7fe fb4b 	bl	8000d64 <__aeabi_fmul>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4619      	mov	r1, r3
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7fe fa3c 	bl	8000b50 <__aeabi_fsub>
 80026d8:	4603      	mov	r3, r0
 80026da:	461c      	mov	r4, r3
 80026dc:	4b44      	ldr	r3, [pc, #272]	; (80027f0 <MahonyAHRSupdateIMU+0x518>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68f9      	ldr	r1, [r7, #12]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fb3e 	bl	8000d64 <__aeabi_fmul>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4619      	mov	r1, r3
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7fe fa31 	bl	8000b54 <__addsf3>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <MahonyAHRSupdateIMU+0x514>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f7fe fa29 	bl	8000b54 <__addsf3>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	4b39      	ldr	r3, [pc, #228]	; (80027ec <MahonyAHRSupdateIMU+0x514>)
 8002708:	601a      	str	r2, [r3, #0]
	q3 += (qa * gz + qb * gy - qc * gx);
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	69b8      	ldr	r0, [r7, #24]
 800270e:	f7fe fb29 	bl	8000d64 <__aeabi_fmul>
 8002712:	4603      	mov	r3, r0
 8002714:	461c      	mov	r4, r3
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	6978      	ldr	r0, [r7, #20]
 800271a:	f7fe fb23 	bl	8000d64 <__aeabi_fmul>
 800271e:	4603      	mov	r3, r0
 8002720:	4619      	mov	r1, r3
 8002722:	4620      	mov	r0, r4
 8002724:	f7fe fa16 	bl	8000b54 <__addsf3>
 8002728:	4603      	mov	r3, r0
 800272a:	461c      	mov	r4, r3
 800272c:	68f9      	ldr	r1, [r7, #12]
 800272e:	6938      	ldr	r0, [r7, #16]
 8002730:	f7fe fb18 	bl	8000d64 <__aeabi_fmul>
 8002734:	4603      	mov	r3, r0
 8002736:	4619      	mov	r1, r3
 8002738:	4620      	mov	r0, r4
 800273a:	f7fe fa09 	bl	8000b50 <__aeabi_fsub>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b2b      	ldr	r3, [pc, #172]	; (80027f0 <MahonyAHRSupdateIMU+0x518>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f7fe fa03 	bl	8000b54 <__addsf3>
 800274e:	4603      	mov	r3, r0
 8002750:	461a      	mov	r2, r3
 8002752:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <MahonyAHRSupdateIMU+0x518>)
 8002754:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002756:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <MahonyAHRSupdateIMU+0x50c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <MahonyAHRSupdateIMU+0x50c>)
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe faff 	bl	8000d64 <__aeabi_fmul>
 8002766:	4603      	mov	r3, r0
 8002768:	461c      	mov	r4, r3
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <MahonyAHRSupdateIMU+0x510>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1e      	ldr	r2, [pc, #120]	; (80027e8 <MahonyAHRSupdateIMU+0x510>)
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe faf5 	bl	8000d64 <__aeabi_fmul>
 800277a:	4603      	mov	r3, r0
 800277c:	4619      	mov	r1, r3
 800277e:	4620      	mov	r0, r4
 8002780:	f7fe f9e8 	bl	8000b54 <__addsf3>
 8002784:	4603      	mov	r3, r0
 8002786:	461c      	mov	r4, r3
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <MahonyAHRSupdateIMU+0x514>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <MahonyAHRSupdateIMU+0x514>)
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fae6 	bl	8000d64 <__aeabi_fmul>
 8002798:	4603      	mov	r3, r0
 800279a:	4619      	mov	r1, r3
 800279c:	4620      	mov	r0, r4
 800279e:	f7fe f9d9 	bl	8000b54 <__addsf3>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461c      	mov	r4, r3
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <MahonyAHRSupdateIMU+0x518>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <MahonyAHRSupdateIMU+0x518>)
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fad7 	bl	8000d64 <__aeabi_fmul>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4619      	mov	r1, r3
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7fe f9ca 	bl	8000b54 <__addsf3>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f848 	bl	8002858 <invSqrt>
 80027c8:	6378      	str	r0, [r7, #52]	; 0x34
	q0 *= recipNorm;
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <MahonyAHRSupdateIMU+0x50c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e011      	b.n	80027f4 <MahonyAHRSupdateIMU+0x51c>
 80027d0:	20000228 	.word	0x20000228
 80027d4:	2000022c 	.word	0x2000022c
 80027d8:	20000230 	.word	0x20000230
 80027dc:	2000001c 	.word	0x2000001c
 80027e0:	3ba3d70a 	.word	0x3ba3d70a
 80027e4:	20000020 	.word	0x20000020
 80027e8:	20000234 	.word	0x20000234
 80027ec:	20000238 	.word	0x20000238
 80027f0:	2000023c 	.word	0x2000023c
 80027f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fab4 	bl	8000d64 <__aeabi_fmul>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461a      	mov	r2, r3
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <MahonyAHRSupdateIMU+0x570>)
 8002802:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <MahonyAHRSupdateIMU+0x574>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe faaa 	bl	8000d64 <__aeabi_fmul>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <MahonyAHRSupdateIMU+0x574>)
 8002816:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <MahonyAHRSupdateIMU+0x578>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe faa0 	bl	8000d64 <__aeabi_fmul>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MahonyAHRSupdateIMU+0x578>)
 800282a:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MahonyAHRSupdateIMU+0x57c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fa96 	bl	8000d64 <__aeabi_fmul>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <MahonyAHRSupdateIMU+0x57c>)
 800283e:	601a      	str	r2, [r3, #0]
}
 8002840:	bf00      	nop
 8002842:	373c      	adds	r7, #60	; 0x3c
 8002844:	46bd      	mov	sp, r7
 8002846:	bd90      	pop	{r4, r7, pc}
 8002848:	20000020 	.word	0x20000020
 800284c:	20000234 	.word	0x20000234
 8002850:	20000238 	.word	0x20000238
 8002854:	2000023c 	.word	0x2000023c

08002858 <invSqrt>:

        }


float invSqrt(float x)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002860:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7fe fa7d 	bl	8000d64 <__aeabi_fmul>
 800286a:	4603      	mov	r3, r0
 800286c:	617b      	str	r3, [r7, #20]
	float y = x;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002872:	f107 0310 	add.w	r3, r7, #16
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	105a      	asrs	r2, r3, #1
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <invSqrt+0x74>)
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	6979      	ldr	r1, [r7, #20]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fa67 	bl	8000d64 <__aeabi_fmul>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f7fe fa60 	bl	8000d64 <__aeabi_fmul>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4619      	mov	r1, r3
 80028a8:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80028ac:	f7fe f950 	bl	8000b50 <__aeabi_fsub>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7fe fa53 	bl	8000d64 <__aeabi_fmul>
 80028be:	4603      	mov	r3, r0
 80028c0:	613b      	str	r3, [r7, #16]
	return y;
 80028c2:	693b      	ldr	r3, [r7, #16]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	5f3759df 	.word	0x5f3759df

080028d0 <MX_TIM1_Init>:



/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028d6:	f107 0308 	add.w	r3, r7, #8
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e4:	463b      	mov	r3, r7
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <MX_TIM1_Init+0x98>)
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <MX_TIM1_Init+0x9c>)
 80028f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <MX_TIM1_Init+0x98>)
 80028f4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80028f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <MX_TIM1_Init+0x98>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <MX_TIM1_Init+0x98>)
 8002902:	2263      	movs	r2, #99	; 0x63
 8002904:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_TIM1_Init+0x98>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_TIM1_Init+0x98>)
 800290e:	2200      	movs	r2, #0
 8002910:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_TIM1_Init+0x98>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002918:	4813      	ldr	r0, [pc, #76]	; (8002968 <MX_TIM1_Init+0x98>)
 800291a:	f002 fd4d 	bl	80053b8 <HAL_TIM_Base_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002924:	f7fe fe96 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <MX_TIM1_Init+0x98>)
 8002936:	f002 fee9 	bl	800570c <HAL_TIM_ConfigClockSource>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002940:	f7fe fe88 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002944:	2300      	movs	r3, #0
 8002946:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800294c:	463b      	mov	r3, r7
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_TIM1_Init+0x98>)
 8002952:	f003 f8bb 	bl	8005acc <HAL_TIMEx_MasterConfigSynchronization>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800295c:	f7fe fe7a 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000508 	.word	0x20000508
 800296c:	40012c00 	.word	0x40012c00

08002970 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002976:	f107 0308 	add.w	r3, r7, #8
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002984:	463b      	mov	r3, r7
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <MX_TIM3_Init+0x94>)
 800298e:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <MX_TIM3_Init+0x98>)
 8002990:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <MX_TIM3_Init+0x94>)
 8002994:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002998:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_TIM3_Init+0x94>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029a2:	2263      	movs	r2, #99	; 0x63
 80029a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ac:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029b2:	4814      	ldr	r0, [pc, #80]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029b4:	f002 fd00 	bl	80053b8 <HAL_TIM_Base_Init>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80029be:	f7fe fe49 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	4619      	mov	r1, r3
 80029ce:	480d      	ldr	r0, [pc, #52]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029d0:	f002 fe9c 	bl	800570c <HAL_TIM_ConfigClockSource>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80029da:	f7fe fe3b 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029e6:	463b      	mov	r3, r7
 80029e8:	4619      	mov	r1, r3
 80029ea:	4806      	ldr	r0, [pc, #24]	; (8002a04 <MX_TIM3_Init+0x94>)
 80029ec:	f003 f86e 	bl	8005acc <HAL_TIMEx_MasterConfigSynchronization>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80029f6:	f7fe fe2d 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200004c0 	.word	0x200004c0
 8002a08:	40000400 	.word	0x40000400

08002a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <HAL_TIM_Base_MspInit+0xa8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d12c      	bne.n	8002a78 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_TIM_Base_MspInit+0xac>)
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_TIM_Base_MspInit+0xac>)
 8002a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a28:	6193      	str	r3, [r2, #24]
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_TIM_Base_MspInit+0xac>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2018      	movs	r0, #24
 8002a3c:	f000 fb35 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002a40:	2018      	movs	r0, #24
 8002a42:	f000 fb4e 	bl	80030e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002a46:	2200      	movs	r2, #0
 8002a48:	2100      	movs	r1, #0
 8002a4a:	2019      	movs	r0, #25
 8002a4c:	f000 fb2d 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002a50:	2019      	movs	r0, #25
 8002a52:	f000 fb46 	bl	80030e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2100      	movs	r1, #0
 8002a5a:	201a      	movs	r0, #26
 8002a5c:	f000 fb25 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002a60:	201a      	movs	r0, #26
 8002a62:	f000 fb3e 	bl	80030e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	201b      	movs	r0, #27
 8002a6c:	f000 fb1d 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a70:	201b      	movs	r0, #27
 8002a72:	f000 fb36 	bl	80030e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a76:	e018      	b.n	8002aaa <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0f      	ldr	r2, [pc, #60]	; (8002abc <HAL_TIM_Base_MspInit+0xb0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d113      	bne.n	8002aaa <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_TIM_Base_MspInit+0xac>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <HAL_TIM_Base_MspInit+0xac>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	61d3      	str	r3, [r2, #28]
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_TIM_Base_MspInit+0xac>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	201d      	movs	r0, #29
 8002aa0:	f000 fb03 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002aa4:	201d      	movs	r0, #29
 8002aa6:	f000 fb1c 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40000400 	.word	0x40000400

08002ac0 <uartInit>:
DMA_HandleTypeDef hdma_usart1_rx;



bool uartInit(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
	for (int i=0; i<UART_MAX_CH; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	e007      	b.n	8002adc <uartInit+0x1c>
	{
		is_open[i] = false;
 8002acc:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <uartInit+0x30>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<UART_MAX_CH; i++)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	ddf4      	ble.n	8002acc <uartInit+0xc>
	}

	return true;
 8002ae2:	2301      	movs	r3, #1

}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000240 	.word	0x20000240

08002af4 <uartOpen>:



bool uartOpen(uint8_t ch , uint32_t baud)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

	switch(ch)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d16d      	bne.n	8002be6 <uartOpen+0xf2>
	{
		case _DEF_UART1:

			  huart1.Instance 			 = USART1;
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <uartOpen+0xfc>)
 8002b0c:	4a39      	ldr	r2, [pc, #228]	; (8002bf4 <uartOpen+0x100>)
 8002b0e:	601a      	str	r2, [r3, #0]
			  huart1.Init.BaudRate 		 = baud;
 8002b10:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <uartOpen+0xfc>)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6053      	str	r3, [r2, #4]
			  huart1.Init.WordLength 	 = UART_WORDLENGTH_8B;
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <uartOpen+0xfc>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
			  huart1.Init.StopBits 		 = UART_STOPBITS_1;
 8002b1c:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <uartOpen+0xfc>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
			  huart1.Init.Parity 		 = UART_PARITY_NONE;
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <uartOpen+0xfc>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
			  huart1.Init.Mode 			 = UART_MODE_TX_RX;
 8002b28:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <uartOpen+0xfc>)
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	615a      	str	r2, [r3, #20]
			  huart1.Init.HwFlowCtl		 = UART_HWCONTROL_NONE;
 8002b2e:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <uartOpen+0xfc>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
			  huart1.Init.OverSampling 	 = UART_OVERSAMPLING_16;
 8002b34:	4b2e      	ldr	r3, [pc, #184]	; (8002bf0 <uartOpen+0xfc>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]

			  HAL_UART_Init(&huart1);
 8002b3a:	482d      	ldr	r0, [pc, #180]	; (8002bf0 <uartOpen+0xfc>)
 8002b3c:	f003 f836 	bl	8005bac <HAL_UART_Init>

			  qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4a2c      	ldr	r2, [pc, #176]	; (8002bf8 <uartOpen+0x104>)
 8002b46:	4413      	add	r3, r2
 8002b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4c:	492b      	ldr	r1, [pc, #172]	; (8002bfc <uartOpen+0x108>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe ff15 	bl	800197e <qbufferCreate>

			  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <uartOpen+0x10c>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <uartOpen+0x10c>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6153      	str	r3, [r2, #20]
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <uartOpen+0x10c>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]

			  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	200f      	movs	r0, #15
 8002b72:	f000 fa9a 	bl	80030aa <HAL_NVIC_SetPriority>
			  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002b76:	200f      	movs	r0, #15
 8002b78:	f000 fab3 	bl	80030e2 <HAL_NVIC_EnableIRQ>




			  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b7c:	481c      	ldr	r0, [pc, #112]	; (8002bf0 <uartOpen+0xfc>)
 8002b7e:	f003 f815 	bl	8005bac <HAL_UART_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <uartOpen+0x9a>
			  {
			   ret = false;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]

				  }
				  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
				  qbuffer[ch].out = qbuffer[ch].in;
			  }
			break;
 8002b8c:	e02a      	b.n	8002be4 <uartOpen+0xf0>
				  ret = true;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
				  is_open[ch] = true;
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4a1b      	ldr	r2, [pc, #108]	; (8002c04 <uartOpen+0x110>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	54d1      	strb	r1, [r2, r3]
				  if(HAL_UART_Receive_DMA(&huart1, (uint8_t*)&rx_buf[0], 256) != HAL_OK) /* 수신: Interrupt 방식에서  DMA 방식으로 수정 */
 8002b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b9e:	4917      	ldr	r1, [pc, #92]	; (8002bfc <uartOpen+0x108>)
 8002ba0:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <uartOpen+0xfc>)
 8002ba2:	f003 f8e2 	bl	8005d6a <HAL_UART_Receive_DMA>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <uartOpen+0xbc>
					  ret = false;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
				  qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <uartOpen+0x104>)
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3308      	adds	r3, #8
 8002bba:	6819      	ldr	r1, [r3, #0]
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <uartOpen+0x114>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	1a8a      	subs	r2, r1, r2
 8002bc6:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <uartOpen+0x104>)
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	440b      	add	r3, r1
 8002bcc:	601a      	str	r2, [r3, #0]
				  qbuffer[ch].out = qbuffer[ch].in;
 8002bce:	79fa      	ldrb	r2, [r7, #7]
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	4909      	ldr	r1, [pc, #36]	; (8002bf8 <uartOpen+0x104>)
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	440a      	add	r2, r1
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <uartOpen+0x104>)
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	440b      	add	r3, r1
 8002be0:	3304      	adds	r3, #4
 8002be2:	601a      	str	r2, [r3, #0]
			break;
 8002be4:	bf00      	nop
	}


	return ret;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]

}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000594 	.word	0x20000594
 8002bf4:	40013800 	.word	0x40013800
 8002bf8:	20000244 	.word	0x20000244
 8002bfc:	20000254 	.word	0x20000254
 8002c00:	40021000 	.word	0x40021000
 8002c04:	20000240 	.word	0x20000240
 8002c08:	20000550 	.word	0x20000550

08002c0c <uartWrite>:

}


uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	73fb      	strb	r3, [r7, #15]
		uint32_t ret = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
		HAL_StatusTypeDef status;

		switch(ch)
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10e      	bne.n	8002c42 <uartWrite+0x36>
		{
			case _DEF_UART1:
			    status =  HAL_UART_Transmit(&huart1, p_data, length, 100);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	2364      	movs	r3, #100	; 0x64
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	4807      	ldr	r0, [pc, #28]	; (8002c4c <uartWrite+0x40>)
 8002c2e:	f003 f80a 	bl	8005c46 <HAL_UART_Transmit>
 8002c32:	4603      	mov	r3, r0
 8002c34:	74fb      	strb	r3, [r7, #19]
			    if(status == HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <uartWrite+0x34>
			    {
			    	ret = length;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	617b      	str	r3, [r7, #20]
			    }
				break;
 8002c40:	bf00      	nop
		}
		return ret;
 8002c42:	697b      	ldr	r3, [r7, #20]

}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000594 	.word	0x20000594

08002c50 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8002c50:	b40e      	push	{r1, r2, r3}
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b0c7      	sub	sp, #284	; 0x11c
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4602      	mov	r2, r0
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	701a      	strb	r2, [r3, #0]
	va_list args;
	int len;

	uint32_t ret;

	va_start(args, fmt);
 8002c5e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	601a      	str	r2, [r3, #0]

	len = vsnprintf(buf, 256, fmt, args);
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	f107 0010 	add.w	r0, r7, #16
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c7a:	f004 fa93 	bl	80071a4 <vsniprintf>
 8002c7e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	ret =  uartWrite(ch, (uint8_t *)buf, len);
 8002c82:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c86:	f107 0110 	add.w	r1, r7, #16
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ffbc 	bl	8002c0c <uartWrite>
 8002c94:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

	va_end(args);

	return ret;
 8002c98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ca8:	b003      	add	sp, #12
 8002caa:	4770      	bx	lr

08002cac <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART1)
   {

   }
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
   {
	 qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
	 HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1],1);
   }
#endif
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0310 	add.w	r3, r7, #16
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <HAL_UART_MspInit+0xe8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d15f      	bne.n	8002db0 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cf0:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <HAL_UART_MspInit+0xec>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <HAL_UART_MspInit+0xec>)
 8002cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <HAL_UART_MspInit+0xec>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d08:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <HAL_UART_MspInit+0xec>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	4a2b      	ldr	r2, [pc, #172]	; (8002dbc <HAL_UART_MspInit+0xec>)
 8002d0e:	f043 0304 	orr.w	r3, r3, #4
 8002d12:	6193      	str	r3, [r2, #24]
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <HAL_UART_MspInit+0xec>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d26:	2302      	movs	r3, #2
 8002d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2e:	f107 0310 	add.w	r3, r7, #16
 8002d32:	4619      	mov	r1, r3
 8002d34:	4822      	ldr	r0, [pc, #136]	; (8002dc0 <HAL_UART_MspInit+0xf0>)
 8002d36:	f000 fc8d 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 0310 	add.w	r3, r7, #16
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	481c      	ldr	r0, [pc, #112]	; (8002dc0 <HAL_UART_MspInit+0xf0>)
 8002d50:	f000 fc80 	bl	8003654 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d56:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <HAL_UART_MspInit+0xf8>)
 8002d58:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d84:	480f      	ldr	r0, [pc, #60]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d86:	f000 f9c7 	bl	8003118 <HAL_DMA_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002d90:	f7fe fc60 	bl	8001654 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_UART_MspInit+0xf4>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002da0:	2200      	movs	r2, #0
 8002da2:	2100      	movs	r1, #0
 8002da4:	2025      	movs	r0, #37	; 0x25
 8002da6:	f000 f980 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002daa:	2025      	movs	r0, #37	; 0x25
 8002dac:	f000 f999 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002db0:	bf00      	nop
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	20000550 	.word	0x20000550
 8002dc8:	40020058 	.word	0x40020058

08002dcc <hwInit>:

#include "hw.h"


void hwInit(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
	bspInit();
 8002dd0:	f7fe fbbe 	bl	8001550 <bspInit>

/*  TODO: HW 설정 - "하드웨어 초기화" (3) */

	uartInit();
 8002dd4:	f7ff fe74 	bl	8002ac0 <uartInit>
	LedInit();
 8002dd8:	f7ff fa28 	bl	800222c <LedInit>

	MX_I2C1_Init();
 8002ddc:	f7fe fdea 	bl	80019b4 <MX_I2C1_Init>
	MX_TIM1_Init();
 8002de0:	f7ff fd76 	bl	80028d0 <MX_TIM1_Init>
	MX_TIM3_Init();
 8002de4:	f7ff fdc4 	bl	8002970 <MX_TIM3_Init>

	Init_IMU();
 8002de8:	f7fe ff22 	bl	8001c30 <Init_IMU>

#endif /* _USE_HW_MAG*/



}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_Init+0x28>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_Init+0x28>)
 8002dfa:	f043 0310 	orr.w	r3, r3, #16
 8002dfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e00:	2003      	movs	r0, #3
 8002e02:	f000 f947 	bl	8003094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f000 f808 	bl	8002e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e0c:	f7fe fc28 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40022000 	.word	0x40022000

08002e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_InitTick+0x54>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_InitTick+0x58>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f95f 	bl	80030fe <HAL_SYSTICK_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00e      	b.n	8002e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	d80a      	bhi.n	8002e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f000 f927 	bl	80030aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_InitTick+0x5c>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20000010 	.word	0x20000010
 8002e74:	20000028 	.word	0x20000028
 8002e78:	20000024 	.word	0x20000024

08002e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_IncTick+0x1c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_IncTick+0x20>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <HAL_IncTick+0x20>)
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	20000028 	.word	0x20000028
 8002e9c:	200005d8 	.word	0x200005d8

08002ea0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <HAL_GetTick+0x10>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	200005d8 	.word	0x200005d8

08002eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d005      	beq.n	8002eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_Delay+0x44>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eda:	bf00      	nop
 8002edc:	f7ff ffe0 	bl	8002ea0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d8f7      	bhi.n	8002edc <HAL_Delay+0x28>
  {
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000028 	.word	0x20000028

08002efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <__NVIC_GetPriorityGrouping+0x18>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db0b      	blt.n	8002f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4906      	ldr	r1, [pc, #24]	; (8002f94 <__NVIC_EnableIRQ+0x34>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2001      	movs	r0, #1
 8002f82:	fa00 f202 	lsl.w	r2, r0, r2
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	; (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	; (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf28      	it	cs
 800300a:	2304      	movcs	r3, #4
 800300c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3304      	adds	r3, #4
 8003012:	2b06      	cmp	r3, #6
 8003014:	d902      	bls.n	800301c <NVIC_EncodePriority+0x30>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3b03      	subs	r3, #3
 800301a:	e000      	b.n	800301e <NVIC_EncodePriority+0x32>
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	f04f 32ff 	mov.w	r2, #4294967295
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003034:	f04f 31ff 	mov.w	r1, #4294967295
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43d9      	mvns	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	4313      	orrs	r3, r2
         );
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	; 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003060:	d301      	bcc.n	8003066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003062:	2301      	movs	r3, #1
 8003064:	e00f      	b.n	8003086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <SysTick_Config+0x40>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306e:	210f      	movs	r1, #15
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f7ff ff90 	bl	8002f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Config+0x40>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SysTick_Config+0x40>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff2d 	bl	8002efc <__NVIC_SetPriorityGrouping>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff42 	bl	8002f44 <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff90 	bl	8002fec <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5f 	bl	8002f98 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff35 	bl	8002f60 <__NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffa2 	bl	8003050 <SysTick_Config>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e043      	b.n	80031b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_DMA_Init+0xa8>)
 8003136:	4413      	add	r3, r2
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_DMA_Init+0xac>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	009a      	lsls	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <HAL_DMA_Init+0xb0>)
 800314a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003162:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003166:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	bffdfff8 	.word	0xbffdfff8
 80031c4:	cccccccd 	.word	0xcccccccd
 80031c8:	40020000 	.word	0x40020000

080031cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_DMA_Start_IT+0x20>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e04a      	b.n	8003282 <HAL_DMA_Start_IT+0xb6>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d13a      	bne.n	8003274 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f9e8 	bl	80035f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 020e 	orr.w	r2, r2, #14
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e00f      	b.n	8003262 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0204 	bic.w	r2, r2, #4
 8003250:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 020a 	orr.w	r2, r2, #10
 8003260:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e005      	b.n	8003280 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800329c:	2b02      	cmp	r3, #2
 800329e:	d008      	beq.n	80032b2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2204      	movs	r2, #4
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e020      	b.n	80032f4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 020e 	bic.w	r2, r2, #14
 80032c0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f202 	lsl.w	r2, r1, r2
 80032e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
	...

08003300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003312:	2b02      	cmp	r3, #2
 8003314:	d005      	beq.n	8003322 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2204      	movs	r2, #4
 800331a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e051      	b.n	80033c6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 020e 	bic.w	r2, r2, #14
 8003330:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <HAL_DMA_Abort_IT+0xd0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d029      	beq.n	80033a0 <HAL_DMA_Abort_IT+0xa0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <HAL_DMA_Abort_IT+0xd4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d022      	beq.n	800339c <HAL_DMA_Abort_IT+0x9c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_DMA_Abort_IT+0xd8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d01a      	beq.n	8003396 <HAL_DMA_Abort_IT+0x96>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_DMA_Abort_IT+0xdc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d012      	beq.n	8003390 <HAL_DMA_Abort_IT+0x90>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_DMA_Abort_IT+0xe0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00a      	beq.n	800338a <HAL_DMA_Abort_IT+0x8a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1a      	ldr	r2, [pc, #104]	; (80033e4 <HAL_DMA_Abort_IT+0xe4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d102      	bne.n	8003384 <HAL_DMA_Abort_IT+0x84>
 800337e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003382:	e00e      	b.n	80033a2 <HAL_DMA_Abort_IT+0xa2>
 8003384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003388:	e00b      	b.n	80033a2 <HAL_DMA_Abort_IT+0xa2>
 800338a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800338e:	e008      	b.n	80033a2 <HAL_DMA_Abort_IT+0xa2>
 8003390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003394:	e005      	b.n	80033a2 <HAL_DMA_Abort_IT+0xa2>
 8003396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339a:	e002      	b.n	80033a2 <HAL_DMA_Abort_IT+0xa2>
 800339c:	2310      	movs	r3, #16
 800339e:	e000      	b.n	80033a2 <HAL_DMA_Abort_IT+0xa2>
 80033a0:	2301      	movs	r3, #1
 80033a2:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <HAL_DMA_Abort_IT+0xe8>)
 80033a4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
    } 
  }
  return status;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40020008 	.word	0x40020008
 80033d4:	4002001c 	.word	0x4002001c
 80033d8:	40020030 	.word	0x40020030
 80033dc:	40020044 	.word	0x40020044
 80033e0:	40020058 	.word	0x40020058
 80033e4:	4002006c 	.word	0x4002006c
 80033e8:	40020000 	.word	0x40020000

080033ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2204      	movs	r2, #4
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d04f      	beq.n	80034b4 <HAL_DMA_IRQHandler+0xc8>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d04a      	beq.n	80034b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0204 	bic.w	r2, r2, #4
 800343a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a66      	ldr	r2, [pc, #408]	; (80035dc <HAL_DMA_IRQHandler+0x1f0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d029      	beq.n	800349a <HAL_DMA_IRQHandler+0xae>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a65      	ldr	r2, [pc, #404]	; (80035e0 <HAL_DMA_IRQHandler+0x1f4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_IRQHandler+0xaa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a63      	ldr	r2, [pc, #396]	; (80035e4 <HAL_DMA_IRQHandler+0x1f8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01a      	beq.n	8003490 <HAL_DMA_IRQHandler+0xa4>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a62      	ldr	r2, [pc, #392]	; (80035e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d012      	beq.n	800348a <HAL_DMA_IRQHandler+0x9e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a60      	ldr	r2, [pc, #384]	; (80035ec <HAL_DMA_IRQHandler+0x200>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00a      	beq.n	8003484 <HAL_DMA_IRQHandler+0x98>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5f      	ldr	r2, [pc, #380]	; (80035f0 <HAL_DMA_IRQHandler+0x204>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d102      	bne.n	800347e <HAL_DMA_IRQHandler+0x92>
 8003478:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800347c:	e00e      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 800347e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003482:	e00b      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 8003484:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003488:	e008      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 800348a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800348e:	e005      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 8003490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003494:	e002      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 8003496:	2340      	movs	r3, #64	; 0x40
 8003498:	e000      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 800349a:	2304      	movs	r3, #4
 800349c:	4a55      	ldr	r2, [pc, #340]	; (80035f4 <HAL_DMA_IRQHandler+0x208>)
 800349e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8094 	beq.w	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80034b2:	e08e      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	2202      	movs	r2, #2
 80034ba:	409a      	lsls	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d056      	beq.n	8003572 <HAL_DMA_IRQHandler+0x186>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d051      	beq.n	8003572 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 020a 	bic.w	r2, r2, #10
 80034ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a38      	ldr	r2, [pc, #224]	; (80035dc <HAL_DMA_IRQHandler+0x1f0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d029      	beq.n	8003552 <HAL_DMA_IRQHandler+0x166>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a37      	ldr	r2, [pc, #220]	; (80035e0 <HAL_DMA_IRQHandler+0x1f4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_IRQHandler+0x162>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a35      	ldr	r2, [pc, #212]	; (80035e4 <HAL_DMA_IRQHandler+0x1f8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01a      	beq.n	8003548 <HAL_DMA_IRQHandler+0x15c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d012      	beq.n	8003542 <HAL_DMA_IRQHandler+0x156>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a32      	ldr	r2, [pc, #200]	; (80035ec <HAL_DMA_IRQHandler+0x200>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00a      	beq.n	800353c <HAL_DMA_IRQHandler+0x150>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a31      	ldr	r2, [pc, #196]	; (80035f0 <HAL_DMA_IRQHandler+0x204>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d102      	bne.n	8003536 <HAL_DMA_IRQHandler+0x14a>
 8003530:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003534:	e00e      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353a:	e00b      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 800353c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003540:	e008      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003546:	e005      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800354c:	e002      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 800354e:	2320      	movs	r3, #32
 8003550:	e000      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003552:	2302      	movs	r3, #2
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <HAL_DMA_IRQHandler+0x208>)
 8003556:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d034      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003570:	e02f      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2208      	movs	r2, #8
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x1e8>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 020e 	bic.w	r2, r2, #14
 800359a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
    }
  }
  return;
 80035d2:	bf00      	nop
 80035d4:	bf00      	nop
}
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40020008 	.word	0x40020008
 80035e0:	4002001c 	.word	0x4002001c
 80035e4:	40020030 	.word	0x40020030
 80035e8:	40020044 	.word	0x40020044
 80035ec:	40020058 	.word	0x40020058
 80035f0:	4002006c 	.word	0x4002006c
 80035f4:	40020000 	.word	0x40020000

080035f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f202 	lsl.w	r2, r1, r2
 8003614:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d108      	bne.n	8003638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003636:	e007      	b.n	8003648 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003654:	b480      	push	{r7}
 8003656:	b08b      	sub	sp, #44	; 0x2c
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003666:	e169      	b.n	800393c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003668:	2201      	movs	r2, #1
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	429a      	cmp	r2, r3
 8003682:	f040 8158 	bne.w	8003936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a9a      	ldr	r2, [pc, #616]	; (80038f4 <HAL_GPIO_Init+0x2a0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d05e      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 8003690:	4a98      	ldr	r2, [pc, #608]	; (80038f4 <HAL_GPIO_Init+0x2a0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d875      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 8003696:	4a98      	ldr	r2, [pc, #608]	; (80038f8 <HAL_GPIO_Init+0x2a4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d058      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 800369c:	4a96      	ldr	r2, [pc, #600]	; (80038f8 <HAL_GPIO_Init+0x2a4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d86f      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036a2:	4a96      	ldr	r2, [pc, #600]	; (80038fc <HAL_GPIO_Init+0x2a8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d052      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 80036a8:	4a94      	ldr	r2, [pc, #592]	; (80038fc <HAL_GPIO_Init+0x2a8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d869      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036ae:	4a94      	ldr	r2, [pc, #592]	; (8003900 <HAL_GPIO_Init+0x2ac>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04c      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 80036b4:	4a92      	ldr	r2, [pc, #584]	; (8003900 <HAL_GPIO_Init+0x2ac>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d863      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036ba:	4a92      	ldr	r2, [pc, #584]	; (8003904 <HAL_GPIO_Init+0x2b0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d046      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 80036c0:	4a90      	ldr	r2, [pc, #576]	; (8003904 <HAL_GPIO_Init+0x2b0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d85d      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036c6:	2b12      	cmp	r3, #18
 80036c8:	d82a      	bhi.n	8003720 <HAL_GPIO_Init+0xcc>
 80036ca:	2b12      	cmp	r3, #18
 80036cc:	d859      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <HAL_GPIO_Init+0x80>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	0800374f 	.word	0x0800374f
 80036d8:	08003729 	.word	0x08003729
 80036dc:	0800373b 	.word	0x0800373b
 80036e0:	0800377d 	.word	0x0800377d
 80036e4:	08003783 	.word	0x08003783
 80036e8:	08003783 	.word	0x08003783
 80036ec:	08003783 	.word	0x08003783
 80036f0:	08003783 	.word	0x08003783
 80036f4:	08003783 	.word	0x08003783
 80036f8:	08003783 	.word	0x08003783
 80036fc:	08003783 	.word	0x08003783
 8003700:	08003783 	.word	0x08003783
 8003704:	08003783 	.word	0x08003783
 8003708:	08003783 	.word	0x08003783
 800370c:	08003783 	.word	0x08003783
 8003710:	08003783 	.word	0x08003783
 8003714:	08003783 	.word	0x08003783
 8003718:	08003731 	.word	0x08003731
 800371c:	08003745 	.word	0x08003745
 8003720:	4a79      	ldr	r2, [pc, #484]	; (8003908 <HAL_GPIO_Init+0x2b4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003726:	e02c      	b.n	8003782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	623b      	str	r3, [r7, #32]
          break;
 800372e:	e029      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	3304      	adds	r3, #4
 8003736:	623b      	str	r3, [r7, #32]
          break;
 8003738:	e024      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	3308      	adds	r3, #8
 8003740:	623b      	str	r3, [r7, #32]
          break;
 8003742:	e01f      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	330c      	adds	r3, #12
 800374a:	623b      	str	r3, [r7, #32]
          break;
 800374c:	e01a      	b.n	8003784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003756:	2304      	movs	r3, #4
 8003758:	623b      	str	r3, [r7, #32]
          break;
 800375a:	e013      	b.n	8003784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d105      	bne.n	8003770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003764:	2308      	movs	r3, #8
 8003766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	611a      	str	r2, [r3, #16]
          break;
 800376e:	e009      	b.n	8003784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003770:	2308      	movs	r3, #8
 8003772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	615a      	str	r2, [r3, #20]
          break;
 800377a:	e003      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800377c:	2300      	movs	r3, #0
 800377e:	623b      	str	r3, [r7, #32]
          break;
 8003780:	e000      	b.n	8003784 <HAL_GPIO_Init+0x130>
          break;
 8003782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2bff      	cmp	r3, #255	; 0xff
 8003788:	d801      	bhi.n	800378e <HAL_GPIO_Init+0x13a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	e001      	b.n	8003792 <HAL_GPIO_Init+0x13e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2bff      	cmp	r3, #255	; 0xff
 8003798:	d802      	bhi.n	80037a0 <HAL_GPIO_Init+0x14c>
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	e002      	b.n	80037a6 <HAL_GPIO_Init+0x152>
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	3b08      	subs	r3, #8
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	210f      	movs	r1, #15
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	401a      	ands	r2, r3
 80037b8:	6a39      	ldr	r1, [r7, #32]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80b1 	beq.w	8003936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037d4:	4b4d      	ldr	r3, [pc, #308]	; (800390c <HAL_GPIO_Init+0x2b8>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	4a4c      	ldr	r2, [pc, #304]	; (800390c <HAL_GPIO_Init+0x2b8>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6193      	str	r3, [r2, #24]
 80037e0:	4b4a      	ldr	r3, [pc, #296]	; (800390c <HAL_GPIO_Init+0x2b8>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037ec:	4a48      	ldr	r2, [pc, #288]	; (8003910 <HAL_GPIO_Init+0x2bc>)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	220f      	movs	r2, #15
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a40      	ldr	r2, [pc, #256]	; (8003914 <HAL_GPIO_Init+0x2c0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_GPIO_Init+0x1ec>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <HAL_GPIO_Init+0x2c4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00d      	beq.n	800383c <HAL_GPIO_Init+0x1e8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3e      	ldr	r2, [pc, #248]	; (800391c <HAL_GPIO_Init+0x2c8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <HAL_GPIO_Init+0x1e4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3d      	ldr	r2, [pc, #244]	; (8003920 <HAL_GPIO_Init+0x2cc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_GPIO_Init+0x1e0>
 8003830:	2303      	movs	r3, #3
 8003832:	e006      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 8003834:	2304      	movs	r3, #4
 8003836:	e004      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 8003838:	2302      	movs	r3, #2
 800383a:	e002      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 8003840:	2300      	movs	r3, #0
 8003842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003844:	f002 0203 	and.w	r2, r2, #3
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	4093      	lsls	r3, r2
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003852:	492f      	ldr	r1, [pc, #188]	; (8003910 <HAL_GPIO_Init+0x2bc>)
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d006      	beq.n	800387a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	492c      	ldr	r1, [pc, #176]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800387a:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	43db      	mvns	r3, r3
 8003882:	4928      	ldr	r1, [pc, #160]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 8003884:	4013      	ands	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4922      	ldr	r1, [pc, #136]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
 80038a0:	e006      	b.n	80038b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038a2:	4b20      	ldr	r3, [pc, #128]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	491e      	ldr	r1, [pc, #120]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d006      	beq.n	80038ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	4918      	ldr	r1, [pc, #96]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038ca:	4b16      	ldr	r3, [pc, #88]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	4914      	ldr	r1, [pc, #80]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d021      	beq.n	8003928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <HAL_GPIO_Init+0x2d0>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60cb      	str	r3, [r1, #12]
 80038f0:	e021      	b.n	8003936 <HAL_GPIO_Init+0x2e2>
 80038f2:	bf00      	nop
 80038f4:	10320000 	.word	0x10320000
 80038f8:	10310000 	.word	0x10310000
 80038fc:	10220000 	.word	0x10220000
 8003900:	10210000 	.word	0x10210000
 8003904:	10120000 	.word	0x10120000
 8003908:	10110000 	.word	0x10110000
 800390c:	40021000 	.word	0x40021000
 8003910:	40010000 	.word	0x40010000
 8003914:	40010800 	.word	0x40010800
 8003918:	40010c00 	.word	0x40010c00
 800391c:	40011000 	.word	0x40011000
 8003920:	40011400 	.word	0x40011400
 8003924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_GPIO_Init+0x304>)
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	43db      	mvns	r3, r3
 8003930:	4909      	ldr	r1, [pc, #36]	; (8003958 <HAL_GPIO_Init+0x304>)
 8003932:	4013      	ands	r3, r2
 8003934:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	3301      	adds	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	f47f ae8e 	bne.w	8003668 <HAL_GPIO_Init+0x14>
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	372c      	adds	r7, #44	; 0x2c
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	40010400 	.word	0x40010400

0800395c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
 8003968:	4613      	mov	r3, r2
 800396a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800396c:	787b      	ldrb	r3, [r7, #1]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003972:	887a      	ldrh	r2, [r7, #2]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003978:	e003      	b.n	8003982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800397a:	887b      	ldrh	r3, [r7, #2]
 800397c:	041a      	lsls	r2, r3, #16
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e12b      	b.n	8003bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe f82c 	bl	8001a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	; 0x24
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039f0:	f001 fc9c 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 80039f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4a81      	ldr	r2, [pc, #516]	; (8003c00 <HAL_I2C_Init+0x274>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d807      	bhi.n	8003a10 <HAL_I2C_Init+0x84>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a80      	ldr	r2, [pc, #512]	; (8003c04 <HAL_I2C_Init+0x278>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bf94      	ite	ls
 8003a08:	2301      	movls	r3, #1
 8003a0a:	2300      	movhi	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e006      	b.n	8003a1e <HAL_I2C_Init+0x92>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a7d      	ldr	r2, [pc, #500]	; (8003c08 <HAL_I2C_Init+0x27c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	bf94      	ite	ls
 8003a18:	2301      	movls	r3, #1
 8003a1a:	2300      	movhi	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0e7      	b.n	8003bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a78      	ldr	r2, [pc, #480]	; (8003c0c <HAL_I2C_Init+0x280>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0c9b      	lsrs	r3, r3, #18
 8003a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a6a      	ldr	r2, [pc, #424]	; (8003c00 <HAL_I2C_Init+0x274>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d802      	bhi.n	8003a60 <HAL_I2C_Init+0xd4>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	e009      	b.n	8003a74 <HAL_I2C_Init+0xe8>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	4a69      	ldr	r2, [pc, #420]	; (8003c10 <HAL_I2C_Init+0x284>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	3301      	adds	r3, #1
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	495c      	ldr	r1, [pc, #368]	; (8003c00 <HAL_I2C_Init+0x274>)
 8003a90:	428b      	cmp	r3, r1
 8003a92:	d819      	bhi.n	8003ac8 <HAL_I2C_Init+0x13c>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e59      	subs	r1, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa2:	1c59      	adds	r1, r3, #1
 8003aa4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_I2C_Init+0x138>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1e59      	subs	r1, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac2:	e051      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	e04f      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <HAL_I2C_Init+0x168>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e012      	b.n	8003b1a <HAL_I2C_Init+0x18e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e58      	subs	r0, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	0099      	lsls	r1, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Init+0x196>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e022      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10e      	bne.n	8003b48 <HAL_I2C_Init+0x1bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e58      	subs	r0, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	440b      	add	r3, r1
 8003b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	e00f      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e58      	subs	r0, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	0099      	lsls	r1, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	6809      	ldr	r1, [r1, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6911      	ldr	r1, [r2, #16]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	000186a0 	.word	0x000186a0
 8003c04:	001e847f 	.word	0x001e847f
 8003c08:	003d08ff 	.word	0x003d08ff
 8003c0c:	431bde83 	.word	0x431bde83
 8003c10:	10624dd3 	.word	0x10624dd3

08003c14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	460b      	mov	r3, r1
 8003c22:	817b      	strh	r3, [r7, #10]
 8003c24:	4613      	mov	r3, r2
 8003c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c28:	f7ff f93a 	bl	8002ea0 <HAL_GetTick>
 8003c2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	f040 80e0 	bne.w	8003dfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2319      	movs	r3, #25
 8003c42:	2201      	movs	r2, #1
 8003c44:	4970      	ldr	r1, [pc, #448]	; (8003e08 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fdc0 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
 8003c54:	e0d3      	b.n	8003dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_I2C_Master_Transmit+0x50>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e0cc      	b.n	8003dfe <HAL_I2C_Master_Transmit+0x1ea>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d007      	beq.n	8003c8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0201 	orr.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2221      	movs	r2, #33	; 0x21
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	893a      	ldrh	r2, [r7, #8]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a50      	ldr	r2, [pc, #320]	; (8003e0c <HAL_I2C_Master_Transmit+0x1f8>)
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ccc:	8979      	ldrh	r1, [r7, #10]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	6a3a      	ldr	r2, [r7, #32]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fc2a 	bl	800452c <I2C_MasterRequestWrite>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e08d      	b.n	8003dfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003cf8:	e066      	b.n	8003dc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	6a39      	ldr	r1, [r7, #32]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fe3a 	bl	8004978 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d107      	bne.n	8003d22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e06b      	b.n	8003dfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	781a      	ldrb	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d11b      	bne.n	8003d9c <HAL_I2C_Master_Transmit+0x188>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d017      	beq.n	8003d9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	6a39      	ldr	r1, [r7, #32]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fe2a 	bl	80049fa <I2C_WaitOnBTFFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00d      	beq.n	8003dc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d107      	bne.n	8003dc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e01a      	b.n	8003dfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d194      	bne.n	8003cfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	00100002 	.word	0x00100002
 8003e0c:	ffff0000 	.word	0xffff0000

08003e10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08c      	sub	sp, #48	; 0x30
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	817b      	strh	r3, [r7, #10]
 8003e20:	4613      	mov	r3, r2
 8003e22:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e28:	f7ff f83a 	bl	8002ea0 <HAL_GetTick>
 8003e2c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	f040 823f 	bne.w	80042ba <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2319      	movs	r3, #25
 8003e42:	2201      	movs	r2, #1
 8003e44:	497f      	ldr	r1, [pc, #508]	; (8004044 <HAL_I2C_Master_Receive+0x234>)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fcc0 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	e232      	b.n	80042bc <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_I2C_Master_Receive+0x54>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e22b      	b.n	80042bc <HAL_I2C_Master_Receive+0x4ac>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d007      	beq.n	8003e8a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0201 	orr.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2222      	movs	r2, #34	; 0x22
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	893a      	ldrh	r2, [r7, #8]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a5f      	ldr	r2, [pc, #380]	; (8004048 <HAL_I2C_Master_Receive+0x238>)
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ecc:	8979      	ldrh	r1, [r7, #10]
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fbac 	bl	8004630 <I2C_MasterRequestRead>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e1ec      	b.n	80042bc <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d113      	bne.n	8003f12 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e1c0      	b.n	8004294 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d11e      	bne.n	8003f58 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f2a:	b672      	cpsid	i
}
 8003f2c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f54:	b662      	cpsie	i
}
 8003f56:	e035      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d11e      	bne.n	8003f9e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f70:	b672      	cpsid	i
}
 8003f72:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f9a:	b662      	cpsie	i
}
 8003f9c:	e012      	b.n	8003fc4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003fc4:	e166      	b.n	8004294 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	f200 811f 	bhi.w	800420e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d123      	bne.n	8004020 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fd4d 	bl	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e167      	b.n	80042bc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800401e:	e139      	b.n	8004294 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	2b02      	cmp	r3, #2
 8004026:	d152      	bne.n	80040ce <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	2200      	movs	r2, #0
 8004030:	4906      	ldr	r1, [pc, #24]	; (800404c <HAL_I2C_Master_Receive+0x23c>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fbca 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e13c      	b.n	80042bc <HAL_I2C_Master_Receive+0x4ac>
 8004042:	bf00      	nop
 8004044:	00100002 	.word	0x00100002
 8004048:	ffff0000 	.word	0xffff0000
 800404c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004050:	b672      	cpsid	i
}
 8004052:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004096:	b662      	cpsie	i
}
 8004098:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040cc:	e0e2      	b.n	8004294 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	2200      	movs	r2, #0
 80040d6:	497b      	ldr	r1, [pc, #492]	; (80042c4 <HAL_I2C_Master_Receive+0x4b4>)
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fb77 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0e9      	b.n	80042bc <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040f8:	b672      	cpsid	i
}
 80040fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800412e:	4b66      	ldr	r3, [pc, #408]	; (80042c8 <HAL_I2C_Master_Receive+0x4b8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	4a65      	ldr	r2, [pc, #404]	; (80042cc <HAL_I2C_Master_Receive+0x4bc>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	0a1a      	lsrs	r2, r3, #8
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	00da      	lsls	r2, r3, #3
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	3b01      	subs	r3, #1
 800414c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d118      	bne.n	8004186 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004176:	b662      	cpsie	i
}
 8004178:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e09a      	b.n	80042bc <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b04      	cmp	r3, #4
 8004192:	d1d9      	bne.n	8004148 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041d6:	b662      	cpsie	i
}
 80041d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800420c:	e042      	b.n	8004294 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fc32 	bl	8004a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e04c      	b.n	80042bc <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b04      	cmp	r3, #4
 8004260:	d118      	bne.n	8004294 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f ae94 	bne.w	8003fc6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e000      	b.n	80042bc <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80042ba:	2302      	movs	r3, #2
  }
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3728      	adds	r7, #40	; 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	00010004 	.word	0x00010004
 80042c8:	20000010 	.word	0x20000010
 80042cc:	14f8b589 	.word	0x14f8b589

080042d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	; 0x28
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	460b      	mov	r3, r1
 80042de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80042e0:	f7fe fdde 	bl	8002ea0 <HAL_GetTick>
 80042e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	f040 8111 	bne.w	800451a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2319      	movs	r3, #25
 80042fe:	2201      	movs	r2, #1
 8004300:	4988      	ldr	r1, [pc, #544]	; (8004524 <HAL_I2C_IsDeviceReady+0x254>)
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fa62 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800430e:	2302      	movs	r3, #2
 8004310:	e104      	b.n	800451c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_I2C_IsDeviceReady+0x50>
 800431c:	2302      	movs	r3, #2
 800431e:	e0fd      	b.n	800451c <HAL_I2C_IsDeviceReady+0x24c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b01      	cmp	r3, #1
 8004334:	d007      	beq.n	8004346 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004354:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2224      	movs	r2, #36	; 0x24
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a70      	ldr	r2, [pc, #448]	; (8004528 <HAL_I2C_IsDeviceReady+0x258>)
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004378:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fa20 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a0:	d103      	bne.n	80043aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e0b6      	b.n	800451c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ae:	897b      	ldrh	r3, [r7, #10]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80043be:	f7fe fd6f 	bl	8002ea0 <HAL_GetTick>
 80043c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	bf0c      	ite	eq
 80043d2:	2301      	moveq	r3, #1
 80043d4:	2300      	movne	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043f2:	e025      	b.n	8004440 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043f4:	f7fe fd54 	bl	8002ea0 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d302      	bcc.n	800440a <HAL_I2C_IsDeviceReady+0x13a>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	22a0      	movs	r2, #160	; 0xa0
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2300      	movne	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2ba0      	cmp	r3, #160	; 0xa0
 800444a:	d005      	beq.n	8004458 <HAL_I2C_IsDeviceReady+0x188>
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <HAL_I2C_IsDeviceReady+0x188>
 8004452:	7dbb      	ldrb	r3, [r7, #22]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0cd      	beq.n	80043f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d129      	bne.n	80044c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2319      	movs	r3, #25
 800449a:	2201      	movs	r2, #1
 800449c:	4921      	ldr	r1, [pc, #132]	; (8004524 <HAL_I2C_IsDeviceReady+0x254>)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f994 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e036      	b.n	800451c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	e02c      	b.n	800451c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2319      	movs	r3, #25
 80044e2:	2201      	movs	r2, #1
 80044e4:	490f      	ldr	r1, [pc, #60]	; (8004524 <HAL_I2C_IsDeviceReady+0x254>)
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f970 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e012      	b.n	800451c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	3301      	adds	r3, #1
 80044fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	f4ff af32 	bcc.w	800436a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	00100002 	.word	0x00100002
 8004528:	ffff0000 	.word	0xffff0000

0800452c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	460b      	mov	r3, r1
 800453a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b08      	cmp	r3, #8
 8004546:	d006      	beq.n	8004556 <I2C_MasterRequestWrite+0x2a>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d003      	beq.n	8004556 <I2C_MasterRequestWrite+0x2a>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004554:	d108      	bne.n	8004568 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e00b      	b.n	8004580 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	2b12      	cmp	r3, #18
 800456e:	d107      	bne.n	8004580 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800457e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f91d 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a6:	d103      	bne.n	80045b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e035      	b.n	8004620 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045bc:	d108      	bne.n	80045d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045cc:	611a      	str	r2, [r3, #16]
 80045ce:	e01b      	b.n	8004608 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045d0:	897b      	ldrh	r3, [r7, #10]
 80045d2:	11db      	asrs	r3, r3, #7
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f003 0306 	and.w	r3, r3, #6
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f063 030f 	orn	r3, r3, #15
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	490e      	ldr	r1, [pc, #56]	; (8004628 <I2C_MasterRequestWrite+0xfc>)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f943 	bl	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e010      	b.n	8004620 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045fe:	897b      	ldrh	r3, [r7, #10]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4907      	ldr	r1, [pc, #28]	; (800462c <I2C_MasterRequestWrite+0x100>)
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f933 	bl	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	00010008 	.word	0x00010008
 800462c:	00010002 	.word	0x00010002

08004630 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	460b      	mov	r3, r1
 800463e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004654:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d006      	beq.n	800466a <I2C_MasterRequestRead+0x3a>
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d003      	beq.n	800466a <I2C_MasterRequestRead+0x3a>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004668:	d108      	bne.n	800467c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e00b      	b.n	8004694 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	2b11      	cmp	r3, #17
 8004682:	d107      	bne.n	8004694 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004692:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f893 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ba:	d103      	bne.n	80046c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e079      	b.n	80047bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d0:	d108      	bne.n	80046e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	611a      	str	r2, [r3, #16]
 80046e2:	e05f      	b.n	80047a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046e4:	897b      	ldrh	r3, [r7, #10]
 80046e6:	11db      	asrs	r3, r3, #7
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0306 	and.w	r3, r3, #6
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f063 030f 	orn	r3, r3, #15
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4930      	ldr	r1, [pc, #192]	; (80047c4 <I2C_MasterRequestRead+0x194>)
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f8b9 	bl	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e054      	b.n	80047bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004712:	897b      	ldrh	r3, [r7, #10]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	4929      	ldr	r1, [pc, #164]	; (80047c8 <I2C_MasterRequestRead+0x198>)
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f8a9 	bl	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e044      	b.n	80047bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004756:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f831 	bl	80047cc <I2C_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477e:	d103      	bne.n	8004788 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e017      	b.n	80047bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800478c:	897b      	ldrh	r3, [r7, #10]
 800478e:	11db      	asrs	r3, r3, #7
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0306 	and.w	r3, r3, #6
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f063 030e 	orn	r3, r3, #14
 800479c:	b2da      	uxtb	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4907      	ldr	r1, [pc, #28]	; (80047c8 <I2C_MasterRequestRead+0x198>)
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f865 	bl	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	00010008 	.word	0x00010008
 80047c8:	00010002 	.word	0x00010002

080047cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047dc:	e025      	b.n	800482a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d021      	beq.n	800482a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e6:	f7fe fb5b 	bl	8002ea0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d116      	bne.n	800482a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0220 	orr.w	r2, r3, #32
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e023      	b.n	8004872 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d10d      	bne.n	8004850 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	43da      	mvns	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	4013      	ands	r3, r2
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf0c      	ite	eq
 8004846:	2301      	moveq	r3, #1
 8004848:	2300      	movne	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	e00c      	b.n	800486a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	429a      	cmp	r2, r3
 800486e:	d0b6      	beq.n	80047de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004888:	e051      	b.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004898:	d123      	bne.n	80048e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f043 0204 	orr.w	r2, r3, #4
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e046      	b.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d021      	beq.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ea:	f7fe fad9 	bl	8002ea0 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d116      	bne.n	800492e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e020      	b.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10c      	bne.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	43da      	mvns	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	e00b      	b.n	800496a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	43da      	mvns	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4013      	ands	r3, r2
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
 8004966:	2300      	moveq	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d18d      	bne.n	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004984:	e02d      	b.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f8ce 	bl	8004b28 <I2C_IsAcknowledgeFailed>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e02d      	b.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d021      	beq.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe fa7f 	bl	8002ea0 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d116      	bne.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e007      	b.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b80      	cmp	r3, #128	; 0x80
 80049ee:	d1ca      	bne.n	8004986 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a06:	e02d      	b.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f88d 	bl	8004b28 <I2C_IsAcknowledgeFailed>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e02d      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d021      	beq.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a20:	f7fe fa3e 	bl	8002ea0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d302      	bcc.n	8004a36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e007      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d1ca      	bne.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a88:	e042      	b.n	8004b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d119      	bne.n	8004acc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0210 	mvn.w	r2, #16
 8004aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e029      	b.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004acc:	f7fe f9e8 	bl	8002ea0 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d116      	bne.n	8004b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e007      	b.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d1b5      	bne.n	8004a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3e:	d11b      	bne.n	8004b78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f043 0204 	orr.w	r2, r3, #4
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr

08004b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e26c      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8087 	beq.w	8004cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba4:	4b92      	ldr	r3, [pc, #584]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 030c 	and.w	r3, r3, #12
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d00c      	beq.n	8004bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bb0:	4b8f      	ldr	r3, [pc, #572]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 030c 	and.w	r3, r3, #12
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d112      	bne.n	8004be2 <HAL_RCC_OscConfig+0x5e>
 8004bbc:	4b8c      	ldr	r3, [pc, #560]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc8:	d10b      	bne.n	8004be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bca:	4b89      	ldr	r3, [pc, #548]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d06c      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x12c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d168      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e246      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bea:	d106      	bne.n	8004bfa <HAL_RCC_OscConfig+0x76>
 8004bec:	4b80      	ldr	r3, [pc, #512]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a7f      	ldr	r2, [pc, #508]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	e02e      	b.n	8004c58 <HAL_RCC_OscConfig+0xd4>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0x98>
 8004c02:	4b7b      	ldr	r3, [pc, #492]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a7a      	ldr	r2, [pc, #488]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b78      	ldr	r3, [pc, #480]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a77      	ldr	r2, [pc, #476]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e01d      	b.n	8004c58 <HAL_RCC_OscConfig+0xd4>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0xbc>
 8004c26:	4b72      	ldr	r3, [pc, #456]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a71      	ldr	r2, [pc, #452]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	4b6f      	ldr	r3, [pc, #444]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6e      	ldr	r2, [pc, #440]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e00b      	b.n	8004c58 <HAL_RCC_OscConfig+0xd4>
 8004c40:	4b6b      	ldr	r3, [pc, #428]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6a      	ldr	r2, [pc, #424]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4a:	6013      	str	r3, [r2, #0]
 8004c4c:	4b68      	ldr	r3, [pc, #416]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a67      	ldr	r2, [pc, #412]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d013      	beq.n	8004c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c60:	f7fe f91e 	bl	8002ea0 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c68:	f7fe f91a 	bl	8002ea0 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b64      	cmp	r3, #100	; 0x64
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e1fa      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b5d      	ldr	r3, [pc, #372]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0xe4>
 8004c86:	e014      	b.n	8004cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fe f90a 	bl	8002ea0 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c90:	f7fe f906 	bl	8002ea0 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b64      	cmp	r3, #100	; 0x64
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e1e6      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca2:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x10c>
 8004cae:	e000      	b.n	8004cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d063      	beq.n	8004d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cbe:	4b4c      	ldr	r3, [pc, #304]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00b      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004cca:	4b49      	ldr	r3, [pc, #292]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f003 030c 	and.w	r3, r3, #12
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d11c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x18c>
 8004cd6:	4b46      	ldr	r3, [pc, #280]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d116      	bne.n	8004d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce2:	4b43      	ldr	r3, [pc, #268]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d005      	beq.n	8004cfa <HAL_RCC_OscConfig+0x176>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d001      	beq.n	8004cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e1ba      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfa:	4b3d      	ldr	r3, [pc, #244]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4939      	ldr	r1, [pc, #228]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d0e:	e03a      	b.n	8004d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d020      	beq.n	8004d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d18:	4b36      	ldr	r3, [pc, #216]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1e:	f7fe f8bf 	bl	8002ea0 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d26:	f7fe f8bb 	bl	8002ea0 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e19b      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d38:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d44:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	4927      	ldr	r1, [pc, #156]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]
 8004d58:	e015      	b.n	8004d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5a:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <HAL_RCC_OscConfig+0x270>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fe f89e 	bl	8002ea0 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d68:	f7fe f89a 	bl	8002ea0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e17a      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d03a      	beq.n	8004e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d019      	beq.n	8004dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9a:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da0:	f7fe f87e 	bl	8002ea0 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da8:	f7fe f87a 	bl	8002ea0 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e15a      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	f000 fad8 	bl	800537c <RCC_Delay>
 8004dcc:	e01c      	b.n	8004e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dce:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd4:	f7fe f864 	bl	8002ea0 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dda:	e00f      	b.n	8004dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ddc:	f7fe f860 	bl	8002ea0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d908      	bls.n	8004dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e140      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000
 8004df4:	42420000 	.word	0x42420000
 8004df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dfc:	4b9e      	ldr	r3, [pc, #632]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e9      	bne.n	8004ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80a6 	beq.w	8004f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1a:	4b97      	ldr	r3, [pc, #604]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10d      	bne.n	8004e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e26:	4b94      	ldr	r3, [pc, #592]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	4a93      	ldr	r2, [pc, #588]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	61d3      	str	r3, [r2, #28]
 8004e32:	4b91      	ldr	r3, [pc, #580]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e42:	4b8e      	ldr	r3, [pc, #568]	; (800507c <HAL_RCC_OscConfig+0x4f8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d118      	bne.n	8004e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e4e:	4b8b      	ldr	r3, [pc, #556]	; (800507c <HAL_RCC_OscConfig+0x4f8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a8a      	ldr	r2, [pc, #552]	; (800507c <HAL_RCC_OscConfig+0x4f8>)
 8004e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5a:	f7fe f821 	bl	8002ea0 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e62:	f7fe f81d 	bl	8002ea0 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b64      	cmp	r3, #100	; 0x64
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0fd      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e74:	4b81      	ldr	r3, [pc, #516]	; (800507c <HAL_RCC_OscConfig+0x4f8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d106      	bne.n	8004e96 <HAL_RCC_OscConfig+0x312>
 8004e88:	4b7b      	ldr	r3, [pc, #492]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4a7a      	ldr	r2, [pc, #488]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6213      	str	r3, [r2, #32]
 8004e94:	e02d      	b.n	8004ef2 <HAL_RCC_OscConfig+0x36e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x334>
 8004e9e:	4b76      	ldr	r3, [pc, #472]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	4a75      	ldr	r2, [pc, #468]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	6213      	str	r3, [r2, #32]
 8004eaa:	4b73      	ldr	r3, [pc, #460]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	4a72      	ldr	r2, [pc, #456]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004eb0:	f023 0304 	bic.w	r3, r3, #4
 8004eb4:	6213      	str	r3, [r2, #32]
 8004eb6:	e01c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x36e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	d10c      	bne.n	8004eda <HAL_RCC_OscConfig+0x356>
 8004ec0:	4b6d      	ldr	r3, [pc, #436]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	4a6c      	ldr	r2, [pc, #432]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004ec6:	f043 0304 	orr.w	r3, r3, #4
 8004eca:	6213      	str	r3, [r2, #32]
 8004ecc:	4b6a      	ldr	r3, [pc, #424]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	4a69      	ldr	r2, [pc, #420]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	6213      	str	r3, [r2, #32]
 8004ed8:	e00b      	b.n	8004ef2 <HAL_RCC_OscConfig+0x36e>
 8004eda:	4b67      	ldr	r3, [pc, #412]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	4a66      	ldr	r2, [pc, #408]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	6213      	str	r3, [r2, #32]
 8004ee6:	4b64      	ldr	r3, [pc, #400]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	4a63      	ldr	r2, [pc, #396]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d015      	beq.n	8004f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efa:	f7fd ffd1 	bl	8002ea0 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f00:	e00a      	b.n	8004f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fd ffcd 	bl	8002ea0 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e0ab      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f18:	4b57      	ldr	r3, [pc, #348]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ee      	beq.n	8004f02 <HAL_RCC_OscConfig+0x37e>
 8004f24:	e014      	b.n	8004f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f26:	f7fd ffbb 	bl	8002ea0 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f2c:	e00a      	b.n	8004f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7fd ffb7 	bl	8002ea0 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e095      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f44:	4b4c      	ldr	r3, [pc, #304]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ee      	bne.n	8004f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d105      	bne.n	8004f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f56:	4b48      	ldr	r3, [pc, #288]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	4a47      	ldr	r2, [pc, #284]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8081 	beq.w	800506e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f6c:	4b42      	ldr	r3, [pc, #264]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d061      	beq.n	800503c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d146      	bne.n	800500e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f80:	4b3f      	ldr	r3, [pc, #252]	; (8005080 <HAL_RCC_OscConfig+0x4fc>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f86:	f7fd ff8b 	bl	8002ea0 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8e:	f7fd ff87 	bl	8002ea0 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e067      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa0:	4b35      	ldr	r3, [pc, #212]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f0      	bne.n	8004f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb4:	d108      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004fb6:	4b30      	ldr	r3, [pc, #192]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	492d      	ldr	r1, [pc, #180]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fc8:	4b2b      	ldr	r3, [pc, #172]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a19      	ldr	r1, [r3, #32]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	4927      	ldr	r1, [pc, #156]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe0:	4b27      	ldr	r3, [pc, #156]	; (8005080 <HAL_RCC_OscConfig+0x4fc>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe6:	f7fd ff5b 	bl	8002ea0 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fee:	f7fd ff57 	bl	8002ea0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e037      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005000:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCC_OscConfig+0x46a>
 800500c:	e02f      	b.n	800506e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500e:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <HAL_RCC_OscConfig+0x4fc>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7fd ff44 	bl	8002ea0 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501c:	f7fd ff40 	bl	8002ea0 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e020      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502e:	4b12      	ldr	r3, [pc, #72]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x498>
 800503a:	e018      	b.n	800506e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e013      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RCC_OscConfig+0x4f4>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	429a      	cmp	r2, r3
 800505a:	d106      	bne.n	800506a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d001      	beq.n	800506e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40021000 	.word	0x40021000
 800507c:	40007000 	.word	0x40007000
 8005080:	42420060 	.word	0x42420060

08005084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0d0      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005098:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d910      	bls.n	80050c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b67      	ldr	r3, [pc, #412]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 0207 	bic.w	r2, r3, #7
 80050ae:	4965      	ldr	r1, [pc, #404]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b63      	ldr	r3, [pc, #396]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0b8      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d020      	beq.n	8005116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e0:	4b59      	ldr	r3, [pc, #356]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a58      	ldr	r2, [pc, #352]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f8:	4b53      	ldr	r3, [pc, #332]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a52      	ldr	r2, [pc, #328]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80050fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005104:	4b50      	ldr	r3, [pc, #320]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	494d      	ldr	r1, [pc, #308]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005112:	4313      	orrs	r3, r2
 8005114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d040      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d107      	bne.n	800513a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512a:	4b47      	ldr	r3, [pc, #284]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d115      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07f      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d107      	bne.n	8005152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005142:	4b41      	ldr	r3, [pc, #260]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e073      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005152:	4b3d      	ldr	r3, [pc, #244]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e06b      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005162:	4b39      	ldr	r3, [pc, #228]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f023 0203 	bic.w	r2, r3, #3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4936      	ldr	r1, [pc, #216]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005174:	f7fd fe94 	bl	8002ea0 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517a:	e00a      	b.n	8005192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517c:	f7fd fe90 	bl	8002ea0 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	; 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e053      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	4b2d      	ldr	r3, [pc, #180]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 020c 	and.w	r2, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d1eb      	bne.n	800517c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a4:	4b27      	ldr	r3, [pc, #156]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d210      	bcs.n	80051d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 0207 	bic.w	r2, r3, #7
 80051ba:	4922      	ldr	r1, [pc, #136]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b20      	ldr	r3, [pc, #128]	; (8005244 <HAL_RCC_ClockConfig+0x1c0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e032      	b.n	800523a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4916      	ldr	r1, [pc, #88]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	490e      	ldr	r1, [pc, #56]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005212:	f000 f821 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8005216:	4602      	mov	r2, r0
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	490a      	ldr	r1, [pc, #40]	; (800524c <HAL_RCC_ClockConfig+0x1c8>)
 8005224:	5ccb      	ldrb	r3, [r1, r3]
 8005226:	fa22 f303 	lsr.w	r3, r2, r3
 800522a:	4a09      	ldr	r2, [pc, #36]	; (8005250 <HAL_RCC_ClockConfig+0x1cc>)
 800522c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800522e:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_RCC_ClockConfig+0x1d0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd fdf2 	bl	8002e1c <HAL_InitTick>

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40022000 	.word	0x40022000
 8005248:	40021000 	.word	0x40021000
 800524c:	0800ab48 	.word	0x0800ab48
 8005250:	20000010 	.word	0x20000010
 8005254:	20000024 	.word	0x20000024

08005258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	b490      	push	{r4, r7}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800525e:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005260:	1d3c      	adds	r4, r7, #4
 8005262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005268:	f240 2301 	movw	r3, #513	; 0x201
 800526c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005282:	4b22      	ldr	r3, [pc, #136]	; (800530c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b04      	cmp	r3, #4
 8005290:	d002      	beq.n	8005298 <HAL_RCC_GetSysClockFreq+0x40>
 8005292:	2b08      	cmp	r3, #8
 8005294:	d003      	beq.n	800529e <HAL_RCC_GetSysClockFreq+0x46>
 8005296:	e02d      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800529a:	623b      	str	r3, [r7, #32]
      break;
 800529c:	e02d      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	0c9b      	lsrs	r3, r3, #18
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80052aa:	4413      	add	r3, r2
 80052ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80052b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052bc:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_RCC_GetSysClockFreq+0xb4>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	0c5b      	lsrs	r3, r3, #17
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80052ca:	4413      	add	r3, r2
 80052cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80052d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	4a0e      	ldr	r2, [pc, #56]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052d6:	fb02 f203 	mul.w	r2, r2, r3
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
 80052e2:	e004      	b.n	80052ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4a0b      	ldr	r2, [pc, #44]	; (8005314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052e8:	fb02 f303 	mul.w	r3, r2, r3
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	623b      	str	r3, [r7, #32]
      break;
 80052f2:	e002      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052f6:	623b      	str	r3, [r7, #32]
      break;
 80052f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052fa:	6a3b      	ldr	r3, [r7, #32]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3728      	adds	r7, #40	; 0x28
 8005300:	46bd      	mov	sp, r7
 8005302:	bc90      	pop	{r4, r7}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	0800ab38 	.word	0x0800ab38
 800530c:	40021000 	.word	0x40021000
 8005310:	007a1200 	.word	0x007a1200
 8005314:	003d0900 	.word	0x003d0900

08005318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800531c:	4b02      	ldr	r3, [pc, #8]	; (8005328 <HAL_RCC_GetHCLKFreq+0x10>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr
 8005328:	20000010 	.word	0x20000010

0800532c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005330:	f7ff fff2 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	; (8005350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021000 	.word	0x40021000
 8005350:	0800ab58 	.word	0x0800ab58

08005354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005358:	f7ff ffde 	bl	8005318 <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	0adb      	lsrs	r3, r3, #11
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	; (8005378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	0800ab58 	.word	0x0800ab58

0800537c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <RCC_Delay+0x34>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <RCC_Delay+0x38>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0a5b      	lsrs	r3, r3, #9
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005398:	bf00      	nop
  }
  while (Delay --);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1e5a      	subs	r2, r3, #1
 800539e:	60fa      	str	r2, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f9      	bne.n	8005398 <RCC_Delay+0x1c>
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr
 80053b0:	20000010 	.word	0x20000010
 80053b4:	10624dd3 	.word	0x10624dd3

080053b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e041      	b.n	800544e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fd fb14 	bl	8002a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3304      	adds	r3, #4
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f000 fa70 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e03a      	b.n	80054e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0201 	orr.w	r2, r2, #1
 8005486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <HAL_TIM_Base_Start_IT+0x98>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x58>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549a:	d009      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x58>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x58>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d111      	bne.n	80054d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d010      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0201 	orr.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	e007      	b.n	80054e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0201 	orr.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800

080054fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b02      	cmp	r3, #2
 8005510:	d122      	bne.n	8005558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b02      	cmp	r3, #2
 800551e:	d11b      	bne.n	8005558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0202 	mvn.w	r2, #2
 8005528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f9b1 	bl	80058a6 <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9a4 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f9b3 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b04      	cmp	r3, #4
 8005564:	d122      	bne.n	80055ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b04      	cmp	r3, #4
 8005572:	d11b      	bne.n	80055ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0204 	mvn.w	r2, #4
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f987 	bl	80058a6 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f97a 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f989 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d122      	bne.n	8005600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d11b      	bne.n	8005600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0208 	mvn.w	r2, #8
 80055d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2204      	movs	r2, #4
 80055d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f95d 	bl	80058a6 <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f950 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f95f 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b10      	cmp	r3, #16
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b10      	cmp	r3, #16
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0210 	mvn.w	r2, #16
 8005624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2208      	movs	r2, #8
 800562a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f933 	bl	80058a6 <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f926 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f935 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b01      	cmp	r3, #1
 8005660:	d10e      	bne.n	8005680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0201 	mvn.w	r2, #1
 8005678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fb fd68 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568a:	2b80      	cmp	r3, #128	; 0x80
 800568c:	d10e      	bne.n	80056ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005698:	2b80      	cmp	r3, #128	; 0x80
 800569a:	d107      	bne.n	80056ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fa77 	bl	8005b9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d10e      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d107      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f8f9 	bl	80058ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d10e      	bne.n	8005704 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0220 	mvn.w	r2, #32
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fa42 	bl	8005b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005704:	bf00      	nop
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIM_ConfigClockSource+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e0b3      	b.n	800588c <HAL_TIM_ConfigClockSource+0x180>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005742:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800575c:	d03e      	beq.n	80057dc <HAL_TIM_ConfigClockSource+0xd0>
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005762:	f200 8087 	bhi.w	8005874 <HAL_TIM_ConfigClockSource+0x168>
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576a:	f000 8085 	beq.w	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	d87f      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 8005774:	2b70      	cmp	r3, #112	; 0x70
 8005776:	d01a      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0xa2>
 8005778:	2b70      	cmp	r3, #112	; 0x70
 800577a:	d87b      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 800577c:	2b60      	cmp	r3, #96	; 0x60
 800577e:	d050      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x116>
 8005780:	2b60      	cmp	r3, #96	; 0x60
 8005782:	d877      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 8005784:	2b50      	cmp	r3, #80	; 0x50
 8005786:	d03c      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0xf6>
 8005788:	2b50      	cmp	r3, #80	; 0x50
 800578a:	d873      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d058      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x136>
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d86f      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 8005794:	2b30      	cmp	r3, #48	; 0x30
 8005796:	d064      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x156>
 8005798:	2b30      	cmp	r3, #48	; 0x30
 800579a:	d86b      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 800579c:	2b20      	cmp	r3, #32
 800579e:	d060      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x156>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d867      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d05c      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x156>
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d05a      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057ac:	e062      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6899      	ldr	r1, [r3, #8]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f000 f966 	bl	8005a8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	609a      	str	r2, [r3, #8]
      break;
 80057da:	e04e      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6899      	ldr	r1, [r3, #8]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f000 f94f 	bl	8005a8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057fe:	609a      	str	r2, [r3, #8]
      break;
 8005800:	e03b      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	461a      	mov	r2, r3
 8005810:	f000 f8c6 	bl	80059a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2150      	movs	r1, #80	; 0x50
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f91d 	bl	8005a5a <TIM_ITRx_SetConfig>
      break;
 8005820:	e02b      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	461a      	mov	r2, r3
 8005830:	f000 f8e4 	bl	80059fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2160      	movs	r1, #96	; 0x60
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f90d 	bl	8005a5a <TIM_ITRx_SetConfig>
      break;
 8005840:	e01b      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	461a      	mov	r2, r3
 8005850:	f000 f8a6 	bl	80059a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2140      	movs	r1, #64	; 0x40
 800585a:	4618      	mov	r0, r3
 800585c:	f000 f8fd 	bl	8005a5a <TIM_ITRx_SetConfig>
      break;
 8005860:	e00b      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4619      	mov	r1, r3
 800586c:	4610      	mov	r0, r2
 800586e:	f000 f8f4 	bl	8005a5a <TIM_ITRx_SetConfig>
        break;
 8005872:	e002      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005874:	bf00      	nop
 8005876:	e000      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005878:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bc80      	pop	{r7}
 80058c8:	4770      	bx	lr

080058ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr

080058dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a29      	ldr	r2, [pc, #164]	; (8005994 <TIM_Base_SetConfig+0xb8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00b      	beq.n	800590c <TIM_Base_SetConfig+0x30>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d007      	beq.n	800590c <TIM_Base_SetConfig+0x30>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a26      	ldr	r2, [pc, #152]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_Base_SetConfig+0x30>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a25      	ldr	r2, [pc, #148]	; (800599c <TIM_Base_SetConfig+0xc0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d108      	bne.n	800591e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <TIM_Base_SetConfig+0xb8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_Base_SetConfig+0x62>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592c:	d007      	beq.n	800593e <TIM_Base_SetConfig+0x62>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a19      	ldr	r2, [pc, #100]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_Base_SetConfig+0x62>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a18      	ldr	r2, [pc, #96]	; (800599c <TIM_Base_SetConfig+0xc0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a07      	ldr	r2, [pc, #28]	; (8005994 <TIM_Base_SetConfig+0xb8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d103      	bne.n	8005984 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	615a      	str	r2, [r3, #20]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800

080059a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 030a 	bic.w	r3, r3, #10
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f023 0210 	bic.w	r2, r3, #16
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	031b      	lsls	r3, r3, #12
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f043 0307 	orr.w	r3, r3, #7
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	609a      	str	r2, [r3, #8]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b087      	sub	sp, #28
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	021a      	lsls	r2, r3, #8
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	609a      	str	r2, [r3, #8]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e046      	b.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a16      	ldr	r2, [pc, #88]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00e      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b30:	d009      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a12      	ldr	r2, [pc, #72]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a10      	ldr	r2, [pc, #64]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d10c      	bne.n	8005b60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800

08005b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr

08005b9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e03f      	b.n	8005c3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fd f87c 	bl	8002cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2224      	movs	r2, #36	; 0x24
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fd77 	bl	80066e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b08a      	sub	sp, #40	; 0x28
 8005c4a:	af02      	add	r7, sp, #8
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	4613      	mov	r3, r2
 8005c54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d17c      	bne.n	8005d60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <HAL_UART_Transmit+0x2c>
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e075      	b.n	8005d62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_UART_Transmit+0x3e>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e06e      	b.n	8005d62 <HAL_UART_Transmit+0x11c>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2221      	movs	r2, #33	; 0x21
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c9a:	f7fd f901 	bl	8002ea0 <HAL_GetTick>
 8005c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	88fa      	ldrh	r2, [r7, #6]
 8005caa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb4:	d108      	bne.n	8005cc8 <HAL_UART_Transmit+0x82>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d104      	bne.n	8005cc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	e003      	b.n	8005cd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005cd8:	e02a      	b.n	8005d30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2180      	movs	r1, #128	; 0x80
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fae8 	bl	80062ba <UART_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e036      	b.n	8005d62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	e007      	b.n	8005d22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1cf      	bne.n	8005cda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2200      	movs	r2, #0
 8005d42:	2140      	movs	r1, #64	; 0x40
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fab8 	bl	80062ba <UART_WaitOnFlagUntilTimeout>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e006      	b.n	8005d62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e000      	b.n	8005d62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
  }
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	4613      	mov	r3, r2
 8005d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d11d      	bne.n	8005dc0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <HAL_UART_Receive_DMA+0x26>
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e016      	b.n	8005dc2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <HAL_UART_Receive_DMA+0x38>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e00f      	b.n	8005dc2 <HAL_UART_Receive_DMA+0x58>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005db0:	88fb      	ldrh	r3, [r7, #6]
 8005db2:	461a      	mov	r2, r3
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 faca 	bl	8006350 <UART_Start_Receive_DMA>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	e000      	b.n	8005dc2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005dc0:	2302      	movs	r3, #2
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10d      	bne.n	8005e1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <HAL_UART_IRQHandler+0x52>
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fbba 	bl	8006590 <UART_Receive_IT>
      return;
 8005e1c:	e17b      	b.n	8006116 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80b1 	beq.w	8005f88 <HAL_UART_IRQHandler+0x1bc>
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d105      	bne.n	8005e3c <HAL_UART_IRQHandler+0x70>
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 80a6 	beq.w	8005f88 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_UART_IRQHandler+0x90>
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	f043 0201 	orr.w	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_UART_IRQHandler+0xb0>
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	f043 0202 	orr.w	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_UART_IRQHandler+0xd0>
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f043 0204 	orr.w	r2, r3, #4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00f      	beq.n	8005ec6 <HAL_UART_IRQHandler+0xfa>
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d104      	bne.n	8005eba <HAL_UART_IRQHandler+0xee>
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f043 0208 	orr.w	r2, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 811e 	beq.w	800610c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <HAL_UART_IRQHandler+0x11e>
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fb53 	bl	8006590 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bf14      	ite	ne
 8005ef8:	2301      	movne	r3, #1
 8005efa:	2300      	moveq	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <HAL_UART_IRQHandler+0x146>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d031      	beq.n	8005f76 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fa95 	bl	8006442 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d023      	beq.n	8005f6e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f34:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d013      	beq.n	8005f66 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	4a76      	ldr	r2, [pc, #472]	; (800611c <HAL_UART_IRQHandler+0x350>)
 8005f44:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fd f9d8 	bl	8003300 <HAL_DMA_Abort_IT>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	e00e      	b.n	8005f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fc fea0 	bl	8002cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	e00a      	b.n	8005f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fc fe9c 	bl	8002cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	e006      	b.n	8005f84 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fc fe98 	bl	8002cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f82:	e0c3      	b.n	800610c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f84:	bf00      	nop
    return;
 8005f86:	e0c1      	b.n	800610c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	f040 80a1 	bne.w	80060d4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 809b 	beq.w	80060d4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	f003 0310 	and.w	r3, r3, #16
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8095 	beq.w	80060d4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d04e      	beq.n	800606c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005fd8:	8a3b      	ldrh	r3, [r7, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8098 	beq.w	8006110 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fe4:	8a3a      	ldrh	r2, [r7, #16]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	f080 8092 	bcs.w	8006110 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8a3a      	ldrh	r2, [r7, #16]
 8005ff0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d02b      	beq.n	8006054 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800600a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695a      	ldr	r2, [r3, #20]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0210 	bic.w	r2, r2, #16
 8006048:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	4618      	mov	r0, r3
 8006050:	f7fd f91b 	bl	800328a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800605c:	b29b      	uxth	r3, r3
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	b29b      	uxth	r3, r3
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f86d 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800606a:	e051      	b.n	8006110 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006074:	b29b      	uxth	r3, r3
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d047      	beq.n	8006114 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006084:	8a7b      	ldrh	r3, [r7, #18]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d044      	beq.n	8006114 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006098:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0210 	bic.w	r2, r2, #16
 80060c6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060c8:	8a7b      	ldrh	r3, [r7, #18]
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f839 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060d2:	e01f      	b.n	8006114 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <HAL_UART_IRQHandler+0x324>
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f9ea 	bl	80064c2 <UART_Transmit_IT>
    return;
 80060ee:	e012      	b.n	8006116 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <HAL_UART_IRQHandler+0x34a>
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fa2b 	bl	8006560 <UART_EndTransmit_IT>
    return;
 800610a:	e004      	b.n	8006116 <HAL_UART_IRQHandler+0x34a>
    return;
 800610c:	bf00      	nop
 800610e:	e002      	b.n	8006116 <HAL_UART_IRQHandler+0x34a>
      return;
 8006110:	bf00      	nop
 8006112:	e000      	b.n	8006116 <HAL_UART_IRQHandler+0x34a>
      return;
 8006114:	bf00      	nop
  }
}
 8006116:	3728      	adds	r7, #40	; 0x28
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	0800649b 	.word	0x0800649b

08006120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	bc80      	pop	{r7}
 8006130:	4770      	bx	lr

08006132 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b084      	sub	sp, #16
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d12a      	bne.n	80061cc <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800618a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695a      	ldr	r2, [r3, #20]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695a      	ldr	r2, [r3, #20]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061aa:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d107      	bne.n	80061cc <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0210 	bic.w	r2, r2, #16
 80061ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d106      	bne.n	80061e2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061d8:	4619      	mov	r1, r3
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7ff ffb2 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061e0:	e002      	b.n	80061e8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7fc fd6b 	bl	8002cbe <HAL_UART_RxCpltCallback>
}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	2b01      	cmp	r3, #1
 8006204:	d108      	bne.n	8006218 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	b29b      	uxth	r3, r3
 800620e:	4619      	mov	r1, r3
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff ff97 	bl	8006144 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006216:	e002      	b.n	800621e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f7ff ff8a 	bl	8006132 <HAL_UART_RxHalfCpltCallback>
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006242:	2b00      	cmp	r3, #0
 8006244:	bf14      	ite	ne
 8006246:	2301      	movne	r3, #1
 8006248:	2300      	moveq	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b21      	cmp	r3, #33	; 0x21
 8006258:	d108      	bne.n	800626c <UART_DMAError+0x46>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006266:	68b8      	ldr	r0, [r7, #8]
 8006268:	f000 f8d6 	bl	8006418 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	bf14      	ite	ne
 800627a:	2301      	movne	r3, #1
 800627c:	2300      	moveq	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b22      	cmp	r3, #34	; 0x22
 800628c:	d108      	bne.n	80062a0 <UART_DMAError+0x7a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2200      	movs	r2, #0
 8006298:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800629a:	68b8      	ldr	r0, [r7, #8]
 800629c:	f000 f8d1 	bl	8006442 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	f043 0210 	orr.w	r2, r3, #16
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062ac:	68b8      	ldr	r0, [r7, #8]
 80062ae:	f7fc fcfd 	bl	8002cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ca:	e02c      	b.n	8006326 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d028      	beq.n	8006326 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <UART_WaitOnFlagUntilTimeout+0x30>
 80062da:	f7fc fde1 	bl	8002ea0 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d21d      	bcs.n	8006326 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0201 	bic.w	r2, r2, #1
 8006308:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e00f      	b.n	8006346 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4013      	ands	r3, r2
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	429a      	cmp	r2, r3
 8006334:	bf0c      	ite	eq
 8006336:	2301      	moveq	r3, #1
 8006338:	2300      	movne	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	461a      	mov	r2, r3
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	429a      	cmp	r2, r3
 8006342:	d0c3      	beq.n	80062cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	88fa      	ldrh	r2, [r7, #6]
 8006368:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2222      	movs	r2, #34	; 0x22
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	4a23      	ldr	r2, [pc, #140]	; (800640c <UART_Start_Receive_DMA+0xbc>)
 800637e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	4a22      	ldr	r2, [pc, #136]	; (8006410 <UART_Start_Receive_DMA+0xc0>)
 8006386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	4a21      	ldr	r2, [pc, #132]	; (8006414 <UART_Start_Receive_DMA+0xc4>)
 800638e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	2200      	movs	r2, #0
 8006396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006398:	f107 0308 	add.w	r3, r7, #8
 800639c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	f7fc ff0c 	bl	80031cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	613b      	str	r3, [r7, #16]
 80063c8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695a      	ldr	r2, [r3, #20]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0201 	orr.w	r2, r2, #1
 80063f0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695a      	ldr	r2, [r3, #20]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006400:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	0800615b 	.word	0x0800615b
 8006410:	080061f1 	.word	0x080061f1
 8006414:	08006227 	.word	0x08006227

08006418 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800642e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006458:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0201 	bic.w	r2, r2, #1
 8006468:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	2b01      	cmp	r3, #1
 8006470:	d107      	bne.n	8006482 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0210 	bic.w	r2, r2, #16
 8006480:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr

0800649a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7fc fbf9 	bl	8002cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b21      	cmp	r3, #33	; 0x21
 80064d4:	d13e      	bne.n	8006554 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064de:	d114      	bne.n	800650a <UART_Transmit_IT+0x48>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d110      	bne.n	800650a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	1c9a      	adds	r2, r3, #2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	621a      	str	r2, [r3, #32]
 8006508:	e008      	b.n	800651c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	1c59      	adds	r1, r3, #1
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6211      	str	r1, [r2, #32]
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29b      	uxth	r3, r3
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4619      	mov	r1, r3
 800652a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10f      	bne.n	8006550 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800653e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800654e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e000      	b.n	8006556 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006554:	2302      	movs	r3, #2
  }
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006576:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff fdcd 	bl	8006120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b22      	cmp	r3, #34	; 0x22
 80065a2:	f040 8099 	bne.w	80066d8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	d117      	bne.n	80065e0 <UART_Receive_IT+0x50>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d113      	bne.n	80065e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	629a      	str	r2, [r3, #40]	; 0x28
 80065de:	e026      	b.n	800662e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f2:	d007      	beq.n	8006604 <UART_Receive_IT+0x74>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <UART_Receive_IT+0x82>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d106      	bne.n	8006612 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	e008      	b.n	8006624 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	b2db      	uxtb	r3, r3
 800661a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661e:	b2da      	uxtb	r2, r3
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29b      	uxth	r3, r3
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	4619      	mov	r1, r3
 800663c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800663e:	2b00      	cmp	r3, #0
 8006640:	d148      	bne.n	80066d4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0220 	bic.w	r2, r2, #32
 8006650:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006660:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695a      	ldr	r2, [r3, #20]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0201 	bic.w	r2, r2, #1
 8006670:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	2b01      	cmp	r3, #1
 8006680:	d123      	bne.n	80066ca <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0210 	bic.w	r2, r2, #16
 8006696:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d10a      	bne.n	80066bc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7ff fd3e 	bl	8006144 <HAL_UARTEx_RxEventCallback>
 80066c8:	e002      	b.n	80066d0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fc faf7 	bl	8002cbe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	e002      	b.n	80066da <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	e000      	b.n	80066da <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800671e:	f023 030c 	bic.w	r3, r3, #12
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6812      	ldr	r2, [r2, #0]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	430b      	orrs	r3, r1
 800672a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a2c      	ldr	r2, [pc, #176]	; (80067f8 <UART_SetConfig+0x114>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d103      	bne.n	8006754 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800674c:	f7fe fe02 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	e002      	b.n	800675a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006754:	f7fe fdea 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8006758:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009a      	lsls	r2, r3, #2
 8006764:	441a      	add	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	4a22      	ldr	r2, [pc, #136]	; (80067fc <UART_SetConfig+0x118>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	0119      	lsls	r1, r3, #4
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009a      	lsls	r2, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006790:	4b1a      	ldr	r3, [pc, #104]	; (80067fc <UART_SetConfig+0x118>)
 8006792:	fba3 0302 	umull	r0, r3, r3, r2
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	2064      	movs	r0, #100	; 0x64
 800679a:	fb00 f303 	mul.w	r3, r0, r3
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	3332      	adds	r3, #50	; 0x32
 80067a4:	4a15      	ldr	r2, [pc, #84]	; (80067fc <UART_SetConfig+0x118>)
 80067a6:	fba2 2303 	umull	r2, r3, r2, r3
 80067aa:	095b      	lsrs	r3, r3, #5
 80067ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b0:	4419      	add	r1, r3
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009a      	lsls	r2, r3, #2
 80067bc:	441a      	add	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <UART_SetConfig+0x118>)
 80067ca:	fba3 0302 	umull	r0, r3, r3, r2
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	2064      	movs	r0, #100	; 0x64
 80067d2:	fb00 f303 	mul.w	r3, r0, r3
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	3332      	adds	r3, #50	; 0x32
 80067dc:	4a07      	ldr	r2, [pc, #28]	; (80067fc <UART_SetConfig+0x118>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	f003 020f 	and.w	r2, r3, #15
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	440a      	add	r2, r1
 80067ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40013800 	.word	0x40013800
 80067fc:	51eb851f 	.word	0x51eb851f

08006800 <main>:
#include "main.h"



int main(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
	hwInit();
 8006804:	f7fc fae2 	bl	8002dcc <hwInit>
	apInit();
 8006808:	f7fa fc98 	bl	800113c <apInit>

/* TODO: Select IMU Filter (2) */

//	apKalman();
//	apComplementary();
	apMahony();
 800680c:	f7fa fe56 	bl	80014bc <apMahony>
//	apMadgwick();


	return 0;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	bd80      	pop	{r7, pc}
	...

08006818 <__errno>:
 8006818:	4b01      	ldr	r3, [pc, #4]	; (8006820 <__errno+0x8>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	2000002c 	.word	0x2000002c

08006824 <__libc_init_array>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	2600      	movs	r6, #0
 8006828:	4d0c      	ldr	r5, [pc, #48]	; (800685c <__libc_init_array+0x38>)
 800682a:	4c0d      	ldr	r4, [pc, #52]	; (8006860 <__libc_init_array+0x3c>)
 800682c:	1b64      	subs	r4, r4, r5
 800682e:	10a4      	asrs	r4, r4, #2
 8006830:	42a6      	cmp	r6, r4
 8006832:	d109      	bne.n	8006848 <__libc_init_array+0x24>
 8006834:	f004 f958 	bl	800aae8 <_init>
 8006838:	2600      	movs	r6, #0
 800683a:	4d0a      	ldr	r5, [pc, #40]	; (8006864 <__libc_init_array+0x40>)
 800683c:	4c0a      	ldr	r4, [pc, #40]	; (8006868 <__libc_init_array+0x44>)
 800683e:	1b64      	subs	r4, r4, r5
 8006840:	10a4      	asrs	r4, r4, #2
 8006842:	42a6      	cmp	r6, r4
 8006844:	d105      	bne.n	8006852 <__libc_init_array+0x2e>
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	f855 3b04 	ldr.w	r3, [r5], #4
 800684c:	4798      	blx	r3
 800684e:	3601      	adds	r6, #1
 8006850:	e7ee      	b.n	8006830 <__libc_init_array+0xc>
 8006852:	f855 3b04 	ldr.w	r3, [r5], #4
 8006856:	4798      	blx	r3
 8006858:	3601      	adds	r6, #1
 800685a:	e7f2      	b.n	8006842 <__libc_init_array+0x1e>
 800685c:	0800b34c 	.word	0x0800b34c
 8006860:	0800b34c 	.word	0x0800b34c
 8006864:	0800b34c 	.word	0x0800b34c
 8006868:	0800b350 	.word	0x0800b350

0800686c <memset>:
 800686c:	4603      	mov	r3, r0
 800686e:	4402      	add	r2, r0
 8006870:	4293      	cmp	r3, r2
 8006872:	d100      	bne.n	8006876 <memset+0xa>
 8006874:	4770      	bx	lr
 8006876:	f803 1b01 	strb.w	r1, [r3], #1
 800687a:	e7f9      	b.n	8006870 <memset+0x4>

0800687c <__cvt>:
 800687c:	2b00      	cmp	r3, #0
 800687e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006882:	461f      	mov	r7, r3
 8006884:	bfbb      	ittet	lt
 8006886:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800688a:	461f      	movlt	r7, r3
 800688c:	2300      	movge	r3, #0
 800688e:	232d      	movlt	r3, #45	; 0x2d
 8006890:	b088      	sub	sp, #32
 8006892:	4614      	mov	r4, r2
 8006894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006896:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006898:	7013      	strb	r3, [r2, #0]
 800689a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800689c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80068a0:	f023 0820 	bic.w	r8, r3, #32
 80068a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068a8:	d005      	beq.n	80068b6 <__cvt+0x3a>
 80068aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068ae:	d100      	bne.n	80068b2 <__cvt+0x36>
 80068b0:	3501      	adds	r5, #1
 80068b2:	2302      	movs	r3, #2
 80068b4:	e000      	b.n	80068b8 <__cvt+0x3c>
 80068b6:	2303      	movs	r3, #3
 80068b8:	aa07      	add	r2, sp, #28
 80068ba:	9204      	str	r2, [sp, #16]
 80068bc:	aa06      	add	r2, sp, #24
 80068be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068c2:	e9cd 3500 	strd	r3, r5, [sp]
 80068c6:	4622      	mov	r2, r4
 80068c8:	463b      	mov	r3, r7
 80068ca:	f000 fd09 	bl	80072e0 <_dtoa_r>
 80068ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80068d2:	4606      	mov	r6, r0
 80068d4:	d102      	bne.n	80068dc <__cvt+0x60>
 80068d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068d8:	07db      	lsls	r3, r3, #31
 80068da:	d522      	bpl.n	8006922 <__cvt+0xa6>
 80068dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068e0:	eb06 0905 	add.w	r9, r6, r5
 80068e4:	d110      	bne.n	8006908 <__cvt+0x8c>
 80068e6:	7833      	ldrb	r3, [r6, #0]
 80068e8:	2b30      	cmp	r3, #48	; 0x30
 80068ea:	d10a      	bne.n	8006902 <__cvt+0x86>
 80068ec:	2200      	movs	r2, #0
 80068ee:	2300      	movs	r3, #0
 80068f0:	4620      	mov	r0, r4
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7fa f868 	bl	80009c8 <__aeabi_dcmpeq>
 80068f8:	b918      	cbnz	r0, 8006902 <__cvt+0x86>
 80068fa:	f1c5 0501 	rsb	r5, r5, #1
 80068fe:	f8ca 5000 	str.w	r5, [sl]
 8006902:	f8da 3000 	ldr.w	r3, [sl]
 8006906:	4499      	add	r9, r3
 8006908:	2200      	movs	r2, #0
 800690a:	2300      	movs	r3, #0
 800690c:	4620      	mov	r0, r4
 800690e:	4639      	mov	r1, r7
 8006910:	f7fa f85a 	bl	80009c8 <__aeabi_dcmpeq>
 8006914:	b108      	cbz	r0, 800691a <__cvt+0x9e>
 8006916:	f8cd 901c 	str.w	r9, [sp, #28]
 800691a:	2230      	movs	r2, #48	; 0x30
 800691c:	9b07      	ldr	r3, [sp, #28]
 800691e:	454b      	cmp	r3, r9
 8006920:	d307      	bcc.n	8006932 <__cvt+0xb6>
 8006922:	4630      	mov	r0, r6
 8006924:	9b07      	ldr	r3, [sp, #28]
 8006926:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006928:	1b9b      	subs	r3, r3, r6
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	b008      	add	sp, #32
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	9107      	str	r1, [sp, #28]
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e7f0      	b.n	800691c <__cvt+0xa0>

0800693a <__exponent>:
 800693a:	4603      	mov	r3, r0
 800693c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800693e:	2900      	cmp	r1, #0
 8006940:	f803 2b02 	strb.w	r2, [r3], #2
 8006944:	bfb6      	itet	lt
 8006946:	222d      	movlt	r2, #45	; 0x2d
 8006948:	222b      	movge	r2, #43	; 0x2b
 800694a:	4249      	neglt	r1, r1
 800694c:	2909      	cmp	r1, #9
 800694e:	7042      	strb	r2, [r0, #1]
 8006950:	dd2b      	ble.n	80069aa <__exponent+0x70>
 8006952:	f10d 0407 	add.w	r4, sp, #7
 8006956:	46a4      	mov	ip, r4
 8006958:	270a      	movs	r7, #10
 800695a:	fb91 f6f7 	sdiv	r6, r1, r7
 800695e:	460a      	mov	r2, r1
 8006960:	46a6      	mov	lr, r4
 8006962:	fb07 1516 	mls	r5, r7, r6, r1
 8006966:	2a63      	cmp	r2, #99	; 0x63
 8006968:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800696c:	4631      	mov	r1, r6
 800696e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006972:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006976:	dcf0      	bgt.n	800695a <__exponent+0x20>
 8006978:	3130      	adds	r1, #48	; 0x30
 800697a:	f1ae 0502 	sub.w	r5, lr, #2
 800697e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006982:	4629      	mov	r1, r5
 8006984:	1c44      	adds	r4, r0, #1
 8006986:	4561      	cmp	r1, ip
 8006988:	d30a      	bcc.n	80069a0 <__exponent+0x66>
 800698a:	f10d 0209 	add.w	r2, sp, #9
 800698e:	eba2 020e 	sub.w	r2, r2, lr
 8006992:	4565      	cmp	r5, ip
 8006994:	bf88      	it	hi
 8006996:	2200      	movhi	r2, #0
 8006998:	4413      	add	r3, r2
 800699a:	1a18      	subs	r0, r3, r0
 800699c:	b003      	add	sp, #12
 800699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80069a8:	e7ed      	b.n	8006986 <__exponent+0x4c>
 80069aa:	2330      	movs	r3, #48	; 0x30
 80069ac:	3130      	adds	r1, #48	; 0x30
 80069ae:	7083      	strb	r3, [r0, #2]
 80069b0:	70c1      	strb	r1, [r0, #3]
 80069b2:	1d03      	adds	r3, r0, #4
 80069b4:	e7f1      	b.n	800699a <__exponent+0x60>
	...

080069b8 <_printf_float>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	b091      	sub	sp, #68	; 0x44
 80069be:	460c      	mov	r4, r1
 80069c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80069c4:	4616      	mov	r6, r2
 80069c6:	461f      	mov	r7, r3
 80069c8:	4605      	mov	r5, r0
 80069ca:	f001 fa77 	bl	8007ebc <_localeconv_r>
 80069ce:	6803      	ldr	r3, [r0, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	9309      	str	r3, [sp, #36]	; 0x24
 80069d4:	f7f9 fbcc 	bl	8000170 <strlen>
 80069d8:	2300      	movs	r3, #0
 80069da:	930e      	str	r3, [sp, #56]	; 0x38
 80069dc:	f8d8 3000 	ldr.w	r3, [r8]
 80069e0:	900a      	str	r0, [sp, #40]	; 0x28
 80069e2:	3307      	adds	r3, #7
 80069e4:	f023 0307 	bic.w	r3, r3, #7
 80069e8:	f103 0208 	add.w	r2, r3, #8
 80069ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80069f0:	f8d4 b000 	ldr.w	fp, [r4]
 80069f4:	f8c8 2000 	str.w	r2, [r8]
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a00:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006a04:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0e:	4640      	mov	r0, r8
 8006a10:	4b9c      	ldr	r3, [pc, #624]	; (8006c84 <_printf_float+0x2cc>)
 8006a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a14:	f7fa f80a 	bl	8000a2c <__aeabi_dcmpun>
 8006a18:	bb70      	cbnz	r0, 8006a78 <_printf_float+0xc0>
 8006a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1e:	4640      	mov	r0, r8
 8006a20:	4b98      	ldr	r3, [pc, #608]	; (8006c84 <_printf_float+0x2cc>)
 8006a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a24:	f7f9 ffe4 	bl	80009f0 <__aeabi_dcmple>
 8006a28:	bb30      	cbnz	r0, 8006a78 <_printf_float+0xc0>
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4651      	mov	r1, sl
 8006a32:	f7f9 ffd3 	bl	80009dc <__aeabi_dcmplt>
 8006a36:	b110      	cbz	r0, 8006a3e <_printf_float+0x86>
 8006a38:	232d      	movs	r3, #45	; 0x2d
 8006a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a3e:	4b92      	ldr	r3, [pc, #584]	; (8006c88 <_printf_float+0x2d0>)
 8006a40:	4892      	ldr	r0, [pc, #584]	; (8006c8c <_printf_float+0x2d4>)
 8006a42:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006a46:	bf94      	ite	ls
 8006a48:	4698      	movls	r8, r3
 8006a4a:	4680      	movhi	r8, r0
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	f04f 0a00 	mov.w	sl, #0
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	f02b 0304 	bic.w	r3, fp, #4
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	4633      	mov	r3, r6
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4628      	mov	r0, r5
 8006a60:	9700      	str	r7, [sp, #0]
 8006a62:	aa0f      	add	r2, sp, #60	; 0x3c
 8006a64:	f000 f9d4 	bl	8006e10 <_printf_common>
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f040 8090 	bne.w	8006b8e <_printf_float+0x1d6>
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	b011      	add	sp, #68	; 0x44
 8006a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a78:	4642      	mov	r2, r8
 8006a7a:	4653      	mov	r3, sl
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	4651      	mov	r1, sl
 8006a80:	f7f9 ffd4 	bl	8000a2c <__aeabi_dcmpun>
 8006a84:	b148      	cbz	r0, 8006a9a <_printf_float+0xe2>
 8006a86:	f1ba 0f00 	cmp.w	sl, #0
 8006a8a:	bfb8      	it	lt
 8006a8c:	232d      	movlt	r3, #45	; 0x2d
 8006a8e:	4880      	ldr	r0, [pc, #512]	; (8006c90 <_printf_float+0x2d8>)
 8006a90:	bfb8      	it	lt
 8006a92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a96:	4b7f      	ldr	r3, [pc, #508]	; (8006c94 <_printf_float+0x2dc>)
 8006a98:	e7d3      	b.n	8006a42 <_printf_float+0x8a>
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	d142      	bne.n	8006b2a <_printf_float+0x172>
 8006aa4:	2306      	movs	r3, #6
 8006aa6:	6063      	str	r3, [r4, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	9206      	str	r2, [sp, #24]
 8006aac:	aa0e      	add	r2, sp, #56	; 0x38
 8006aae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006ab2:	aa0d      	add	r2, sp, #52	; 0x34
 8006ab4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006ab8:	9203      	str	r2, [sp, #12]
 8006aba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006abe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	4628      	mov	r0, r5
 8006acc:	4653      	mov	r3, sl
 8006ace:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ad0:	f7ff fed4 	bl	800687c <__cvt>
 8006ad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ad6:	4680      	mov	r8, r0
 8006ad8:	2947      	cmp	r1, #71	; 0x47
 8006ada:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006adc:	d108      	bne.n	8006af0 <_printf_float+0x138>
 8006ade:	1cc8      	adds	r0, r1, #3
 8006ae0:	db02      	blt.n	8006ae8 <_printf_float+0x130>
 8006ae2:	6863      	ldr	r3, [r4, #4]
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	dd40      	ble.n	8006b6a <_printf_float+0x1b2>
 8006ae8:	f1a9 0902 	sub.w	r9, r9, #2
 8006aec:	fa5f f989 	uxtb.w	r9, r9
 8006af0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006af4:	d81f      	bhi.n	8006b36 <_printf_float+0x17e>
 8006af6:	464a      	mov	r2, r9
 8006af8:	3901      	subs	r1, #1
 8006afa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006afe:	910d      	str	r1, [sp, #52]	; 0x34
 8006b00:	f7ff ff1b 	bl	800693a <__exponent>
 8006b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b06:	4682      	mov	sl, r0
 8006b08:	1813      	adds	r3, r2, r0
 8006b0a:	2a01      	cmp	r2, #1
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	dc02      	bgt.n	8006b16 <_printf_float+0x15e>
 8006b10:	6822      	ldr	r2, [r4, #0]
 8006b12:	07d2      	lsls	r2, r2, #31
 8006b14:	d501      	bpl.n	8006b1a <_printf_float+0x162>
 8006b16:	3301      	adds	r3, #1
 8006b18:	6123      	str	r3, [r4, #16]
 8006b1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d09b      	beq.n	8006a5a <_printf_float+0xa2>
 8006b22:	232d      	movs	r3, #45	; 0x2d
 8006b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b28:	e797      	b.n	8006a5a <_printf_float+0xa2>
 8006b2a:	2947      	cmp	r1, #71	; 0x47
 8006b2c:	d1bc      	bne.n	8006aa8 <_printf_float+0xf0>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1ba      	bne.n	8006aa8 <_printf_float+0xf0>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e7b7      	b.n	8006aa6 <_printf_float+0xee>
 8006b36:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006b3a:	d118      	bne.n	8006b6e <_printf_float+0x1b6>
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	dd0b      	ble.n	8006b5a <_printf_float+0x1a2>
 8006b42:	6121      	str	r1, [r4, #16]
 8006b44:	b913      	cbnz	r3, 8006b4c <_printf_float+0x194>
 8006b46:	6822      	ldr	r2, [r4, #0]
 8006b48:	07d0      	lsls	r0, r2, #31
 8006b4a:	d502      	bpl.n	8006b52 <_printf_float+0x19a>
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	440b      	add	r3, r1
 8006b50:	6123      	str	r3, [r4, #16]
 8006b52:	f04f 0a00 	mov.w	sl, #0
 8006b56:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b58:	e7df      	b.n	8006b1a <_printf_float+0x162>
 8006b5a:	b913      	cbnz	r3, 8006b62 <_printf_float+0x1aa>
 8006b5c:	6822      	ldr	r2, [r4, #0]
 8006b5e:	07d2      	lsls	r2, r2, #31
 8006b60:	d501      	bpl.n	8006b66 <_printf_float+0x1ae>
 8006b62:	3302      	adds	r3, #2
 8006b64:	e7f4      	b.n	8006b50 <_printf_float+0x198>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e7f2      	b.n	8006b50 <_printf_float+0x198>
 8006b6a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b70:	4299      	cmp	r1, r3
 8006b72:	db05      	blt.n	8006b80 <_printf_float+0x1c8>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	6121      	str	r1, [r4, #16]
 8006b78:	07d8      	lsls	r0, r3, #31
 8006b7a:	d5ea      	bpl.n	8006b52 <_printf_float+0x19a>
 8006b7c:	1c4b      	adds	r3, r1, #1
 8006b7e:	e7e7      	b.n	8006b50 <_printf_float+0x198>
 8006b80:	2900      	cmp	r1, #0
 8006b82:	bfcc      	ite	gt
 8006b84:	2201      	movgt	r2, #1
 8006b86:	f1c1 0202 	rsble	r2, r1, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	e7e0      	b.n	8006b50 <_printf_float+0x198>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	055a      	lsls	r2, r3, #21
 8006b92:	d407      	bmi.n	8006ba4 <_printf_float+0x1ec>
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	4642      	mov	r2, r8
 8006b98:	4631      	mov	r1, r6
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	47b8      	blx	r7
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d12b      	bne.n	8006bfa <_printf_float+0x242>
 8006ba2:	e764      	b.n	8006a6e <_printf_float+0xb6>
 8006ba4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ba8:	f240 80dd 	bls.w	8006d66 <_printf_float+0x3ae>
 8006bac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f7f9 ff08 	bl	80009c8 <__aeabi_dcmpeq>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d033      	beq.n	8006c24 <_printf_float+0x26c>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	4a35      	ldr	r2, [pc, #212]	; (8006c98 <_printf_float+0x2e0>)
 8006bc4:	47b8      	blx	r7
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f43f af51 	beq.w	8006a6e <_printf_float+0xb6>
 8006bcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	db02      	blt.n	8006bda <_printf_float+0x222>
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	07d8      	lsls	r0, r3, #31
 8006bd8:	d50f      	bpl.n	8006bfa <_printf_float+0x242>
 8006bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	f43f af42 	beq.w	8006a6e <_printf_float+0xb6>
 8006bea:	f04f 0800 	mov.w	r8, #0
 8006bee:	f104 091a 	add.w	r9, r4, #26
 8006bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	4543      	cmp	r3, r8
 8006bf8:	dc09      	bgt.n	8006c0e <_printf_float+0x256>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	079b      	lsls	r3, r3, #30
 8006bfe:	f100 8102 	bmi.w	8006e06 <_printf_float+0x44e>
 8006c02:	68e0      	ldr	r0, [r4, #12]
 8006c04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c06:	4298      	cmp	r0, r3
 8006c08:	bfb8      	it	lt
 8006c0a:	4618      	movlt	r0, r3
 8006c0c:	e731      	b.n	8006a72 <_printf_float+0xba>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	464a      	mov	r2, r9
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f43f af28 	beq.w	8006a6e <_printf_float+0xb6>
 8006c1e:	f108 0801 	add.w	r8, r8, #1
 8006c22:	e7e6      	b.n	8006bf2 <_printf_float+0x23a>
 8006c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	dc38      	bgt.n	8006c9c <_printf_float+0x2e4>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4628      	mov	r0, r5
 8006c30:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <_printf_float+0x2e0>)
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	f43f af1a 	beq.w	8006a6e <_printf_float+0xb6>
 8006c3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	d102      	bne.n	8006c48 <_printf_float+0x290>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	07d9      	lsls	r1, r3, #31
 8006c46:	d5d8      	bpl.n	8006bfa <_printf_float+0x242>
 8006c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f af0b 	beq.w	8006a6e <_printf_float+0xb6>
 8006c58:	f04f 0900 	mov.w	r9, #0
 8006c5c:	f104 0a1a 	add.w	sl, r4, #26
 8006c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c62:	425b      	negs	r3, r3
 8006c64:	454b      	cmp	r3, r9
 8006c66:	dc01      	bgt.n	8006c6c <_printf_float+0x2b4>
 8006c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c6a:	e794      	b.n	8006b96 <_printf_float+0x1de>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	4652      	mov	r2, sl
 8006c70:	4631      	mov	r1, r6
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b8      	blx	r7
 8006c76:	3001      	adds	r0, #1
 8006c78:	f43f aef9 	beq.w	8006a6e <_printf_float+0xb6>
 8006c7c:	f109 0901 	add.w	r9, r9, #1
 8006c80:	e7ee      	b.n	8006c60 <_printf_float+0x2a8>
 8006c82:	bf00      	nop
 8006c84:	7fefffff 	.word	0x7fefffff
 8006c88:	0800ab64 	.word	0x0800ab64
 8006c8c:	0800ab68 	.word	0x0800ab68
 8006c90:	0800ab70 	.word	0x0800ab70
 8006c94:	0800ab6c 	.word	0x0800ab6c
 8006c98:	0800ab74 	.word	0x0800ab74
 8006c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	bfa8      	it	ge
 8006ca4:	461a      	movge	r2, r3
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	4691      	mov	r9, r2
 8006caa:	dc37      	bgt.n	8006d1c <_printf_float+0x364>
 8006cac:	f04f 0b00 	mov.w	fp, #0
 8006cb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cb4:	f104 021a 	add.w	r2, r4, #26
 8006cb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006cbc:	ebaa 0309 	sub.w	r3, sl, r9
 8006cc0:	455b      	cmp	r3, fp
 8006cc2:	dc33      	bgt.n	8006d2c <_printf_float+0x374>
 8006cc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	db3b      	blt.n	8006d44 <_printf_float+0x38c>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	07da      	lsls	r2, r3, #31
 8006cd0:	d438      	bmi.n	8006d44 <_printf_float+0x38c>
 8006cd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cd4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006cd6:	eba2 030a 	sub.w	r3, r2, sl
 8006cda:	eba2 0901 	sub.w	r9, r2, r1
 8006cde:	4599      	cmp	r9, r3
 8006ce0:	bfa8      	it	ge
 8006ce2:	4699      	movge	r9, r3
 8006ce4:	f1b9 0f00 	cmp.w	r9, #0
 8006ce8:	dc34      	bgt.n	8006d54 <_printf_float+0x39c>
 8006cea:	f04f 0800 	mov.w	r8, #0
 8006cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cf2:	f104 0a1a 	add.w	sl, r4, #26
 8006cf6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	eba3 0309 	sub.w	r3, r3, r9
 8006d00:	4543      	cmp	r3, r8
 8006d02:	f77f af7a 	ble.w	8006bfa <_printf_float+0x242>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4652      	mov	r2, sl
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f aeac 	beq.w	8006a6e <_printf_float+0xb6>
 8006d16:	f108 0801 	add.w	r8, r8, #1
 8006d1a:	e7ec      	b.n	8006cf6 <_printf_float+0x33e>
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4642      	mov	r2, r8
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	d1c0      	bne.n	8006cac <_printf_float+0x2f4>
 8006d2a:	e6a0      	b.n	8006a6e <_printf_float+0xb6>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	f43f ae99 	beq.w	8006a6e <_printf_float+0xb6>
 8006d3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d3e:	f10b 0b01 	add.w	fp, fp, #1
 8006d42:	e7b9      	b.n	8006cb8 <_printf_float+0x300>
 8006d44:	4631      	mov	r1, r6
 8006d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	47b8      	blx	r7
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d1bf      	bne.n	8006cd2 <_printf_float+0x31a>
 8006d52:	e68c      	b.n	8006a6e <_printf_float+0xb6>
 8006d54:	464b      	mov	r3, r9
 8006d56:	4631      	mov	r1, r6
 8006d58:	4628      	mov	r0, r5
 8006d5a:	eb08 020a 	add.w	r2, r8, sl
 8006d5e:	47b8      	blx	r7
 8006d60:	3001      	adds	r0, #1
 8006d62:	d1c2      	bne.n	8006cea <_printf_float+0x332>
 8006d64:	e683      	b.n	8006a6e <_printf_float+0xb6>
 8006d66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d68:	2a01      	cmp	r2, #1
 8006d6a:	dc01      	bgt.n	8006d70 <_printf_float+0x3b8>
 8006d6c:	07db      	lsls	r3, r3, #31
 8006d6e:	d537      	bpl.n	8006de0 <_printf_float+0x428>
 8006d70:	2301      	movs	r3, #1
 8006d72:	4642      	mov	r2, r8
 8006d74:	4631      	mov	r1, r6
 8006d76:	4628      	mov	r0, r5
 8006d78:	47b8      	blx	r7
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	f43f ae77 	beq.w	8006a6e <_printf_float+0xb6>
 8006d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	f43f ae6f 	beq.w	8006a6e <_printf_float+0xb6>
 8006d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d94:	2200      	movs	r2, #0
 8006d96:	2300      	movs	r3, #0
 8006d98:	f7f9 fe16 	bl	80009c8 <__aeabi_dcmpeq>
 8006d9c:	b9d8      	cbnz	r0, 8006dd6 <_printf_float+0x41e>
 8006d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006da0:	f108 0201 	add.w	r2, r8, #1
 8006da4:	3b01      	subs	r3, #1
 8006da6:	4631      	mov	r1, r6
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b8      	blx	r7
 8006dac:	3001      	adds	r0, #1
 8006dae:	d10e      	bne.n	8006dce <_printf_float+0x416>
 8006db0:	e65d      	b.n	8006a6e <_printf_float+0xb6>
 8006db2:	2301      	movs	r3, #1
 8006db4:	464a      	mov	r2, r9
 8006db6:	4631      	mov	r1, r6
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b8      	blx	r7
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	f43f ae56 	beq.w	8006a6e <_printf_float+0xb6>
 8006dc2:	f108 0801 	add.w	r8, r8, #1
 8006dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	4543      	cmp	r3, r8
 8006dcc:	dcf1      	bgt.n	8006db2 <_printf_float+0x3fa>
 8006dce:	4653      	mov	r3, sl
 8006dd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006dd4:	e6e0      	b.n	8006b98 <_printf_float+0x1e0>
 8006dd6:	f04f 0800 	mov.w	r8, #0
 8006dda:	f104 091a 	add.w	r9, r4, #26
 8006dde:	e7f2      	b.n	8006dc6 <_printf_float+0x40e>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4642      	mov	r2, r8
 8006de4:	e7df      	b.n	8006da6 <_printf_float+0x3ee>
 8006de6:	2301      	movs	r3, #1
 8006de8:	464a      	mov	r2, r9
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	f43f ae3c 	beq.w	8006a6e <_printf_float+0xb6>
 8006df6:	f108 0801 	add.w	r8, r8, #1
 8006dfa:	68e3      	ldr	r3, [r4, #12]
 8006dfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006dfe:	1a5b      	subs	r3, r3, r1
 8006e00:	4543      	cmp	r3, r8
 8006e02:	dcf0      	bgt.n	8006de6 <_printf_float+0x42e>
 8006e04:	e6fd      	b.n	8006c02 <_printf_float+0x24a>
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	f104 0919 	add.w	r9, r4, #25
 8006e0e:	e7f4      	b.n	8006dfa <_printf_float+0x442>

08006e10 <_printf_common>:
 8006e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	4616      	mov	r6, r2
 8006e16:	4699      	mov	r9, r3
 8006e18:	688a      	ldr	r2, [r1, #8]
 8006e1a:	690b      	ldr	r3, [r1, #16]
 8006e1c:	4607      	mov	r7, r0
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bfb8      	it	lt
 8006e22:	4613      	movlt	r3, r2
 8006e24:	6033      	str	r3, [r6, #0]
 8006e26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e30:	b10a      	cbz	r2, 8006e36 <_printf_common+0x26>
 8006e32:	3301      	adds	r3, #1
 8006e34:	6033      	str	r3, [r6, #0]
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	0699      	lsls	r1, r3, #26
 8006e3a:	bf42      	ittt	mi
 8006e3c:	6833      	ldrmi	r3, [r6, #0]
 8006e3e:	3302      	addmi	r3, #2
 8006e40:	6033      	strmi	r3, [r6, #0]
 8006e42:	6825      	ldr	r5, [r4, #0]
 8006e44:	f015 0506 	ands.w	r5, r5, #6
 8006e48:	d106      	bne.n	8006e58 <_printf_common+0x48>
 8006e4a:	f104 0a19 	add.w	sl, r4, #25
 8006e4e:	68e3      	ldr	r3, [r4, #12]
 8006e50:	6832      	ldr	r2, [r6, #0]
 8006e52:	1a9b      	subs	r3, r3, r2
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	dc28      	bgt.n	8006eaa <_printf_common+0x9a>
 8006e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e5c:	1e13      	subs	r3, r2, #0
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	bf18      	it	ne
 8006e62:	2301      	movne	r3, #1
 8006e64:	0692      	lsls	r2, r2, #26
 8006e66:	d42d      	bmi.n	8006ec4 <_printf_common+0xb4>
 8006e68:	4649      	mov	r1, r9
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e70:	47c0      	blx	r8
 8006e72:	3001      	adds	r0, #1
 8006e74:	d020      	beq.n	8006eb8 <_printf_common+0xa8>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	68e5      	ldr	r5, [r4, #12]
 8006e7a:	f003 0306 	and.w	r3, r3, #6
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	bf18      	it	ne
 8006e82:	2500      	movne	r5, #0
 8006e84:	6832      	ldr	r2, [r6, #0]
 8006e86:	f04f 0600 	mov.w	r6, #0
 8006e8a:	68a3      	ldr	r3, [r4, #8]
 8006e8c:	bf08      	it	eq
 8006e8e:	1aad      	subeq	r5, r5, r2
 8006e90:	6922      	ldr	r2, [r4, #16]
 8006e92:	bf08      	it	eq
 8006e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	bfc4      	itt	gt
 8006e9c:	1a9b      	subgt	r3, r3, r2
 8006e9e:	18ed      	addgt	r5, r5, r3
 8006ea0:	341a      	adds	r4, #26
 8006ea2:	42b5      	cmp	r5, r6
 8006ea4:	d11a      	bne.n	8006edc <_printf_common+0xcc>
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e008      	b.n	8006ebc <_printf_common+0xac>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4652      	mov	r2, sl
 8006eae:	4649      	mov	r1, r9
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	47c0      	blx	r8
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d103      	bne.n	8006ec0 <_printf_common+0xb0>
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	e7c4      	b.n	8006e4e <_printf_common+0x3e>
 8006ec4:	2030      	movs	r0, #48	; 0x30
 8006ec6:	18e1      	adds	r1, r4, r3
 8006ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ed2:	4422      	add	r2, r4
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eda:	e7c5      	b.n	8006e68 <_printf_common+0x58>
 8006edc:	2301      	movs	r3, #1
 8006ede:	4622      	mov	r2, r4
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	47c0      	blx	r8
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d0e6      	beq.n	8006eb8 <_printf_common+0xa8>
 8006eea:	3601      	adds	r6, #1
 8006eec:	e7d9      	b.n	8006ea2 <_printf_common+0x92>
	...

08006ef0 <_printf_i>:
 8006ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	7e27      	ldrb	r7, [r4, #24]
 8006ef8:	4691      	mov	r9, r2
 8006efa:	2f78      	cmp	r7, #120	; 0x78
 8006efc:	4680      	mov	r8, r0
 8006efe:	469a      	mov	sl, r3
 8006f00:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f06:	d807      	bhi.n	8006f18 <_printf_i+0x28>
 8006f08:	2f62      	cmp	r7, #98	; 0x62
 8006f0a:	d80a      	bhi.n	8006f22 <_printf_i+0x32>
 8006f0c:	2f00      	cmp	r7, #0
 8006f0e:	f000 80d9 	beq.w	80070c4 <_printf_i+0x1d4>
 8006f12:	2f58      	cmp	r7, #88	; 0x58
 8006f14:	f000 80a4 	beq.w	8007060 <_printf_i+0x170>
 8006f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f20:	e03a      	b.n	8006f98 <_printf_i+0xa8>
 8006f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f26:	2b15      	cmp	r3, #21
 8006f28:	d8f6      	bhi.n	8006f18 <_printf_i+0x28>
 8006f2a:	a001      	add	r0, pc, #4	; (adr r0, 8006f30 <_printf_i+0x40>)
 8006f2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f30:	08006f89 	.word	0x08006f89
 8006f34:	08006f9d 	.word	0x08006f9d
 8006f38:	08006f19 	.word	0x08006f19
 8006f3c:	08006f19 	.word	0x08006f19
 8006f40:	08006f19 	.word	0x08006f19
 8006f44:	08006f19 	.word	0x08006f19
 8006f48:	08006f9d 	.word	0x08006f9d
 8006f4c:	08006f19 	.word	0x08006f19
 8006f50:	08006f19 	.word	0x08006f19
 8006f54:	08006f19 	.word	0x08006f19
 8006f58:	08006f19 	.word	0x08006f19
 8006f5c:	080070ab 	.word	0x080070ab
 8006f60:	08006fcd 	.word	0x08006fcd
 8006f64:	0800708d 	.word	0x0800708d
 8006f68:	08006f19 	.word	0x08006f19
 8006f6c:	08006f19 	.word	0x08006f19
 8006f70:	080070cd 	.word	0x080070cd
 8006f74:	08006f19 	.word	0x08006f19
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08006f19 	.word	0x08006f19
 8006f80:	08006f19 	.word	0x08006f19
 8006f84:	08007095 	.word	0x08007095
 8006f88:	680b      	ldr	r3, [r1, #0]
 8006f8a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	600a      	str	r2, [r1, #0]
 8006f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0a4      	b.n	80070e6 <_printf_i+0x1f6>
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	6808      	ldr	r0, [r1, #0]
 8006fa0:	062e      	lsls	r6, r5, #24
 8006fa2:	f100 0304 	add.w	r3, r0, #4
 8006fa6:	d50a      	bpl.n	8006fbe <_printf_i+0xce>
 8006fa8:	6805      	ldr	r5, [r0, #0]
 8006faa:	600b      	str	r3, [r1, #0]
 8006fac:	2d00      	cmp	r5, #0
 8006fae:	da03      	bge.n	8006fb8 <_printf_i+0xc8>
 8006fb0:	232d      	movs	r3, #45	; 0x2d
 8006fb2:	426d      	negs	r5, r5
 8006fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb8:	230a      	movs	r3, #10
 8006fba:	485e      	ldr	r0, [pc, #376]	; (8007134 <_printf_i+0x244>)
 8006fbc:	e019      	b.n	8006ff2 <_printf_i+0x102>
 8006fbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006fc2:	6805      	ldr	r5, [r0, #0]
 8006fc4:	600b      	str	r3, [r1, #0]
 8006fc6:	bf18      	it	ne
 8006fc8:	b22d      	sxthne	r5, r5
 8006fca:	e7ef      	b.n	8006fac <_printf_i+0xbc>
 8006fcc:	680b      	ldr	r3, [r1, #0]
 8006fce:	6825      	ldr	r5, [r4, #0]
 8006fd0:	1d18      	adds	r0, r3, #4
 8006fd2:	6008      	str	r0, [r1, #0]
 8006fd4:	0628      	lsls	r0, r5, #24
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0xec>
 8006fd8:	681d      	ldr	r5, [r3, #0]
 8006fda:	e002      	b.n	8006fe2 <_printf_i+0xf2>
 8006fdc:	0669      	lsls	r1, r5, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0xe8>
 8006fe0:	881d      	ldrh	r5, [r3, #0]
 8006fe2:	2f6f      	cmp	r7, #111	; 0x6f
 8006fe4:	bf0c      	ite	eq
 8006fe6:	2308      	moveq	r3, #8
 8006fe8:	230a      	movne	r3, #10
 8006fea:	4852      	ldr	r0, [pc, #328]	; (8007134 <_printf_i+0x244>)
 8006fec:	2100      	movs	r1, #0
 8006fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ff2:	6866      	ldr	r6, [r4, #4]
 8006ff4:	2e00      	cmp	r6, #0
 8006ff6:	bfa8      	it	ge
 8006ff8:	6821      	ldrge	r1, [r4, #0]
 8006ffa:	60a6      	str	r6, [r4, #8]
 8006ffc:	bfa4      	itt	ge
 8006ffe:	f021 0104 	bicge.w	r1, r1, #4
 8007002:	6021      	strge	r1, [r4, #0]
 8007004:	b90d      	cbnz	r5, 800700a <_printf_i+0x11a>
 8007006:	2e00      	cmp	r6, #0
 8007008:	d04d      	beq.n	80070a6 <_printf_i+0x1b6>
 800700a:	4616      	mov	r6, r2
 800700c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007010:	fb03 5711 	mls	r7, r3, r1, r5
 8007014:	5dc7      	ldrb	r7, [r0, r7]
 8007016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800701a:	462f      	mov	r7, r5
 800701c:	42bb      	cmp	r3, r7
 800701e:	460d      	mov	r5, r1
 8007020:	d9f4      	bls.n	800700c <_printf_i+0x11c>
 8007022:	2b08      	cmp	r3, #8
 8007024:	d10b      	bne.n	800703e <_printf_i+0x14e>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	07df      	lsls	r7, r3, #31
 800702a:	d508      	bpl.n	800703e <_printf_i+0x14e>
 800702c:	6923      	ldr	r3, [r4, #16]
 800702e:	6861      	ldr	r1, [r4, #4]
 8007030:	4299      	cmp	r1, r3
 8007032:	bfde      	ittt	le
 8007034:	2330      	movle	r3, #48	; 0x30
 8007036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800703a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800703e:	1b92      	subs	r2, r2, r6
 8007040:	6122      	str	r2, [r4, #16]
 8007042:	464b      	mov	r3, r9
 8007044:	4621      	mov	r1, r4
 8007046:	4640      	mov	r0, r8
 8007048:	f8cd a000 	str.w	sl, [sp]
 800704c:	aa03      	add	r2, sp, #12
 800704e:	f7ff fedf 	bl	8006e10 <_printf_common>
 8007052:	3001      	adds	r0, #1
 8007054:	d14c      	bne.n	80070f0 <_printf_i+0x200>
 8007056:	f04f 30ff 	mov.w	r0, #4294967295
 800705a:	b004      	add	sp, #16
 800705c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007060:	4834      	ldr	r0, [pc, #208]	; (8007134 <_printf_i+0x244>)
 8007062:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007066:	680e      	ldr	r6, [r1, #0]
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	f856 5b04 	ldr.w	r5, [r6], #4
 800706e:	061f      	lsls	r7, r3, #24
 8007070:	600e      	str	r6, [r1, #0]
 8007072:	d514      	bpl.n	800709e <_printf_i+0x1ae>
 8007074:	07d9      	lsls	r1, r3, #31
 8007076:	bf44      	itt	mi
 8007078:	f043 0320 	orrmi.w	r3, r3, #32
 800707c:	6023      	strmi	r3, [r4, #0]
 800707e:	b91d      	cbnz	r5, 8007088 <_printf_i+0x198>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	f023 0320 	bic.w	r3, r3, #32
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	2310      	movs	r3, #16
 800708a:	e7af      	b.n	8006fec <_printf_i+0xfc>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	f043 0320 	orr.w	r3, r3, #32
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	2378      	movs	r3, #120	; 0x78
 8007096:	4828      	ldr	r0, [pc, #160]	; (8007138 <_printf_i+0x248>)
 8007098:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800709c:	e7e3      	b.n	8007066 <_printf_i+0x176>
 800709e:	065e      	lsls	r6, r3, #25
 80070a0:	bf48      	it	mi
 80070a2:	b2ad      	uxthmi	r5, r5
 80070a4:	e7e6      	b.n	8007074 <_printf_i+0x184>
 80070a6:	4616      	mov	r6, r2
 80070a8:	e7bb      	b.n	8007022 <_printf_i+0x132>
 80070aa:	680b      	ldr	r3, [r1, #0]
 80070ac:	6826      	ldr	r6, [r4, #0]
 80070ae:	1d1d      	adds	r5, r3, #4
 80070b0:	6960      	ldr	r0, [r4, #20]
 80070b2:	600d      	str	r5, [r1, #0]
 80070b4:	0635      	lsls	r5, r6, #24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	d501      	bpl.n	80070be <_printf_i+0x1ce>
 80070ba:	6018      	str	r0, [r3, #0]
 80070bc:	e002      	b.n	80070c4 <_printf_i+0x1d4>
 80070be:	0671      	lsls	r1, r6, #25
 80070c0:	d5fb      	bpl.n	80070ba <_printf_i+0x1ca>
 80070c2:	8018      	strh	r0, [r3, #0]
 80070c4:	2300      	movs	r3, #0
 80070c6:	4616      	mov	r6, r2
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	e7ba      	b.n	8007042 <_printf_i+0x152>
 80070cc:	680b      	ldr	r3, [r1, #0]
 80070ce:	1d1a      	adds	r2, r3, #4
 80070d0:	600a      	str	r2, [r1, #0]
 80070d2:	681e      	ldr	r6, [r3, #0]
 80070d4:	2100      	movs	r1, #0
 80070d6:	4630      	mov	r0, r6
 80070d8:	6862      	ldr	r2, [r4, #4]
 80070da:	f000 fefb 	bl	8007ed4 <memchr>
 80070de:	b108      	cbz	r0, 80070e4 <_printf_i+0x1f4>
 80070e0:	1b80      	subs	r0, r0, r6
 80070e2:	6060      	str	r0, [r4, #4]
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	2300      	movs	r3, #0
 80070ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ee:	e7a8      	b.n	8007042 <_printf_i+0x152>
 80070f0:	4632      	mov	r2, r6
 80070f2:	4649      	mov	r1, r9
 80070f4:	4640      	mov	r0, r8
 80070f6:	6923      	ldr	r3, [r4, #16]
 80070f8:	47d0      	blx	sl
 80070fa:	3001      	adds	r0, #1
 80070fc:	d0ab      	beq.n	8007056 <_printf_i+0x166>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	079b      	lsls	r3, r3, #30
 8007102:	d413      	bmi.n	800712c <_printf_i+0x23c>
 8007104:	68e0      	ldr	r0, [r4, #12]
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	4298      	cmp	r0, r3
 800710a:	bfb8      	it	lt
 800710c:	4618      	movlt	r0, r3
 800710e:	e7a4      	b.n	800705a <_printf_i+0x16a>
 8007110:	2301      	movs	r3, #1
 8007112:	4632      	mov	r2, r6
 8007114:	4649      	mov	r1, r9
 8007116:	4640      	mov	r0, r8
 8007118:	47d0      	blx	sl
 800711a:	3001      	adds	r0, #1
 800711c:	d09b      	beq.n	8007056 <_printf_i+0x166>
 800711e:	3501      	adds	r5, #1
 8007120:	68e3      	ldr	r3, [r4, #12]
 8007122:	9903      	ldr	r1, [sp, #12]
 8007124:	1a5b      	subs	r3, r3, r1
 8007126:	42ab      	cmp	r3, r5
 8007128:	dcf2      	bgt.n	8007110 <_printf_i+0x220>
 800712a:	e7eb      	b.n	8007104 <_printf_i+0x214>
 800712c:	2500      	movs	r5, #0
 800712e:	f104 0619 	add.w	r6, r4, #25
 8007132:	e7f5      	b.n	8007120 <_printf_i+0x230>
 8007134:	0800ab76 	.word	0x0800ab76
 8007138:	0800ab87 	.word	0x0800ab87

0800713c <copysign>:
 800713c:	b530      	push	{r4, r5, lr}
 800713e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007142:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007146:	ea42 0103 	orr.w	r1, r2, r3
 800714a:	bd30      	pop	{r4, r5, pc}

0800714c <_vsniprintf_r>:
 800714c:	b530      	push	{r4, r5, lr}
 800714e:	1e14      	subs	r4, r2, #0
 8007150:	4605      	mov	r5, r0
 8007152:	b09b      	sub	sp, #108	; 0x6c
 8007154:	4618      	mov	r0, r3
 8007156:	da05      	bge.n	8007164 <_vsniprintf_r+0x18>
 8007158:	238b      	movs	r3, #139	; 0x8b
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	b01b      	add	sp, #108	; 0x6c
 8007162:	bd30      	pop	{r4, r5, pc}
 8007164:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007168:	f8ad 300c 	strh.w	r3, [sp, #12]
 800716c:	bf0c      	ite	eq
 800716e:	4623      	moveq	r3, r4
 8007170:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007174:	9302      	str	r3, [sp, #8]
 8007176:	9305      	str	r3, [sp, #20]
 8007178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800717c:	4602      	mov	r2, r0
 800717e:	9100      	str	r1, [sp, #0]
 8007180:	9104      	str	r1, [sp, #16]
 8007182:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007186:	4669      	mov	r1, sp
 8007188:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800718a:	4628      	mov	r0, r5
 800718c:	f001 fb50 	bl	8008830 <_svfiprintf_r>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	bfbc      	itt	lt
 8007194:	238b      	movlt	r3, #139	; 0x8b
 8007196:	602b      	strlt	r3, [r5, #0]
 8007198:	2c00      	cmp	r4, #0
 800719a:	d0e1      	beq.n	8007160 <_vsniprintf_r+0x14>
 800719c:	2200      	movs	r2, #0
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e7dd      	b.n	8007160 <_vsniprintf_r+0x14>

080071a4 <vsniprintf>:
 80071a4:	b507      	push	{r0, r1, r2, lr}
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	4613      	mov	r3, r2
 80071aa:	460a      	mov	r2, r1
 80071ac:	4601      	mov	r1, r0
 80071ae:	4803      	ldr	r0, [pc, #12]	; (80071bc <vsniprintf+0x18>)
 80071b0:	6800      	ldr	r0, [r0, #0]
 80071b2:	f7ff ffcb 	bl	800714c <_vsniprintf_r>
 80071b6:	b003      	add	sp, #12
 80071b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80071bc:	2000002c 	.word	0x2000002c

080071c0 <quorem>:
 80071c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	6903      	ldr	r3, [r0, #16]
 80071c6:	690c      	ldr	r4, [r1, #16]
 80071c8:	4607      	mov	r7, r0
 80071ca:	42a3      	cmp	r3, r4
 80071cc:	f2c0 8083 	blt.w	80072d6 <quorem+0x116>
 80071d0:	3c01      	subs	r4, #1
 80071d2:	f100 0514 	add.w	r5, r0, #20
 80071d6:	f101 0814 	add.w	r8, r1, #20
 80071da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071e8:	3301      	adds	r3, #1
 80071ea:	429a      	cmp	r2, r3
 80071ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80071f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071f8:	d332      	bcc.n	8007260 <quorem+0xa0>
 80071fa:	f04f 0e00 	mov.w	lr, #0
 80071fe:	4640      	mov	r0, r8
 8007200:	46ac      	mov	ip, r5
 8007202:	46f2      	mov	sl, lr
 8007204:	f850 2b04 	ldr.w	r2, [r0], #4
 8007208:	b293      	uxth	r3, r2
 800720a:	fb06 e303 	mla	r3, r6, r3, lr
 800720e:	0c12      	lsrs	r2, r2, #16
 8007210:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007214:	fb06 e202 	mla	r2, r6, r2, lr
 8007218:	b29b      	uxth	r3, r3
 800721a:	ebaa 0303 	sub.w	r3, sl, r3
 800721e:	f8dc a000 	ldr.w	sl, [ip]
 8007222:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007226:	fa1f fa8a 	uxth.w	sl, sl
 800722a:	4453      	add	r3, sl
 800722c:	fa1f fa82 	uxth.w	sl, r2
 8007230:	f8dc 2000 	ldr.w	r2, [ip]
 8007234:	4581      	cmp	r9, r0
 8007236:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800723a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800723e:	b29b      	uxth	r3, r3
 8007240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007244:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007248:	f84c 3b04 	str.w	r3, [ip], #4
 800724c:	d2da      	bcs.n	8007204 <quorem+0x44>
 800724e:	f855 300b 	ldr.w	r3, [r5, fp]
 8007252:	b92b      	cbnz	r3, 8007260 <quorem+0xa0>
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	3b04      	subs	r3, #4
 8007258:	429d      	cmp	r5, r3
 800725a:	461a      	mov	r2, r3
 800725c:	d32f      	bcc.n	80072be <quorem+0xfe>
 800725e:	613c      	str	r4, [r7, #16]
 8007260:	4638      	mov	r0, r7
 8007262:	f001 f8cd 	bl	8008400 <__mcmp>
 8007266:	2800      	cmp	r0, #0
 8007268:	db25      	blt.n	80072b6 <quorem+0xf6>
 800726a:	4628      	mov	r0, r5
 800726c:	f04f 0c00 	mov.w	ip, #0
 8007270:	3601      	adds	r6, #1
 8007272:	f858 1b04 	ldr.w	r1, [r8], #4
 8007276:	f8d0 e000 	ldr.w	lr, [r0]
 800727a:	b28b      	uxth	r3, r1
 800727c:	ebac 0303 	sub.w	r3, ip, r3
 8007280:	fa1f f28e 	uxth.w	r2, lr
 8007284:	4413      	add	r3, r2
 8007286:	0c0a      	lsrs	r2, r1, #16
 8007288:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800728c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007290:	b29b      	uxth	r3, r3
 8007292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007296:	45c1      	cmp	r9, r8
 8007298:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800729c:	f840 3b04 	str.w	r3, [r0], #4
 80072a0:	d2e7      	bcs.n	8007272 <quorem+0xb2>
 80072a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072aa:	b922      	cbnz	r2, 80072b6 <quorem+0xf6>
 80072ac:	3b04      	subs	r3, #4
 80072ae:	429d      	cmp	r5, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	d30a      	bcc.n	80072ca <quorem+0x10a>
 80072b4:	613c      	str	r4, [r7, #16]
 80072b6:	4630      	mov	r0, r6
 80072b8:	b003      	add	sp, #12
 80072ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072be:	6812      	ldr	r2, [r2, #0]
 80072c0:	3b04      	subs	r3, #4
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	d1cb      	bne.n	800725e <quorem+0x9e>
 80072c6:	3c01      	subs	r4, #1
 80072c8:	e7c6      	b.n	8007258 <quorem+0x98>
 80072ca:	6812      	ldr	r2, [r2, #0]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	d1f0      	bne.n	80072b4 <quorem+0xf4>
 80072d2:	3c01      	subs	r4, #1
 80072d4:	e7eb      	b.n	80072ae <quorem+0xee>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e7ee      	b.n	80072b8 <quorem+0xf8>
 80072da:	0000      	movs	r0, r0
 80072dc:	0000      	movs	r0, r0
	...

080072e0 <_dtoa_r>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	4616      	mov	r6, r2
 80072e6:	461f      	mov	r7, r3
 80072e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80072ea:	b099      	sub	sp, #100	; 0x64
 80072ec:	4605      	mov	r5, r0
 80072ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80072f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80072f6:	b974      	cbnz	r4, 8007316 <_dtoa_r+0x36>
 80072f8:	2010      	movs	r0, #16
 80072fa:	f000 fde3 	bl	8007ec4 <malloc>
 80072fe:	4602      	mov	r2, r0
 8007300:	6268      	str	r0, [r5, #36]	; 0x24
 8007302:	b920      	cbnz	r0, 800730e <_dtoa_r+0x2e>
 8007304:	21ea      	movs	r1, #234	; 0xea
 8007306:	4bae      	ldr	r3, [pc, #696]	; (80075c0 <_dtoa_r+0x2e0>)
 8007308:	48ae      	ldr	r0, [pc, #696]	; (80075c4 <_dtoa_r+0x2e4>)
 800730a:	f001 fba1 	bl	8008a50 <__assert_func>
 800730e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007312:	6004      	str	r4, [r0, #0]
 8007314:	60c4      	str	r4, [r0, #12]
 8007316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007318:	6819      	ldr	r1, [r3, #0]
 800731a:	b151      	cbz	r1, 8007332 <_dtoa_r+0x52>
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	2301      	movs	r3, #1
 8007320:	4093      	lsls	r3, r2
 8007322:	604a      	str	r2, [r1, #4]
 8007324:	608b      	str	r3, [r1, #8]
 8007326:	4628      	mov	r0, r5
 8007328:	f000 fe30 	bl	8007f8c <_Bfree>
 800732c:	2200      	movs	r2, #0
 800732e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	1e3b      	subs	r3, r7, #0
 8007334:	bfaf      	iteee	ge
 8007336:	2300      	movge	r3, #0
 8007338:	2201      	movlt	r2, #1
 800733a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800733e:	9305      	strlt	r3, [sp, #20]
 8007340:	bfa8      	it	ge
 8007342:	f8c8 3000 	strge.w	r3, [r8]
 8007346:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800734a:	4b9f      	ldr	r3, [pc, #636]	; (80075c8 <_dtoa_r+0x2e8>)
 800734c:	bfb8      	it	lt
 800734e:	f8c8 2000 	strlt.w	r2, [r8]
 8007352:	ea33 0309 	bics.w	r3, r3, r9
 8007356:	d119      	bne.n	800738c <_dtoa_r+0xac>
 8007358:	f242 730f 	movw	r3, #9999	; 0x270f
 800735c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007364:	4333      	orrs	r3, r6
 8007366:	f000 8580 	beq.w	8007e6a <_dtoa_r+0xb8a>
 800736a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800736c:	b953      	cbnz	r3, 8007384 <_dtoa_r+0xa4>
 800736e:	4b97      	ldr	r3, [pc, #604]	; (80075cc <_dtoa_r+0x2ec>)
 8007370:	e022      	b.n	80073b8 <_dtoa_r+0xd8>
 8007372:	4b97      	ldr	r3, [pc, #604]	; (80075d0 <_dtoa_r+0x2f0>)
 8007374:	9308      	str	r3, [sp, #32]
 8007376:	3308      	adds	r3, #8
 8007378:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	9808      	ldr	r0, [sp, #32]
 800737e:	b019      	add	sp, #100	; 0x64
 8007380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007384:	4b91      	ldr	r3, [pc, #580]	; (80075cc <_dtoa_r+0x2ec>)
 8007386:	9308      	str	r3, [sp, #32]
 8007388:	3303      	adds	r3, #3
 800738a:	e7f5      	b.n	8007378 <_dtoa_r+0x98>
 800738c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007390:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007398:	2200      	movs	r2, #0
 800739a:	2300      	movs	r3, #0
 800739c:	f7f9 fb14 	bl	80009c8 <__aeabi_dcmpeq>
 80073a0:	4680      	mov	r8, r0
 80073a2:	b158      	cbz	r0, 80073bc <_dtoa_r+0xdc>
 80073a4:	2301      	movs	r3, #1
 80073a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073a8:	6013      	str	r3, [r2, #0]
 80073aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8559 	beq.w	8007e64 <_dtoa_r+0xb84>
 80073b2:	4888      	ldr	r0, [pc, #544]	; (80075d4 <_dtoa_r+0x2f4>)
 80073b4:	6018      	str	r0, [r3, #0]
 80073b6:	1e43      	subs	r3, r0, #1
 80073b8:	9308      	str	r3, [sp, #32]
 80073ba:	e7df      	b.n	800737c <_dtoa_r+0x9c>
 80073bc:	ab16      	add	r3, sp, #88	; 0x58
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	ab17      	add	r3, sp, #92	; 0x5c
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	4628      	mov	r0, r5
 80073c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80073ca:	f001 f8c5 	bl	8008558 <__d2b>
 80073ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80073d2:	4682      	mov	sl, r0
 80073d4:	2c00      	cmp	r4, #0
 80073d6:	d07e      	beq.n	80074d6 <_dtoa_r+0x1f6>
 80073d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80073e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80073ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80073ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80073f2:	2200      	movs	r2, #0
 80073f4:	4b78      	ldr	r3, [pc, #480]	; (80075d8 <_dtoa_r+0x2f8>)
 80073f6:	f7f8 fec7 	bl	8000188 <__aeabi_dsub>
 80073fa:	a36b      	add	r3, pc, #428	; (adr r3, 80075a8 <_dtoa_r+0x2c8>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f7f9 f87a 	bl	80004f8 <__aeabi_dmul>
 8007404:	a36a      	add	r3, pc, #424	; (adr r3, 80075b0 <_dtoa_r+0x2d0>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f7f8 febf 	bl	800018c <__adddf3>
 800740e:	4606      	mov	r6, r0
 8007410:	4620      	mov	r0, r4
 8007412:	460f      	mov	r7, r1
 8007414:	f7f9 f806 	bl	8000424 <__aeabi_i2d>
 8007418:	a367      	add	r3, pc, #412	; (adr r3, 80075b8 <_dtoa_r+0x2d8>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f7f9 f86b 	bl	80004f8 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4630      	mov	r0, r6
 8007428:	4639      	mov	r1, r7
 800742a:	f7f8 feaf 	bl	800018c <__adddf3>
 800742e:	4606      	mov	r6, r0
 8007430:	460f      	mov	r7, r1
 8007432:	f7f9 fb11 	bl	8000a58 <__aeabi_d2iz>
 8007436:	2200      	movs	r2, #0
 8007438:	4681      	mov	r9, r0
 800743a:	2300      	movs	r3, #0
 800743c:	4630      	mov	r0, r6
 800743e:	4639      	mov	r1, r7
 8007440:	f7f9 facc 	bl	80009dc <__aeabi_dcmplt>
 8007444:	b148      	cbz	r0, 800745a <_dtoa_r+0x17a>
 8007446:	4648      	mov	r0, r9
 8007448:	f7f8 ffec 	bl	8000424 <__aeabi_i2d>
 800744c:	4632      	mov	r2, r6
 800744e:	463b      	mov	r3, r7
 8007450:	f7f9 faba 	bl	80009c8 <__aeabi_dcmpeq>
 8007454:	b908      	cbnz	r0, 800745a <_dtoa_r+0x17a>
 8007456:	f109 39ff 	add.w	r9, r9, #4294967295
 800745a:	f1b9 0f16 	cmp.w	r9, #22
 800745e:	d857      	bhi.n	8007510 <_dtoa_r+0x230>
 8007460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007464:	4b5d      	ldr	r3, [pc, #372]	; (80075dc <_dtoa_r+0x2fc>)
 8007466:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746e:	f7f9 fab5 	bl	80009dc <__aeabi_dcmplt>
 8007472:	2800      	cmp	r0, #0
 8007474:	d04e      	beq.n	8007514 <_dtoa_r+0x234>
 8007476:	2300      	movs	r3, #0
 8007478:	f109 39ff 	add.w	r9, r9, #4294967295
 800747c:	930f      	str	r3, [sp, #60]	; 0x3c
 800747e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007480:	1b1c      	subs	r4, r3, r4
 8007482:	1e63      	subs	r3, r4, #1
 8007484:	9309      	str	r3, [sp, #36]	; 0x24
 8007486:	bf49      	itett	mi
 8007488:	f1c4 0301 	rsbmi	r3, r4, #1
 800748c:	2300      	movpl	r3, #0
 800748e:	9306      	strmi	r3, [sp, #24]
 8007490:	2300      	movmi	r3, #0
 8007492:	bf54      	ite	pl
 8007494:	9306      	strpl	r3, [sp, #24]
 8007496:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007498:	f1b9 0f00 	cmp.w	r9, #0
 800749c:	db3c      	blt.n	8007518 <_dtoa_r+0x238>
 800749e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80074a4:	444b      	add	r3, r9
 80074a6:	9309      	str	r3, [sp, #36]	; 0x24
 80074a8:	2300      	movs	r3, #0
 80074aa:	930a      	str	r3, [sp, #40]	; 0x28
 80074ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074ae:	2b09      	cmp	r3, #9
 80074b0:	d86c      	bhi.n	800758c <_dtoa_r+0x2ac>
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	bfc4      	itt	gt
 80074b6:	3b04      	subgt	r3, #4
 80074b8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80074ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074bc:	bfc8      	it	gt
 80074be:	2400      	movgt	r4, #0
 80074c0:	f1a3 0302 	sub.w	r3, r3, #2
 80074c4:	bfd8      	it	le
 80074c6:	2401      	movle	r4, #1
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	f200 808b 	bhi.w	80075e4 <_dtoa_r+0x304>
 80074ce:	e8df f003 	tbb	[pc, r3]
 80074d2:	4f2d      	.short	0x4f2d
 80074d4:	5b4d      	.short	0x5b4d
 80074d6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80074da:	441c      	add	r4, r3
 80074dc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	bfc3      	ittte	gt
 80074e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074e8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80074ec:	fa09 f303 	lslgt.w	r3, r9, r3
 80074f0:	f1c3 0320 	rsble	r3, r3, #32
 80074f4:	bfc6      	itte	gt
 80074f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074fa:	4318      	orrgt	r0, r3
 80074fc:	fa06 f003 	lslle.w	r0, r6, r3
 8007500:	f7f8 ff80 	bl	8000404 <__aeabi_ui2d>
 8007504:	2301      	movs	r3, #1
 8007506:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800750a:	3c01      	subs	r4, #1
 800750c:	9313      	str	r3, [sp, #76]	; 0x4c
 800750e:	e770      	b.n	80073f2 <_dtoa_r+0x112>
 8007510:	2301      	movs	r3, #1
 8007512:	e7b3      	b.n	800747c <_dtoa_r+0x19c>
 8007514:	900f      	str	r0, [sp, #60]	; 0x3c
 8007516:	e7b2      	b.n	800747e <_dtoa_r+0x19e>
 8007518:	9b06      	ldr	r3, [sp, #24]
 800751a:	eba3 0309 	sub.w	r3, r3, r9
 800751e:	9306      	str	r3, [sp, #24]
 8007520:	f1c9 0300 	rsb	r3, r9, #0
 8007524:	930a      	str	r3, [sp, #40]	; 0x28
 8007526:	2300      	movs	r3, #0
 8007528:	930e      	str	r3, [sp, #56]	; 0x38
 800752a:	e7bf      	b.n	80074ac <_dtoa_r+0x1cc>
 800752c:	2300      	movs	r3, #0
 800752e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007530:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007532:	2b00      	cmp	r3, #0
 8007534:	dc59      	bgt.n	80075ea <_dtoa_r+0x30a>
 8007536:	f04f 0b01 	mov.w	fp, #1
 800753a:	465b      	mov	r3, fp
 800753c:	f8cd b008 	str.w	fp, [sp, #8]
 8007540:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007544:	2200      	movs	r2, #0
 8007546:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007548:	6042      	str	r2, [r0, #4]
 800754a:	2204      	movs	r2, #4
 800754c:	f102 0614 	add.w	r6, r2, #20
 8007550:	429e      	cmp	r6, r3
 8007552:	6841      	ldr	r1, [r0, #4]
 8007554:	d94f      	bls.n	80075f6 <_dtoa_r+0x316>
 8007556:	4628      	mov	r0, r5
 8007558:	f000 fcd8 	bl	8007f0c <_Balloc>
 800755c:	9008      	str	r0, [sp, #32]
 800755e:	2800      	cmp	r0, #0
 8007560:	d14d      	bne.n	80075fe <_dtoa_r+0x31e>
 8007562:	4602      	mov	r2, r0
 8007564:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007568:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <_dtoa_r+0x300>)
 800756a:	e6cd      	b.n	8007308 <_dtoa_r+0x28>
 800756c:	2301      	movs	r3, #1
 800756e:	e7de      	b.n	800752e <_dtoa_r+0x24e>
 8007570:	2300      	movs	r3, #0
 8007572:	930b      	str	r3, [sp, #44]	; 0x2c
 8007574:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007576:	eb09 0b03 	add.w	fp, r9, r3
 800757a:	f10b 0301 	add.w	r3, fp, #1
 800757e:	2b01      	cmp	r3, #1
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	bfb8      	it	lt
 8007584:	2301      	movlt	r3, #1
 8007586:	e7dd      	b.n	8007544 <_dtoa_r+0x264>
 8007588:	2301      	movs	r3, #1
 800758a:	e7f2      	b.n	8007572 <_dtoa_r+0x292>
 800758c:	2401      	movs	r4, #1
 800758e:	2300      	movs	r3, #0
 8007590:	940b      	str	r4, [sp, #44]	; 0x2c
 8007592:	9322      	str	r3, [sp, #136]	; 0x88
 8007594:	f04f 3bff 	mov.w	fp, #4294967295
 8007598:	2200      	movs	r2, #0
 800759a:	2312      	movs	r3, #18
 800759c:	f8cd b008 	str.w	fp, [sp, #8]
 80075a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80075a2:	e7cf      	b.n	8007544 <_dtoa_r+0x264>
 80075a4:	f3af 8000 	nop.w
 80075a8:	636f4361 	.word	0x636f4361
 80075ac:	3fd287a7 	.word	0x3fd287a7
 80075b0:	8b60c8b3 	.word	0x8b60c8b3
 80075b4:	3fc68a28 	.word	0x3fc68a28
 80075b8:	509f79fb 	.word	0x509f79fb
 80075bc:	3fd34413 	.word	0x3fd34413
 80075c0:	0800aba5 	.word	0x0800aba5
 80075c4:	0800abbc 	.word	0x0800abbc
 80075c8:	7ff00000 	.word	0x7ff00000
 80075cc:	0800aba1 	.word	0x0800aba1
 80075d0:	0800ab98 	.word	0x0800ab98
 80075d4:	0800ab75 	.word	0x0800ab75
 80075d8:	3ff80000 	.word	0x3ff80000
 80075dc:	0800acb8 	.word	0x0800acb8
 80075e0:	0800ac1b 	.word	0x0800ac1b
 80075e4:	2301      	movs	r3, #1
 80075e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075e8:	e7d4      	b.n	8007594 <_dtoa_r+0x2b4>
 80075ea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80075ee:	465b      	mov	r3, fp
 80075f0:	f8cd b008 	str.w	fp, [sp, #8]
 80075f4:	e7a6      	b.n	8007544 <_dtoa_r+0x264>
 80075f6:	3101      	adds	r1, #1
 80075f8:	6041      	str	r1, [r0, #4]
 80075fa:	0052      	lsls	r2, r2, #1
 80075fc:	e7a6      	b.n	800754c <_dtoa_r+0x26c>
 80075fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007600:	9a08      	ldr	r2, [sp, #32]
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	9b02      	ldr	r3, [sp, #8]
 8007606:	2b0e      	cmp	r3, #14
 8007608:	f200 80a8 	bhi.w	800775c <_dtoa_r+0x47c>
 800760c:	2c00      	cmp	r4, #0
 800760e:	f000 80a5 	beq.w	800775c <_dtoa_r+0x47c>
 8007612:	f1b9 0f00 	cmp.w	r9, #0
 8007616:	dd34      	ble.n	8007682 <_dtoa_r+0x3a2>
 8007618:	4a9a      	ldr	r2, [pc, #616]	; (8007884 <_dtoa_r+0x5a4>)
 800761a:	f009 030f 	and.w	r3, r9, #15
 800761e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007622:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007626:	e9d3 3400 	ldrd	r3, r4, [r3]
 800762a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800762e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007632:	d016      	beq.n	8007662 <_dtoa_r+0x382>
 8007634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007638:	4b93      	ldr	r3, [pc, #588]	; (8007888 <_dtoa_r+0x5a8>)
 800763a:	2703      	movs	r7, #3
 800763c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007640:	f7f9 f884 	bl	800074c <__aeabi_ddiv>
 8007644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007648:	f004 040f 	and.w	r4, r4, #15
 800764c:	4e8e      	ldr	r6, [pc, #568]	; (8007888 <_dtoa_r+0x5a8>)
 800764e:	b954      	cbnz	r4, 8007666 <_dtoa_r+0x386>
 8007650:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007654:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007658:	f7f9 f878 	bl	800074c <__aeabi_ddiv>
 800765c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007660:	e029      	b.n	80076b6 <_dtoa_r+0x3d6>
 8007662:	2702      	movs	r7, #2
 8007664:	e7f2      	b.n	800764c <_dtoa_r+0x36c>
 8007666:	07e1      	lsls	r1, r4, #31
 8007668:	d508      	bpl.n	800767c <_dtoa_r+0x39c>
 800766a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800766e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007672:	f7f8 ff41 	bl	80004f8 <__aeabi_dmul>
 8007676:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800767a:	3701      	adds	r7, #1
 800767c:	1064      	asrs	r4, r4, #1
 800767e:	3608      	adds	r6, #8
 8007680:	e7e5      	b.n	800764e <_dtoa_r+0x36e>
 8007682:	f000 80a5 	beq.w	80077d0 <_dtoa_r+0x4f0>
 8007686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800768a:	f1c9 0400 	rsb	r4, r9, #0
 800768e:	4b7d      	ldr	r3, [pc, #500]	; (8007884 <_dtoa_r+0x5a4>)
 8007690:	f004 020f 	and.w	r2, r4, #15
 8007694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769c:	f7f8 ff2c 	bl	80004f8 <__aeabi_dmul>
 80076a0:	2702      	movs	r7, #2
 80076a2:	2300      	movs	r3, #0
 80076a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076a8:	4e77      	ldr	r6, [pc, #476]	; (8007888 <_dtoa_r+0x5a8>)
 80076aa:	1124      	asrs	r4, r4, #4
 80076ac:	2c00      	cmp	r4, #0
 80076ae:	f040 8084 	bne.w	80077ba <_dtoa_r+0x4da>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1d2      	bne.n	800765c <_dtoa_r+0x37c>
 80076b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 808b 	beq.w	80077d4 <_dtoa_r+0x4f4>
 80076be:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80076c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80076c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076ca:	2200      	movs	r2, #0
 80076cc:	4b6f      	ldr	r3, [pc, #444]	; (800788c <_dtoa_r+0x5ac>)
 80076ce:	f7f9 f985 	bl	80009dc <__aeabi_dcmplt>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d07e      	beq.n	80077d4 <_dtoa_r+0x4f4>
 80076d6:	9b02      	ldr	r3, [sp, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d07b      	beq.n	80077d4 <_dtoa_r+0x4f4>
 80076dc:	f1bb 0f00 	cmp.w	fp, #0
 80076e0:	dd38      	ble.n	8007754 <_dtoa_r+0x474>
 80076e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076e6:	2200      	movs	r2, #0
 80076e8:	4b69      	ldr	r3, [pc, #420]	; (8007890 <_dtoa_r+0x5b0>)
 80076ea:	f7f8 ff05 	bl	80004f8 <__aeabi_dmul>
 80076ee:	465c      	mov	r4, fp
 80076f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076f4:	f109 38ff 	add.w	r8, r9, #4294967295
 80076f8:	3701      	adds	r7, #1
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7f8 fe92 	bl	8000424 <__aeabi_i2d>
 8007700:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007704:	f7f8 fef8 	bl	80004f8 <__aeabi_dmul>
 8007708:	2200      	movs	r2, #0
 800770a:	4b62      	ldr	r3, [pc, #392]	; (8007894 <_dtoa_r+0x5b4>)
 800770c:	f7f8 fd3e 	bl	800018c <__adddf3>
 8007710:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007714:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007718:	9611      	str	r6, [sp, #68]	; 0x44
 800771a:	2c00      	cmp	r4, #0
 800771c:	d15d      	bne.n	80077da <_dtoa_r+0x4fa>
 800771e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007722:	2200      	movs	r2, #0
 8007724:	4b5c      	ldr	r3, [pc, #368]	; (8007898 <_dtoa_r+0x5b8>)
 8007726:	f7f8 fd2f 	bl	8000188 <__aeabi_dsub>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007732:	4633      	mov	r3, r6
 8007734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007736:	f7f9 f96f 	bl	8000a18 <__aeabi_dcmpgt>
 800773a:	2800      	cmp	r0, #0
 800773c:	f040 829e 	bne.w	8007c7c <_dtoa_r+0x99c>
 8007740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007746:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800774a:	f7f9 f947 	bl	80009dc <__aeabi_dcmplt>
 800774e:	2800      	cmp	r0, #0
 8007750:	f040 8292 	bne.w	8007c78 <_dtoa_r+0x998>
 8007754:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007758:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800775c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800775e:	2b00      	cmp	r3, #0
 8007760:	f2c0 8153 	blt.w	8007a0a <_dtoa_r+0x72a>
 8007764:	f1b9 0f0e 	cmp.w	r9, #14
 8007768:	f300 814f 	bgt.w	8007a0a <_dtoa_r+0x72a>
 800776c:	4b45      	ldr	r3, [pc, #276]	; (8007884 <_dtoa_r+0x5a4>)
 800776e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007772:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007776:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800777a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800777c:	2b00      	cmp	r3, #0
 800777e:	f280 80db 	bge.w	8007938 <_dtoa_r+0x658>
 8007782:	9b02      	ldr	r3, [sp, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f300 80d7 	bgt.w	8007938 <_dtoa_r+0x658>
 800778a:	f040 8274 	bne.w	8007c76 <_dtoa_r+0x996>
 800778e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007792:	2200      	movs	r2, #0
 8007794:	4b40      	ldr	r3, [pc, #256]	; (8007898 <_dtoa_r+0x5b8>)
 8007796:	f7f8 feaf 	bl	80004f8 <__aeabi_dmul>
 800779a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800779e:	f7f9 f931 	bl	8000a04 <__aeabi_dcmpge>
 80077a2:	9c02      	ldr	r4, [sp, #8]
 80077a4:	4626      	mov	r6, r4
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f040 824a 	bne.w	8007c40 <_dtoa_r+0x960>
 80077ac:	2331      	movs	r3, #49	; 0x31
 80077ae:	9f08      	ldr	r7, [sp, #32]
 80077b0:	f109 0901 	add.w	r9, r9, #1
 80077b4:	f807 3b01 	strb.w	r3, [r7], #1
 80077b8:	e246      	b.n	8007c48 <_dtoa_r+0x968>
 80077ba:	07e2      	lsls	r2, r4, #31
 80077bc:	d505      	bpl.n	80077ca <_dtoa_r+0x4ea>
 80077be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077c2:	f7f8 fe99 	bl	80004f8 <__aeabi_dmul>
 80077c6:	2301      	movs	r3, #1
 80077c8:	3701      	adds	r7, #1
 80077ca:	1064      	asrs	r4, r4, #1
 80077cc:	3608      	adds	r6, #8
 80077ce:	e76d      	b.n	80076ac <_dtoa_r+0x3cc>
 80077d0:	2702      	movs	r7, #2
 80077d2:	e770      	b.n	80076b6 <_dtoa_r+0x3d6>
 80077d4:	46c8      	mov	r8, r9
 80077d6:	9c02      	ldr	r4, [sp, #8]
 80077d8:	e78f      	b.n	80076fa <_dtoa_r+0x41a>
 80077da:	9908      	ldr	r1, [sp, #32]
 80077dc:	4b29      	ldr	r3, [pc, #164]	; (8007884 <_dtoa_r+0x5a4>)
 80077de:	4421      	add	r1, r4
 80077e0:	9112      	str	r1, [sp, #72]	; 0x48
 80077e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077e8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80077ec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077f0:	2900      	cmp	r1, #0
 80077f2:	d055      	beq.n	80078a0 <_dtoa_r+0x5c0>
 80077f4:	2000      	movs	r0, #0
 80077f6:	4929      	ldr	r1, [pc, #164]	; (800789c <_dtoa_r+0x5bc>)
 80077f8:	f7f8 ffa8 	bl	800074c <__aeabi_ddiv>
 80077fc:	463b      	mov	r3, r7
 80077fe:	4632      	mov	r2, r6
 8007800:	f7f8 fcc2 	bl	8000188 <__aeabi_dsub>
 8007804:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007808:	9f08      	ldr	r7, [sp, #32]
 800780a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800780e:	f7f9 f923 	bl	8000a58 <__aeabi_d2iz>
 8007812:	4604      	mov	r4, r0
 8007814:	f7f8 fe06 	bl	8000424 <__aeabi_i2d>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007820:	f7f8 fcb2 	bl	8000188 <__aeabi_dsub>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	3430      	adds	r4, #48	; 0x30
 800782a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800782e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007832:	f807 4b01 	strb.w	r4, [r7], #1
 8007836:	f7f9 f8d1 	bl	80009dc <__aeabi_dcmplt>
 800783a:	2800      	cmp	r0, #0
 800783c:	d174      	bne.n	8007928 <_dtoa_r+0x648>
 800783e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007842:	2000      	movs	r0, #0
 8007844:	4911      	ldr	r1, [pc, #68]	; (800788c <_dtoa_r+0x5ac>)
 8007846:	f7f8 fc9f 	bl	8000188 <__aeabi_dsub>
 800784a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800784e:	f7f9 f8c5 	bl	80009dc <__aeabi_dcmplt>
 8007852:	2800      	cmp	r0, #0
 8007854:	f040 80b6 	bne.w	80079c4 <_dtoa_r+0x6e4>
 8007858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800785a:	429f      	cmp	r7, r3
 800785c:	f43f af7a 	beq.w	8007754 <_dtoa_r+0x474>
 8007860:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007864:	2200      	movs	r2, #0
 8007866:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <_dtoa_r+0x5b0>)
 8007868:	f7f8 fe46 	bl	80004f8 <__aeabi_dmul>
 800786c:	2200      	movs	r2, #0
 800786e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007876:	4b06      	ldr	r3, [pc, #24]	; (8007890 <_dtoa_r+0x5b0>)
 8007878:	f7f8 fe3e 	bl	80004f8 <__aeabi_dmul>
 800787c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007880:	e7c3      	b.n	800780a <_dtoa_r+0x52a>
 8007882:	bf00      	nop
 8007884:	0800acb8 	.word	0x0800acb8
 8007888:	0800ac90 	.word	0x0800ac90
 800788c:	3ff00000 	.word	0x3ff00000
 8007890:	40240000 	.word	0x40240000
 8007894:	401c0000 	.word	0x401c0000
 8007898:	40140000 	.word	0x40140000
 800789c:	3fe00000 	.word	0x3fe00000
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f8 fe28 	bl	80004f8 <__aeabi_dmul>
 80078a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078ae:	9c08      	ldr	r4, [sp, #32]
 80078b0:	9314      	str	r3, [sp, #80]	; 0x50
 80078b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b6:	f7f9 f8cf 	bl	8000a58 <__aeabi_d2iz>
 80078ba:	9015      	str	r0, [sp, #84]	; 0x54
 80078bc:	f7f8 fdb2 	bl	8000424 <__aeabi_i2d>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078c8:	f7f8 fc5e 	bl	8000188 <__aeabi_dsub>
 80078cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ce:	4606      	mov	r6, r0
 80078d0:	3330      	adds	r3, #48	; 0x30
 80078d2:	f804 3b01 	strb.w	r3, [r4], #1
 80078d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078d8:	460f      	mov	r7, r1
 80078da:	429c      	cmp	r4, r3
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	d124      	bne.n	800792c <_dtoa_r+0x64c>
 80078e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078e6:	4bb3      	ldr	r3, [pc, #716]	; (8007bb4 <_dtoa_r+0x8d4>)
 80078e8:	f7f8 fc50 	bl	800018c <__adddf3>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4630      	mov	r0, r6
 80078f2:	4639      	mov	r1, r7
 80078f4:	f7f9 f890 	bl	8000a18 <__aeabi_dcmpgt>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d162      	bne.n	80079c2 <_dtoa_r+0x6e2>
 80078fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007900:	2000      	movs	r0, #0
 8007902:	49ac      	ldr	r1, [pc, #688]	; (8007bb4 <_dtoa_r+0x8d4>)
 8007904:	f7f8 fc40 	bl	8000188 <__aeabi_dsub>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4630      	mov	r0, r6
 800790e:	4639      	mov	r1, r7
 8007910:	f7f9 f864 	bl	80009dc <__aeabi_dcmplt>
 8007914:	2800      	cmp	r0, #0
 8007916:	f43f af1d 	beq.w	8007754 <_dtoa_r+0x474>
 800791a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800791c:	1e7b      	subs	r3, r7, #1
 800791e:	9314      	str	r3, [sp, #80]	; 0x50
 8007920:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007924:	2b30      	cmp	r3, #48	; 0x30
 8007926:	d0f8      	beq.n	800791a <_dtoa_r+0x63a>
 8007928:	46c1      	mov	r9, r8
 800792a:	e03a      	b.n	80079a2 <_dtoa_r+0x6c2>
 800792c:	4ba2      	ldr	r3, [pc, #648]	; (8007bb8 <_dtoa_r+0x8d8>)
 800792e:	f7f8 fde3 	bl	80004f8 <__aeabi_dmul>
 8007932:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007936:	e7bc      	b.n	80078b2 <_dtoa_r+0x5d2>
 8007938:	9f08      	ldr	r7, [sp, #32]
 800793a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800793e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007942:	f7f8 ff03 	bl	800074c <__aeabi_ddiv>
 8007946:	f7f9 f887 	bl	8000a58 <__aeabi_d2iz>
 800794a:	4604      	mov	r4, r0
 800794c:	f7f8 fd6a 	bl	8000424 <__aeabi_i2d>
 8007950:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007954:	f7f8 fdd0 	bl	80004f8 <__aeabi_dmul>
 8007958:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800795c:	460b      	mov	r3, r1
 800795e:	4602      	mov	r2, r0
 8007960:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007964:	f7f8 fc10 	bl	8000188 <__aeabi_dsub>
 8007968:	f807 6b01 	strb.w	r6, [r7], #1
 800796c:	9e08      	ldr	r6, [sp, #32]
 800796e:	9b02      	ldr	r3, [sp, #8]
 8007970:	1bbe      	subs	r6, r7, r6
 8007972:	42b3      	cmp	r3, r6
 8007974:	d13a      	bne.n	80079ec <_dtoa_r+0x70c>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	f7f8 fc07 	bl	800018c <__adddf3>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800798a:	f7f9 f845 	bl	8000a18 <__aeabi_dcmpgt>
 800798e:	bb58      	cbnz	r0, 80079e8 <_dtoa_r+0x708>
 8007990:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007998:	f7f9 f816 	bl	80009c8 <__aeabi_dcmpeq>
 800799c:	b108      	cbz	r0, 80079a2 <_dtoa_r+0x6c2>
 800799e:	07e1      	lsls	r1, r4, #31
 80079a0:	d422      	bmi.n	80079e8 <_dtoa_r+0x708>
 80079a2:	4628      	mov	r0, r5
 80079a4:	4651      	mov	r1, sl
 80079a6:	f000 faf1 	bl	8007f8c <_Bfree>
 80079aa:	2300      	movs	r3, #0
 80079ac:	703b      	strb	r3, [r7, #0]
 80079ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80079b0:	f109 0001 	add.w	r0, r9, #1
 80079b4:	6018      	str	r0, [r3, #0]
 80079b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f43f acdf 	beq.w	800737c <_dtoa_r+0x9c>
 80079be:	601f      	str	r7, [r3, #0]
 80079c0:	e4dc      	b.n	800737c <_dtoa_r+0x9c>
 80079c2:	4627      	mov	r7, r4
 80079c4:	463b      	mov	r3, r7
 80079c6:	461f      	mov	r7, r3
 80079c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079cc:	2a39      	cmp	r2, #57	; 0x39
 80079ce:	d107      	bne.n	80079e0 <_dtoa_r+0x700>
 80079d0:	9a08      	ldr	r2, [sp, #32]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d1f7      	bne.n	80079c6 <_dtoa_r+0x6e6>
 80079d6:	2230      	movs	r2, #48	; 0x30
 80079d8:	9908      	ldr	r1, [sp, #32]
 80079da:	f108 0801 	add.w	r8, r8, #1
 80079de:	700a      	strb	r2, [r1, #0]
 80079e0:	781a      	ldrb	r2, [r3, #0]
 80079e2:	3201      	adds	r2, #1
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e79f      	b.n	8007928 <_dtoa_r+0x648>
 80079e8:	46c8      	mov	r8, r9
 80079ea:	e7eb      	b.n	80079c4 <_dtoa_r+0x6e4>
 80079ec:	2200      	movs	r2, #0
 80079ee:	4b72      	ldr	r3, [pc, #456]	; (8007bb8 <_dtoa_r+0x8d8>)
 80079f0:	f7f8 fd82 	bl	80004f8 <__aeabi_dmul>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079fc:	2200      	movs	r2, #0
 80079fe:	2300      	movs	r3, #0
 8007a00:	f7f8 ffe2 	bl	80009c8 <__aeabi_dcmpeq>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d098      	beq.n	800793a <_dtoa_r+0x65a>
 8007a08:	e7cb      	b.n	80079a2 <_dtoa_r+0x6c2>
 8007a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	f000 80cd 	beq.w	8007bac <_dtoa_r+0x8cc>
 8007a12:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a14:	2a01      	cmp	r2, #1
 8007a16:	f300 80af 	bgt.w	8007b78 <_dtoa_r+0x898>
 8007a1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a1c:	2a00      	cmp	r2, #0
 8007a1e:	f000 80a7 	beq.w	8007b70 <_dtoa_r+0x890>
 8007a22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a28:	9f06      	ldr	r7, [sp, #24]
 8007a2a:	9a06      	ldr	r2, [sp, #24]
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	441a      	add	r2, r3
 8007a30:	9206      	str	r2, [sp, #24]
 8007a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a34:	4628      	mov	r0, r5
 8007a36:	441a      	add	r2, r3
 8007a38:	9209      	str	r2, [sp, #36]	; 0x24
 8007a3a:	f000 fb61 	bl	8008100 <__i2b>
 8007a3e:	4606      	mov	r6, r0
 8007a40:	2f00      	cmp	r7, #0
 8007a42:	dd0c      	ble.n	8007a5e <_dtoa_r+0x77e>
 8007a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	dd09      	ble.n	8007a5e <_dtoa_r+0x77e>
 8007a4a:	42bb      	cmp	r3, r7
 8007a4c:	bfa8      	it	ge
 8007a4e:	463b      	movge	r3, r7
 8007a50:	9a06      	ldr	r2, [sp, #24]
 8007a52:	1aff      	subs	r7, r7, r3
 8007a54:	1ad2      	subs	r2, r2, r3
 8007a56:	9206      	str	r2, [sp, #24]
 8007a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a60:	b1f3      	cbz	r3, 8007aa0 <_dtoa_r+0x7c0>
 8007a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 80a9 	beq.w	8007bbc <_dtoa_r+0x8dc>
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	dd10      	ble.n	8007a90 <_dtoa_r+0x7b0>
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4622      	mov	r2, r4
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 fbfe 	bl	8008274 <__pow5mult>
 8007a78:	4652      	mov	r2, sl
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 fb54 	bl	800812c <__multiply>
 8007a84:	4680      	mov	r8, r0
 8007a86:	4651      	mov	r1, sl
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 fa7f 	bl	8007f8c <_Bfree>
 8007a8e:	46c2      	mov	sl, r8
 8007a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a92:	1b1a      	subs	r2, r3, r4
 8007a94:	d004      	beq.n	8007aa0 <_dtoa_r+0x7c0>
 8007a96:	4651      	mov	r1, sl
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 fbeb 	bl	8008274 <__pow5mult>
 8007a9e:	4682      	mov	sl, r0
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f000 fb2c 	bl	8008100 <__i2b>
 8007aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aaa:	4604      	mov	r4, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f340 8087 	ble.w	8007bc0 <_dtoa_r+0x8e0>
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f000 fbdc 	bl	8008274 <__pow5mult>
 8007abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007abe:	4604      	mov	r4, r0
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	f340 8080 	ble.w	8007bc6 <_dtoa_r+0x8e6>
 8007ac6:	f04f 0800 	mov.w	r8, #0
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ad0:	6918      	ldr	r0, [r3, #16]
 8007ad2:	f000 fac7 	bl	8008064 <__hi0bits>
 8007ad6:	f1c0 0020 	rsb	r0, r0, #32
 8007ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007adc:	4418      	add	r0, r3
 8007ade:	f010 001f 	ands.w	r0, r0, #31
 8007ae2:	f000 8092 	beq.w	8007c0a <_dtoa_r+0x92a>
 8007ae6:	f1c0 0320 	rsb	r3, r0, #32
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	f340 808a 	ble.w	8007c04 <_dtoa_r+0x924>
 8007af0:	f1c0 001c 	rsb	r0, r0, #28
 8007af4:	9b06      	ldr	r3, [sp, #24]
 8007af6:	4407      	add	r7, r0
 8007af8:	4403      	add	r3, r0
 8007afa:	9306      	str	r3, [sp, #24]
 8007afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afe:	4403      	add	r3, r0
 8007b00:	9309      	str	r3, [sp, #36]	; 0x24
 8007b02:	9b06      	ldr	r3, [sp, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dd05      	ble.n	8007b14 <_dtoa_r+0x834>
 8007b08:	4651      	mov	r1, sl
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f000 fc0b 	bl	8008328 <__lshift>
 8007b12:	4682      	mov	sl, r0
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	dd05      	ble.n	8007b26 <_dtoa_r+0x846>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 fc02 	bl	8008328 <__lshift>
 8007b24:	4604      	mov	r4, r0
 8007b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d070      	beq.n	8007c0e <_dtoa_r+0x92e>
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4650      	mov	r0, sl
 8007b30:	f000 fc66 	bl	8008400 <__mcmp>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	da6a      	bge.n	8007c0e <_dtoa_r+0x92e>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4651      	mov	r1, sl
 8007b3c:	220a      	movs	r2, #10
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 fa46 	bl	8007fd0 <__multadd>
 8007b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b46:	4682      	mov	sl, r0
 8007b48:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8193 	beq.w	8007e78 <_dtoa_r+0xb98>
 8007b52:	4631      	mov	r1, r6
 8007b54:	2300      	movs	r3, #0
 8007b56:	220a      	movs	r2, #10
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 fa39 	bl	8007fd0 <__multadd>
 8007b5e:	f1bb 0f00 	cmp.w	fp, #0
 8007b62:	4606      	mov	r6, r0
 8007b64:	f300 8093 	bgt.w	8007c8e <_dtoa_r+0x9ae>
 8007b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	dc57      	bgt.n	8007c1e <_dtoa_r+0x93e>
 8007b6e:	e08e      	b.n	8007c8e <_dtoa_r+0x9ae>
 8007b70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b76:	e756      	b.n	8007a26 <_dtoa_r+0x746>
 8007b78:	9b02      	ldr	r3, [sp, #8]
 8007b7a:	1e5c      	subs	r4, r3, #1
 8007b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7e:	42a3      	cmp	r3, r4
 8007b80:	bfb7      	itett	lt
 8007b82:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b84:	1b1c      	subge	r4, r3, r4
 8007b86:	1ae2      	sublt	r2, r4, r3
 8007b88:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007b8a:	bfbe      	ittt	lt
 8007b8c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007b8e:	189b      	addlt	r3, r3, r2
 8007b90:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007b92:	9b02      	ldr	r3, [sp, #8]
 8007b94:	bfb8      	it	lt
 8007b96:	2400      	movlt	r4, #0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bfbb      	ittet	lt
 8007b9c:	9b06      	ldrlt	r3, [sp, #24]
 8007b9e:	9a02      	ldrlt	r2, [sp, #8]
 8007ba0:	9f06      	ldrge	r7, [sp, #24]
 8007ba2:	1a9f      	sublt	r7, r3, r2
 8007ba4:	bfac      	ite	ge
 8007ba6:	9b02      	ldrge	r3, [sp, #8]
 8007ba8:	2300      	movlt	r3, #0
 8007baa:	e73e      	b.n	8007a2a <_dtoa_r+0x74a>
 8007bac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bae:	9f06      	ldr	r7, [sp, #24]
 8007bb0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007bb2:	e745      	b.n	8007a40 <_dtoa_r+0x760>
 8007bb4:	3fe00000 	.word	0x3fe00000
 8007bb8:	40240000 	.word	0x40240000
 8007bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bbe:	e76a      	b.n	8007a96 <_dtoa_r+0x7b6>
 8007bc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	dc19      	bgt.n	8007bfa <_dtoa_r+0x91a>
 8007bc6:	9b04      	ldr	r3, [sp, #16]
 8007bc8:	b9bb      	cbnz	r3, 8007bfa <_dtoa_r+0x91a>
 8007bca:	9b05      	ldr	r3, [sp, #20]
 8007bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bd0:	b99b      	cbnz	r3, 8007bfa <_dtoa_r+0x91a>
 8007bd2:	9b05      	ldr	r3, [sp, #20]
 8007bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bd8:	0d1b      	lsrs	r3, r3, #20
 8007bda:	051b      	lsls	r3, r3, #20
 8007bdc:	b183      	cbz	r3, 8007c00 <_dtoa_r+0x920>
 8007bde:	f04f 0801 	mov.w	r8, #1
 8007be2:	9b06      	ldr	r3, [sp, #24]
 8007be4:	3301      	adds	r3, #1
 8007be6:	9306      	str	r3, [sp, #24]
 8007be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bea:	3301      	adds	r3, #1
 8007bec:	9309      	str	r3, [sp, #36]	; 0x24
 8007bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f47f af6a 	bne.w	8007aca <_dtoa_r+0x7ea>
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e76f      	b.n	8007ada <_dtoa_r+0x7fa>
 8007bfa:	f04f 0800 	mov.w	r8, #0
 8007bfe:	e7f6      	b.n	8007bee <_dtoa_r+0x90e>
 8007c00:	4698      	mov	r8, r3
 8007c02:	e7f4      	b.n	8007bee <_dtoa_r+0x90e>
 8007c04:	f43f af7d 	beq.w	8007b02 <_dtoa_r+0x822>
 8007c08:	4618      	mov	r0, r3
 8007c0a:	301c      	adds	r0, #28
 8007c0c:	e772      	b.n	8007af4 <_dtoa_r+0x814>
 8007c0e:	9b02      	ldr	r3, [sp, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dc36      	bgt.n	8007c82 <_dtoa_r+0x9a2>
 8007c14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	dd33      	ble.n	8007c82 <_dtoa_r+0x9a2>
 8007c1a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007c1e:	f1bb 0f00 	cmp.w	fp, #0
 8007c22:	d10d      	bne.n	8007c40 <_dtoa_r+0x960>
 8007c24:	4621      	mov	r1, r4
 8007c26:	465b      	mov	r3, fp
 8007c28:	2205      	movs	r2, #5
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f000 f9d0 	bl	8007fd0 <__multadd>
 8007c30:	4601      	mov	r1, r0
 8007c32:	4604      	mov	r4, r0
 8007c34:	4650      	mov	r0, sl
 8007c36:	f000 fbe3 	bl	8008400 <__mcmp>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	f73f adb6 	bgt.w	80077ac <_dtoa_r+0x4cc>
 8007c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c42:	9f08      	ldr	r7, [sp, #32]
 8007c44:	ea6f 0903 	mvn.w	r9, r3
 8007c48:	f04f 0800 	mov.w	r8, #0
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 f99c 	bl	8007f8c <_Bfree>
 8007c54:	2e00      	cmp	r6, #0
 8007c56:	f43f aea4 	beq.w	80079a2 <_dtoa_r+0x6c2>
 8007c5a:	f1b8 0f00 	cmp.w	r8, #0
 8007c5e:	d005      	beq.n	8007c6c <_dtoa_r+0x98c>
 8007c60:	45b0      	cmp	r8, r6
 8007c62:	d003      	beq.n	8007c6c <_dtoa_r+0x98c>
 8007c64:	4641      	mov	r1, r8
 8007c66:	4628      	mov	r0, r5
 8007c68:	f000 f990 	bl	8007f8c <_Bfree>
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 f98c 	bl	8007f8c <_Bfree>
 8007c74:	e695      	b.n	80079a2 <_dtoa_r+0x6c2>
 8007c76:	2400      	movs	r4, #0
 8007c78:	4626      	mov	r6, r4
 8007c7a:	e7e1      	b.n	8007c40 <_dtoa_r+0x960>
 8007c7c:	46c1      	mov	r9, r8
 8007c7e:	4626      	mov	r6, r4
 8007c80:	e594      	b.n	80077ac <_dtoa_r+0x4cc>
 8007c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c84:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80fc 	beq.w	8007e86 <_dtoa_r+0xba6>
 8007c8e:	2f00      	cmp	r7, #0
 8007c90:	dd05      	ble.n	8007c9e <_dtoa_r+0x9be>
 8007c92:	4631      	mov	r1, r6
 8007c94:	463a      	mov	r2, r7
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 fb46 	bl	8008328 <__lshift>
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ca2:	d05c      	beq.n	8007d5e <_dtoa_r+0xa7e>
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	6871      	ldr	r1, [r6, #4]
 8007ca8:	f000 f930 	bl	8007f0c <_Balloc>
 8007cac:	4607      	mov	r7, r0
 8007cae:	b928      	cbnz	r0, 8007cbc <_dtoa_r+0x9dc>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007cb6:	4b7e      	ldr	r3, [pc, #504]	; (8007eb0 <_dtoa_r+0xbd0>)
 8007cb8:	f7ff bb26 	b.w	8007308 <_dtoa_r+0x28>
 8007cbc:	6932      	ldr	r2, [r6, #16]
 8007cbe:	f106 010c 	add.w	r1, r6, #12
 8007cc2:	3202      	adds	r2, #2
 8007cc4:	0092      	lsls	r2, r2, #2
 8007cc6:	300c      	adds	r0, #12
 8007cc8:	f000 f912 	bl	8007ef0 <memcpy>
 8007ccc:	2201      	movs	r2, #1
 8007cce:	4639      	mov	r1, r7
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f000 fb29 	bl	8008328 <__lshift>
 8007cd6:	46b0      	mov	r8, r6
 8007cd8:	4606      	mov	r6, r0
 8007cda:	9b08      	ldr	r3, [sp, #32]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	9302      	str	r3, [sp, #8]
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	445b      	add	r3, fp
 8007ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ce6:	9b04      	ldr	r3, [sp, #16]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	9b02      	ldr	r3, [sp, #8]
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	f103 3bff 	add.w	fp, r3, #4294967295
 8007cf8:	f7ff fa62 	bl	80071c0 <quorem>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	4641      	mov	r1, r8
 8007d00:	3330      	adds	r3, #48	; 0x30
 8007d02:	9004      	str	r0, [sp, #16]
 8007d04:	4650      	mov	r0, sl
 8007d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d08:	f000 fb7a 	bl	8008400 <__mcmp>
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	9006      	str	r0, [sp, #24]
 8007d10:	4621      	mov	r1, r4
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 fb90 	bl	8008438 <__mdiff>
 8007d18:	68c2      	ldr	r2, [r0, #12]
 8007d1a:	4607      	mov	r7, r0
 8007d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d1e:	bb02      	cbnz	r2, 8007d62 <_dtoa_r+0xa82>
 8007d20:	4601      	mov	r1, r0
 8007d22:	4650      	mov	r0, sl
 8007d24:	f000 fb6c 	bl	8008400 <__mcmp>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	4628      	mov	r0, r5
 8007d30:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007d34:	f000 f92a 	bl	8007f8c <_Bfree>
 8007d38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d3c:	9f02      	ldr	r7, [sp, #8]
 8007d3e:	ea43 0102 	orr.w	r1, r3, r2
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	430b      	orrs	r3, r1
 8007d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d48:	d10d      	bne.n	8007d66 <_dtoa_r+0xa86>
 8007d4a:	2b39      	cmp	r3, #57	; 0x39
 8007d4c:	d027      	beq.n	8007d9e <_dtoa_r+0xabe>
 8007d4e:	9a06      	ldr	r2, [sp, #24]
 8007d50:	2a00      	cmp	r2, #0
 8007d52:	dd01      	ble.n	8007d58 <_dtoa_r+0xa78>
 8007d54:	9b04      	ldr	r3, [sp, #16]
 8007d56:	3331      	adds	r3, #49	; 0x31
 8007d58:	f88b 3000 	strb.w	r3, [fp]
 8007d5c:	e776      	b.n	8007c4c <_dtoa_r+0x96c>
 8007d5e:	4630      	mov	r0, r6
 8007d60:	e7b9      	b.n	8007cd6 <_dtoa_r+0x9f6>
 8007d62:	2201      	movs	r2, #1
 8007d64:	e7e2      	b.n	8007d2c <_dtoa_r+0xa4c>
 8007d66:	9906      	ldr	r1, [sp, #24]
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	db04      	blt.n	8007d76 <_dtoa_r+0xa96>
 8007d6c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007d6e:	4301      	orrs	r1, r0
 8007d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d72:	4301      	orrs	r1, r0
 8007d74:	d120      	bne.n	8007db8 <_dtoa_r+0xad8>
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	ddee      	ble.n	8007d58 <_dtoa_r+0xa78>
 8007d7a:	4651      	mov	r1, sl
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	4628      	mov	r0, r5
 8007d80:	9302      	str	r3, [sp, #8]
 8007d82:	f000 fad1 	bl	8008328 <__lshift>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4682      	mov	sl, r0
 8007d8a:	f000 fb39 	bl	8008400 <__mcmp>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	dc02      	bgt.n	8007d9a <_dtoa_r+0xaba>
 8007d94:	d1e0      	bne.n	8007d58 <_dtoa_r+0xa78>
 8007d96:	07da      	lsls	r2, r3, #31
 8007d98:	d5de      	bpl.n	8007d58 <_dtoa_r+0xa78>
 8007d9a:	2b39      	cmp	r3, #57	; 0x39
 8007d9c:	d1da      	bne.n	8007d54 <_dtoa_r+0xa74>
 8007d9e:	2339      	movs	r3, #57	; 0x39
 8007da0:	f88b 3000 	strb.w	r3, [fp]
 8007da4:	463b      	mov	r3, r7
 8007da6:	461f      	mov	r7, r3
 8007da8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	2a39      	cmp	r2, #57	; 0x39
 8007db0:	d050      	beq.n	8007e54 <_dtoa_r+0xb74>
 8007db2:	3201      	adds	r2, #1
 8007db4:	701a      	strb	r2, [r3, #0]
 8007db6:	e749      	b.n	8007c4c <_dtoa_r+0x96c>
 8007db8:	2a00      	cmp	r2, #0
 8007dba:	dd03      	ble.n	8007dc4 <_dtoa_r+0xae4>
 8007dbc:	2b39      	cmp	r3, #57	; 0x39
 8007dbe:	d0ee      	beq.n	8007d9e <_dtoa_r+0xabe>
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	e7c9      	b.n	8007d58 <_dtoa_r+0xa78>
 8007dc4:	9a02      	ldr	r2, [sp, #8]
 8007dc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007dc8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007dcc:	428a      	cmp	r2, r1
 8007dce:	d02a      	beq.n	8007e26 <_dtoa_r+0xb46>
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	220a      	movs	r2, #10
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f8fa 	bl	8007fd0 <__multadd>
 8007ddc:	45b0      	cmp	r8, r6
 8007dde:	4682      	mov	sl, r0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	f04f 020a 	mov.w	r2, #10
 8007de8:	4641      	mov	r1, r8
 8007dea:	4628      	mov	r0, r5
 8007dec:	d107      	bne.n	8007dfe <_dtoa_r+0xb1e>
 8007dee:	f000 f8ef 	bl	8007fd0 <__multadd>
 8007df2:	4680      	mov	r8, r0
 8007df4:	4606      	mov	r6, r0
 8007df6:	9b02      	ldr	r3, [sp, #8]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	9302      	str	r3, [sp, #8]
 8007dfc:	e777      	b.n	8007cee <_dtoa_r+0xa0e>
 8007dfe:	f000 f8e7 	bl	8007fd0 <__multadd>
 8007e02:	4631      	mov	r1, r6
 8007e04:	4680      	mov	r8, r0
 8007e06:	2300      	movs	r3, #0
 8007e08:	220a      	movs	r2, #10
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f000 f8e0 	bl	8007fd0 <__multadd>
 8007e10:	4606      	mov	r6, r0
 8007e12:	e7f0      	b.n	8007df6 <_dtoa_r+0xb16>
 8007e14:	f1bb 0f00 	cmp.w	fp, #0
 8007e18:	bfcc      	ite	gt
 8007e1a:	465f      	movgt	r7, fp
 8007e1c:	2701      	movle	r7, #1
 8007e1e:	f04f 0800 	mov.w	r8, #0
 8007e22:	9a08      	ldr	r2, [sp, #32]
 8007e24:	4417      	add	r7, r2
 8007e26:	4651      	mov	r1, sl
 8007e28:	2201      	movs	r2, #1
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	9302      	str	r3, [sp, #8]
 8007e2e:	f000 fa7b 	bl	8008328 <__lshift>
 8007e32:	4621      	mov	r1, r4
 8007e34:	4682      	mov	sl, r0
 8007e36:	f000 fae3 	bl	8008400 <__mcmp>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	dcb2      	bgt.n	8007da4 <_dtoa_r+0xac4>
 8007e3e:	d102      	bne.n	8007e46 <_dtoa_r+0xb66>
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	07db      	lsls	r3, r3, #31
 8007e44:	d4ae      	bmi.n	8007da4 <_dtoa_r+0xac4>
 8007e46:	463b      	mov	r3, r7
 8007e48:	461f      	mov	r7, r3
 8007e4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e4e:	2a30      	cmp	r2, #48	; 0x30
 8007e50:	d0fa      	beq.n	8007e48 <_dtoa_r+0xb68>
 8007e52:	e6fb      	b.n	8007c4c <_dtoa_r+0x96c>
 8007e54:	9a08      	ldr	r2, [sp, #32]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d1a5      	bne.n	8007da6 <_dtoa_r+0xac6>
 8007e5a:	2331      	movs	r3, #49	; 0x31
 8007e5c:	f109 0901 	add.w	r9, r9, #1
 8007e60:	7013      	strb	r3, [r2, #0]
 8007e62:	e6f3      	b.n	8007c4c <_dtoa_r+0x96c>
 8007e64:	4b13      	ldr	r3, [pc, #76]	; (8007eb4 <_dtoa_r+0xbd4>)
 8007e66:	f7ff baa7 	b.w	80073b8 <_dtoa_r+0xd8>
 8007e6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f47f aa80 	bne.w	8007372 <_dtoa_r+0x92>
 8007e72:	4b11      	ldr	r3, [pc, #68]	; (8007eb8 <_dtoa_r+0xbd8>)
 8007e74:	f7ff baa0 	b.w	80073b8 <_dtoa_r+0xd8>
 8007e78:	f1bb 0f00 	cmp.w	fp, #0
 8007e7c:	dc03      	bgt.n	8007e86 <_dtoa_r+0xba6>
 8007e7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	f73f aecc 	bgt.w	8007c1e <_dtoa_r+0x93e>
 8007e86:	9f08      	ldr	r7, [sp, #32]
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	f7ff f998 	bl	80071c0 <quorem>
 8007e90:	9a08      	ldr	r2, [sp, #32]
 8007e92:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007e96:	f807 3b01 	strb.w	r3, [r7], #1
 8007e9a:	1aba      	subs	r2, r7, r2
 8007e9c:	4593      	cmp	fp, r2
 8007e9e:	ddb9      	ble.n	8007e14 <_dtoa_r+0xb34>
 8007ea0:	4651      	mov	r1, sl
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	220a      	movs	r2, #10
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f000 f892 	bl	8007fd0 <__multadd>
 8007eac:	4682      	mov	sl, r0
 8007eae:	e7eb      	b.n	8007e88 <_dtoa_r+0xba8>
 8007eb0:	0800ac1b 	.word	0x0800ac1b
 8007eb4:	0800ab74 	.word	0x0800ab74
 8007eb8:	0800ab98 	.word	0x0800ab98

08007ebc <_localeconv_r>:
 8007ebc:	4800      	ldr	r0, [pc, #0]	; (8007ec0 <_localeconv_r+0x4>)
 8007ebe:	4770      	bx	lr
 8007ec0:	20000180 	.word	0x20000180

08007ec4 <malloc>:
 8007ec4:	4b02      	ldr	r3, [pc, #8]	; (8007ed0 <malloc+0xc>)
 8007ec6:	4601      	mov	r1, r0
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	f000 bbfb 	b.w	80086c4 <_malloc_r>
 8007ece:	bf00      	nop
 8007ed0:	2000002c 	.word	0x2000002c

08007ed4 <memchr>:
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	b2c9      	uxtb	r1, r1
 8007eda:	4402      	add	r2, r0
 8007edc:	4293      	cmp	r3, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	d101      	bne.n	8007ee6 <memchr+0x12>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e003      	b.n	8007eee <memchr+0x1a>
 8007ee6:	7804      	ldrb	r4, [r0, #0]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	428c      	cmp	r4, r1
 8007eec:	d1f6      	bne.n	8007edc <memchr+0x8>
 8007eee:	bd10      	pop	{r4, pc}

08007ef0 <memcpy>:
 8007ef0:	440a      	add	r2, r1
 8007ef2:	4291      	cmp	r1, r2
 8007ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ef8:	d100      	bne.n	8007efc <memcpy+0xc>
 8007efa:	4770      	bx	lr
 8007efc:	b510      	push	{r4, lr}
 8007efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f02:	4291      	cmp	r1, r2
 8007f04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f08:	d1f9      	bne.n	8007efe <memcpy+0xe>
 8007f0a:	bd10      	pop	{r4, pc}

08007f0c <_Balloc>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f10:	4604      	mov	r4, r0
 8007f12:	460d      	mov	r5, r1
 8007f14:	b976      	cbnz	r6, 8007f34 <_Balloc+0x28>
 8007f16:	2010      	movs	r0, #16
 8007f18:	f7ff ffd4 	bl	8007ec4 <malloc>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6260      	str	r0, [r4, #36]	; 0x24
 8007f20:	b920      	cbnz	r0, 8007f2c <_Balloc+0x20>
 8007f22:	2166      	movs	r1, #102	; 0x66
 8007f24:	4b17      	ldr	r3, [pc, #92]	; (8007f84 <_Balloc+0x78>)
 8007f26:	4818      	ldr	r0, [pc, #96]	; (8007f88 <_Balloc+0x7c>)
 8007f28:	f000 fd92 	bl	8008a50 <__assert_func>
 8007f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f30:	6006      	str	r6, [r0, #0]
 8007f32:	60c6      	str	r6, [r0, #12]
 8007f34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f36:	68f3      	ldr	r3, [r6, #12]
 8007f38:	b183      	cbz	r3, 8007f5c <_Balloc+0x50>
 8007f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f42:	b9b8      	cbnz	r0, 8007f74 <_Balloc+0x68>
 8007f44:	2101      	movs	r1, #1
 8007f46:	fa01 f605 	lsl.w	r6, r1, r5
 8007f4a:	1d72      	adds	r2, r6, #5
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	0092      	lsls	r2, r2, #2
 8007f50:	f000 fb5e 	bl	8008610 <_calloc_r>
 8007f54:	b160      	cbz	r0, 8007f70 <_Balloc+0x64>
 8007f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f5a:	e00e      	b.n	8007f7a <_Balloc+0x6e>
 8007f5c:	2221      	movs	r2, #33	; 0x21
 8007f5e:	2104      	movs	r1, #4
 8007f60:	4620      	mov	r0, r4
 8007f62:	f000 fb55 	bl	8008610 <_calloc_r>
 8007f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f68:	60f0      	str	r0, [r6, #12]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e4      	bne.n	8007f3a <_Balloc+0x2e>
 8007f70:	2000      	movs	r0, #0
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
 8007f74:	6802      	ldr	r2, [r0, #0]
 8007f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f80:	e7f7      	b.n	8007f72 <_Balloc+0x66>
 8007f82:	bf00      	nop
 8007f84:	0800aba5 	.word	0x0800aba5
 8007f88:	0800ac2c 	.word	0x0800ac2c

08007f8c <_Bfree>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f90:	4605      	mov	r5, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	b976      	cbnz	r6, 8007fb4 <_Bfree+0x28>
 8007f96:	2010      	movs	r0, #16
 8007f98:	f7ff ff94 	bl	8007ec4 <malloc>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	6268      	str	r0, [r5, #36]	; 0x24
 8007fa0:	b920      	cbnz	r0, 8007fac <_Bfree+0x20>
 8007fa2:	218a      	movs	r1, #138	; 0x8a
 8007fa4:	4b08      	ldr	r3, [pc, #32]	; (8007fc8 <_Bfree+0x3c>)
 8007fa6:	4809      	ldr	r0, [pc, #36]	; (8007fcc <_Bfree+0x40>)
 8007fa8:	f000 fd52 	bl	8008a50 <__assert_func>
 8007fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fb0:	6006      	str	r6, [r0, #0]
 8007fb2:	60c6      	str	r6, [r0, #12]
 8007fb4:	b13c      	cbz	r4, 8007fc6 <_Bfree+0x3a>
 8007fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007fb8:	6862      	ldr	r2, [r4, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fc0:	6021      	str	r1, [r4, #0]
 8007fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fc6:	bd70      	pop	{r4, r5, r6, pc}
 8007fc8:	0800aba5 	.word	0x0800aba5
 8007fcc:	0800ac2c 	.word	0x0800ac2c

08007fd0 <__multadd>:
 8007fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd4:	4698      	mov	r8, r3
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	2300      	movs	r3, #0
 8007fda:	690e      	ldr	r6, [r1, #16]
 8007fdc:	4607      	mov	r7, r0
 8007fde:	f101 0014 	add.w	r0, r1, #20
 8007fe2:	6805      	ldr	r5, [r0, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	b2a9      	uxth	r1, r5
 8007fe8:	fb02 8101 	mla	r1, r2, r1, r8
 8007fec:	0c2d      	lsrs	r5, r5, #16
 8007fee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007ff2:	fb02 c505 	mla	r5, r2, r5, ip
 8007ff6:	b289      	uxth	r1, r1
 8007ff8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007ffc:	429e      	cmp	r6, r3
 8007ffe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008002:	f840 1b04 	str.w	r1, [r0], #4
 8008006:	dcec      	bgt.n	8007fe2 <__multadd+0x12>
 8008008:	f1b8 0f00 	cmp.w	r8, #0
 800800c:	d022      	beq.n	8008054 <__multadd+0x84>
 800800e:	68a3      	ldr	r3, [r4, #8]
 8008010:	42b3      	cmp	r3, r6
 8008012:	dc19      	bgt.n	8008048 <__multadd+0x78>
 8008014:	6861      	ldr	r1, [r4, #4]
 8008016:	4638      	mov	r0, r7
 8008018:	3101      	adds	r1, #1
 800801a:	f7ff ff77 	bl	8007f0c <_Balloc>
 800801e:	4605      	mov	r5, r0
 8008020:	b928      	cbnz	r0, 800802e <__multadd+0x5e>
 8008022:	4602      	mov	r2, r0
 8008024:	21b5      	movs	r1, #181	; 0xb5
 8008026:	4b0d      	ldr	r3, [pc, #52]	; (800805c <__multadd+0x8c>)
 8008028:	480d      	ldr	r0, [pc, #52]	; (8008060 <__multadd+0x90>)
 800802a:	f000 fd11 	bl	8008a50 <__assert_func>
 800802e:	6922      	ldr	r2, [r4, #16]
 8008030:	f104 010c 	add.w	r1, r4, #12
 8008034:	3202      	adds	r2, #2
 8008036:	0092      	lsls	r2, r2, #2
 8008038:	300c      	adds	r0, #12
 800803a:	f7ff ff59 	bl	8007ef0 <memcpy>
 800803e:	4621      	mov	r1, r4
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff ffa3 	bl	8007f8c <_Bfree>
 8008046:	462c      	mov	r4, r5
 8008048:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800804c:	3601      	adds	r6, #1
 800804e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008052:	6126      	str	r6, [r4, #16]
 8008054:	4620      	mov	r0, r4
 8008056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800805a:	bf00      	nop
 800805c:	0800ac1b 	.word	0x0800ac1b
 8008060:	0800ac2c 	.word	0x0800ac2c

08008064 <__hi0bits>:
 8008064:	0c02      	lsrs	r2, r0, #16
 8008066:	0412      	lsls	r2, r2, #16
 8008068:	4603      	mov	r3, r0
 800806a:	b9ca      	cbnz	r2, 80080a0 <__hi0bits+0x3c>
 800806c:	0403      	lsls	r3, r0, #16
 800806e:	2010      	movs	r0, #16
 8008070:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008074:	bf04      	itt	eq
 8008076:	021b      	lsleq	r3, r3, #8
 8008078:	3008      	addeq	r0, #8
 800807a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800807e:	bf04      	itt	eq
 8008080:	011b      	lsleq	r3, r3, #4
 8008082:	3004      	addeq	r0, #4
 8008084:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008088:	bf04      	itt	eq
 800808a:	009b      	lsleq	r3, r3, #2
 800808c:	3002      	addeq	r0, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	db05      	blt.n	800809e <__hi0bits+0x3a>
 8008092:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008096:	f100 0001 	add.w	r0, r0, #1
 800809a:	bf08      	it	eq
 800809c:	2020      	moveq	r0, #32
 800809e:	4770      	bx	lr
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7e5      	b.n	8008070 <__hi0bits+0xc>

080080a4 <__lo0bits>:
 80080a4:	6803      	ldr	r3, [r0, #0]
 80080a6:	4602      	mov	r2, r0
 80080a8:	f013 0007 	ands.w	r0, r3, #7
 80080ac:	d00b      	beq.n	80080c6 <__lo0bits+0x22>
 80080ae:	07d9      	lsls	r1, r3, #31
 80080b0:	d422      	bmi.n	80080f8 <__lo0bits+0x54>
 80080b2:	0798      	lsls	r0, r3, #30
 80080b4:	bf49      	itett	mi
 80080b6:	085b      	lsrmi	r3, r3, #1
 80080b8:	089b      	lsrpl	r3, r3, #2
 80080ba:	2001      	movmi	r0, #1
 80080bc:	6013      	strmi	r3, [r2, #0]
 80080be:	bf5c      	itt	pl
 80080c0:	2002      	movpl	r0, #2
 80080c2:	6013      	strpl	r3, [r2, #0]
 80080c4:	4770      	bx	lr
 80080c6:	b299      	uxth	r1, r3
 80080c8:	b909      	cbnz	r1, 80080ce <__lo0bits+0x2a>
 80080ca:	2010      	movs	r0, #16
 80080cc:	0c1b      	lsrs	r3, r3, #16
 80080ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80080d2:	bf04      	itt	eq
 80080d4:	0a1b      	lsreq	r3, r3, #8
 80080d6:	3008      	addeq	r0, #8
 80080d8:	0719      	lsls	r1, r3, #28
 80080da:	bf04      	itt	eq
 80080dc:	091b      	lsreq	r3, r3, #4
 80080de:	3004      	addeq	r0, #4
 80080e0:	0799      	lsls	r1, r3, #30
 80080e2:	bf04      	itt	eq
 80080e4:	089b      	lsreq	r3, r3, #2
 80080e6:	3002      	addeq	r0, #2
 80080e8:	07d9      	lsls	r1, r3, #31
 80080ea:	d403      	bmi.n	80080f4 <__lo0bits+0x50>
 80080ec:	085b      	lsrs	r3, r3, #1
 80080ee:	f100 0001 	add.w	r0, r0, #1
 80080f2:	d003      	beq.n	80080fc <__lo0bits+0x58>
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	4770      	bx	lr
 80080f8:	2000      	movs	r0, #0
 80080fa:	4770      	bx	lr
 80080fc:	2020      	movs	r0, #32
 80080fe:	4770      	bx	lr

08008100 <__i2b>:
 8008100:	b510      	push	{r4, lr}
 8008102:	460c      	mov	r4, r1
 8008104:	2101      	movs	r1, #1
 8008106:	f7ff ff01 	bl	8007f0c <_Balloc>
 800810a:	4602      	mov	r2, r0
 800810c:	b928      	cbnz	r0, 800811a <__i2b+0x1a>
 800810e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008112:	4b04      	ldr	r3, [pc, #16]	; (8008124 <__i2b+0x24>)
 8008114:	4804      	ldr	r0, [pc, #16]	; (8008128 <__i2b+0x28>)
 8008116:	f000 fc9b 	bl	8008a50 <__assert_func>
 800811a:	2301      	movs	r3, #1
 800811c:	6144      	str	r4, [r0, #20]
 800811e:	6103      	str	r3, [r0, #16]
 8008120:	bd10      	pop	{r4, pc}
 8008122:	bf00      	nop
 8008124:	0800ac1b 	.word	0x0800ac1b
 8008128:	0800ac2c 	.word	0x0800ac2c

0800812c <__multiply>:
 800812c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	4614      	mov	r4, r2
 8008132:	690a      	ldr	r2, [r1, #16]
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	460d      	mov	r5, r1
 8008138:	429a      	cmp	r2, r3
 800813a:	bfbe      	ittt	lt
 800813c:	460b      	movlt	r3, r1
 800813e:	4625      	movlt	r5, r4
 8008140:	461c      	movlt	r4, r3
 8008142:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008146:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800814a:	68ab      	ldr	r3, [r5, #8]
 800814c:	6869      	ldr	r1, [r5, #4]
 800814e:	eb0a 0709 	add.w	r7, sl, r9
 8008152:	42bb      	cmp	r3, r7
 8008154:	b085      	sub	sp, #20
 8008156:	bfb8      	it	lt
 8008158:	3101      	addlt	r1, #1
 800815a:	f7ff fed7 	bl	8007f0c <_Balloc>
 800815e:	b930      	cbnz	r0, 800816e <__multiply+0x42>
 8008160:	4602      	mov	r2, r0
 8008162:	f240 115d 	movw	r1, #349	; 0x15d
 8008166:	4b41      	ldr	r3, [pc, #260]	; (800826c <__multiply+0x140>)
 8008168:	4841      	ldr	r0, [pc, #260]	; (8008270 <__multiply+0x144>)
 800816a:	f000 fc71 	bl	8008a50 <__assert_func>
 800816e:	f100 0614 	add.w	r6, r0, #20
 8008172:	4633      	mov	r3, r6
 8008174:	2200      	movs	r2, #0
 8008176:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800817a:	4543      	cmp	r3, r8
 800817c:	d31e      	bcc.n	80081bc <__multiply+0x90>
 800817e:	f105 0c14 	add.w	ip, r5, #20
 8008182:	f104 0314 	add.w	r3, r4, #20
 8008186:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800818a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800818e:	9202      	str	r2, [sp, #8]
 8008190:	ebac 0205 	sub.w	r2, ip, r5
 8008194:	3a15      	subs	r2, #21
 8008196:	f022 0203 	bic.w	r2, r2, #3
 800819a:	3204      	adds	r2, #4
 800819c:	f105 0115 	add.w	r1, r5, #21
 80081a0:	458c      	cmp	ip, r1
 80081a2:	bf38      	it	cc
 80081a4:	2204      	movcc	r2, #4
 80081a6:	9201      	str	r2, [sp, #4]
 80081a8:	9a02      	ldr	r2, [sp, #8]
 80081aa:	9303      	str	r3, [sp, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d808      	bhi.n	80081c2 <__multiply+0x96>
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	dc55      	bgt.n	8008260 <__multiply+0x134>
 80081b4:	6107      	str	r7, [r0, #16]
 80081b6:	b005      	add	sp, #20
 80081b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081bc:	f843 2b04 	str.w	r2, [r3], #4
 80081c0:	e7db      	b.n	800817a <__multiply+0x4e>
 80081c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80081c6:	f1ba 0f00 	cmp.w	sl, #0
 80081ca:	d020      	beq.n	800820e <__multiply+0xe2>
 80081cc:	46b1      	mov	r9, r6
 80081ce:	2200      	movs	r2, #0
 80081d0:	f105 0e14 	add.w	lr, r5, #20
 80081d4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80081d8:	f8d9 b000 	ldr.w	fp, [r9]
 80081dc:	b2a1      	uxth	r1, r4
 80081de:	fa1f fb8b 	uxth.w	fp, fp
 80081e2:	fb0a b101 	mla	r1, sl, r1, fp
 80081e6:	4411      	add	r1, r2
 80081e8:	f8d9 2000 	ldr.w	r2, [r9]
 80081ec:	0c24      	lsrs	r4, r4, #16
 80081ee:	0c12      	lsrs	r2, r2, #16
 80081f0:	fb0a 2404 	mla	r4, sl, r4, r2
 80081f4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80081f8:	b289      	uxth	r1, r1
 80081fa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80081fe:	45f4      	cmp	ip, lr
 8008200:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008204:	f849 1b04 	str.w	r1, [r9], #4
 8008208:	d8e4      	bhi.n	80081d4 <__multiply+0xa8>
 800820a:	9901      	ldr	r1, [sp, #4]
 800820c:	5072      	str	r2, [r6, r1]
 800820e:	9a03      	ldr	r2, [sp, #12]
 8008210:	3304      	adds	r3, #4
 8008212:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008216:	f1b9 0f00 	cmp.w	r9, #0
 800821a:	d01f      	beq.n	800825c <__multiply+0x130>
 800821c:	46b6      	mov	lr, r6
 800821e:	f04f 0a00 	mov.w	sl, #0
 8008222:	6834      	ldr	r4, [r6, #0]
 8008224:	f105 0114 	add.w	r1, r5, #20
 8008228:	880a      	ldrh	r2, [r1, #0]
 800822a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800822e:	b2a4      	uxth	r4, r4
 8008230:	fb09 b202 	mla	r2, r9, r2, fp
 8008234:	4492      	add	sl, r2
 8008236:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800823a:	f84e 4b04 	str.w	r4, [lr], #4
 800823e:	f851 4b04 	ldr.w	r4, [r1], #4
 8008242:	f8be 2000 	ldrh.w	r2, [lr]
 8008246:	0c24      	lsrs	r4, r4, #16
 8008248:	fb09 2404 	mla	r4, r9, r4, r2
 800824c:	458c      	cmp	ip, r1
 800824e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008252:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008256:	d8e7      	bhi.n	8008228 <__multiply+0xfc>
 8008258:	9a01      	ldr	r2, [sp, #4]
 800825a:	50b4      	str	r4, [r6, r2]
 800825c:	3604      	adds	r6, #4
 800825e:	e7a3      	b.n	80081a8 <__multiply+0x7c>
 8008260:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1a5      	bne.n	80081b4 <__multiply+0x88>
 8008268:	3f01      	subs	r7, #1
 800826a:	e7a1      	b.n	80081b0 <__multiply+0x84>
 800826c:	0800ac1b 	.word	0x0800ac1b
 8008270:	0800ac2c 	.word	0x0800ac2c

08008274 <__pow5mult>:
 8008274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008278:	4615      	mov	r5, r2
 800827a:	f012 0203 	ands.w	r2, r2, #3
 800827e:	4606      	mov	r6, r0
 8008280:	460f      	mov	r7, r1
 8008282:	d007      	beq.n	8008294 <__pow5mult+0x20>
 8008284:	4c25      	ldr	r4, [pc, #148]	; (800831c <__pow5mult+0xa8>)
 8008286:	3a01      	subs	r2, #1
 8008288:	2300      	movs	r3, #0
 800828a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800828e:	f7ff fe9f 	bl	8007fd0 <__multadd>
 8008292:	4607      	mov	r7, r0
 8008294:	10ad      	asrs	r5, r5, #2
 8008296:	d03d      	beq.n	8008314 <__pow5mult+0xa0>
 8008298:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800829a:	b97c      	cbnz	r4, 80082bc <__pow5mult+0x48>
 800829c:	2010      	movs	r0, #16
 800829e:	f7ff fe11 	bl	8007ec4 <malloc>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6270      	str	r0, [r6, #36]	; 0x24
 80082a6:	b928      	cbnz	r0, 80082b4 <__pow5mult+0x40>
 80082a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082ac:	4b1c      	ldr	r3, [pc, #112]	; (8008320 <__pow5mult+0xac>)
 80082ae:	481d      	ldr	r0, [pc, #116]	; (8008324 <__pow5mult+0xb0>)
 80082b0:	f000 fbce 	bl	8008a50 <__assert_func>
 80082b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082b8:	6004      	str	r4, [r0, #0]
 80082ba:	60c4      	str	r4, [r0, #12]
 80082bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082c4:	b94c      	cbnz	r4, 80082da <__pow5mult+0x66>
 80082c6:	f240 2171 	movw	r1, #625	; 0x271
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff ff18 	bl	8008100 <__i2b>
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80082d8:	6003      	str	r3, [r0, #0]
 80082da:	f04f 0900 	mov.w	r9, #0
 80082de:	07eb      	lsls	r3, r5, #31
 80082e0:	d50a      	bpl.n	80082f8 <__pow5mult+0x84>
 80082e2:	4639      	mov	r1, r7
 80082e4:	4622      	mov	r2, r4
 80082e6:	4630      	mov	r0, r6
 80082e8:	f7ff ff20 	bl	800812c <__multiply>
 80082ec:	4680      	mov	r8, r0
 80082ee:	4639      	mov	r1, r7
 80082f0:	4630      	mov	r0, r6
 80082f2:	f7ff fe4b 	bl	8007f8c <_Bfree>
 80082f6:	4647      	mov	r7, r8
 80082f8:	106d      	asrs	r5, r5, #1
 80082fa:	d00b      	beq.n	8008314 <__pow5mult+0xa0>
 80082fc:	6820      	ldr	r0, [r4, #0]
 80082fe:	b938      	cbnz	r0, 8008310 <__pow5mult+0x9c>
 8008300:	4622      	mov	r2, r4
 8008302:	4621      	mov	r1, r4
 8008304:	4630      	mov	r0, r6
 8008306:	f7ff ff11 	bl	800812c <__multiply>
 800830a:	6020      	str	r0, [r4, #0]
 800830c:	f8c0 9000 	str.w	r9, [r0]
 8008310:	4604      	mov	r4, r0
 8008312:	e7e4      	b.n	80082de <__pow5mult+0x6a>
 8008314:	4638      	mov	r0, r7
 8008316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800831a:	bf00      	nop
 800831c:	0800ad80 	.word	0x0800ad80
 8008320:	0800aba5 	.word	0x0800aba5
 8008324:	0800ac2c 	.word	0x0800ac2c

08008328 <__lshift>:
 8008328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800832c:	460c      	mov	r4, r1
 800832e:	4607      	mov	r7, r0
 8008330:	4691      	mov	r9, r2
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	6849      	ldr	r1, [r1, #4]
 8008336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800833a:	68a3      	ldr	r3, [r4, #8]
 800833c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008340:	f108 0601 	add.w	r6, r8, #1
 8008344:	42b3      	cmp	r3, r6
 8008346:	db0b      	blt.n	8008360 <__lshift+0x38>
 8008348:	4638      	mov	r0, r7
 800834a:	f7ff fddf 	bl	8007f0c <_Balloc>
 800834e:	4605      	mov	r5, r0
 8008350:	b948      	cbnz	r0, 8008366 <__lshift+0x3e>
 8008352:	4602      	mov	r2, r0
 8008354:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008358:	4b27      	ldr	r3, [pc, #156]	; (80083f8 <__lshift+0xd0>)
 800835a:	4828      	ldr	r0, [pc, #160]	; (80083fc <__lshift+0xd4>)
 800835c:	f000 fb78 	bl	8008a50 <__assert_func>
 8008360:	3101      	adds	r1, #1
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	e7ee      	b.n	8008344 <__lshift+0x1c>
 8008366:	2300      	movs	r3, #0
 8008368:	f100 0114 	add.w	r1, r0, #20
 800836c:	f100 0210 	add.w	r2, r0, #16
 8008370:	4618      	mov	r0, r3
 8008372:	4553      	cmp	r3, sl
 8008374:	db33      	blt.n	80083de <__lshift+0xb6>
 8008376:	6920      	ldr	r0, [r4, #16]
 8008378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800837c:	f104 0314 	add.w	r3, r4, #20
 8008380:	f019 091f 	ands.w	r9, r9, #31
 8008384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800838c:	d02b      	beq.n	80083e6 <__lshift+0xbe>
 800838e:	468a      	mov	sl, r1
 8008390:	2200      	movs	r2, #0
 8008392:	f1c9 0e20 	rsb	lr, r9, #32
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	fa00 f009 	lsl.w	r0, r0, r9
 800839c:	4302      	orrs	r2, r0
 800839e:	f84a 2b04 	str.w	r2, [sl], #4
 80083a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a6:	459c      	cmp	ip, r3
 80083a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80083ac:	d8f3      	bhi.n	8008396 <__lshift+0x6e>
 80083ae:	ebac 0304 	sub.w	r3, ip, r4
 80083b2:	3b15      	subs	r3, #21
 80083b4:	f023 0303 	bic.w	r3, r3, #3
 80083b8:	3304      	adds	r3, #4
 80083ba:	f104 0015 	add.w	r0, r4, #21
 80083be:	4584      	cmp	ip, r0
 80083c0:	bf38      	it	cc
 80083c2:	2304      	movcc	r3, #4
 80083c4:	50ca      	str	r2, [r1, r3]
 80083c6:	b10a      	cbz	r2, 80083cc <__lshift+0xa4>
 80083c8:	f108 0602 	add.w	r6, r8, #2
 80083cc:	3e01      	subs	r6, #1
 80083ce:	4638      	mov	r0, r7
 80083d0:	4621      	mov	r1, r4
 80083d2:	612e      	str	r6, [r5, #16]
 80083d4:	f7ff fdda 	bl	8007f8c <_Bfree>
 80083d8:	4628      	mov	r0, r5
 80083da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083de:	f842 0f04 	str.w	r0, [r2, #4]!
 80083e2:	3301      	adds	r3, #1
 80083e4:	e7c5      	b.n	8008372 <__lshift+0x4a>
 80083e6:	3904      	subs	r1, #4
 80083e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ec:	459c      	cmp	ip, r3
 80083ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80083f2:	d8f9      	bhi.n	80083e8 <__lshift+0xc0>
 80083f4:	e7ea      	b.n	80083cc <__lshift+0xa4>
 80083f6:	bf00      	nop
 80083f8:	0800ac1b 	.word	0x0800ac1b
 80083fc:	0800ac2c 	.word	0x0800ac2c

08008400 <__mcmp>:
 8008400:	4603      	mov	r3, r0
 8008402:	690a      	ldr	r2, [r1, #16]
 8008404:	6900      	ldr	r0, [r0, #16]
 8008406:	b530      	push	{r4, r5, lr}
 8008408:	1a80      	subs	r0, r0, r2
 800840a:	d10d      	bne.n	8008428 <__mcmp+0x28>
 800840c:	3314      	adds	r3, #20
 800840e:	3114      	adds	r1, #20
 8008410:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008414:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008418:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800841c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008420:	4295      	cmp	r5, r2
 8008422:	d002      	beq.n	800842a <__mcmp+0x2a>
 8008424:	d304      	bcc.n	8008430 <__mcmp+0x30>
 8008426:	2001      	movs	r0, #1
 8008428:	bd30      	pop	{r4, r5, pc}
 800842a:	42a3      	cmp	r3, r4
 800842c:	d3f4      	bcc.n	8008418 <__mcmp+0x18>
 800842e:	e7fb      	b.n	8008428 <__mcmp+0x28>
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	e7f8      	b.n	8008428 <__mcmp+0x28>
	...

08008438 <__mdiff>:
 8008438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	460c      	mov	r4, r1
 800843e:	4606      	mov	r6, r0
 8008440:	4611      	mov	r1, r2
 8008442:	4620      	mov	r0, r4
 8008444:	4692      	mov	sl, r2
 8008446:	f7ff ffdb 	bl	8008400 <__mcmp>
 800844a:	1e05      	subs	r5, r0, #0
 800844c:	d111      	bne.n	8008472 <__mdiff+0x3a>
 800844e:	4629      	mov	r1, r5
 8008450:	4630      	mov	r0, r6
 8008452:	f7ff fd5b 	bl	8007f0c <_Balloc>
 8008456:	4602      	mov	r2, r0
 8008458:	b928      	cbnz	r0, 8008466 <__mdiff+0x2e>
 800845a:	f240 2132 	movw	r1, #562	; 0x232
 800845e:	4b3c      	ldr	r3, [pc, #240]	; (8008550 <__mdiff+0x118>)
 8008460:	483c      	ldr	r0, [pc, #240]	; (8008554 <__mdiff+0x11c>)
 8008462:	f000 faf5 	bl	8008a50 <__assert_func>
 8008466:	2301      	movs	r3, #1
 8008468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800846c:	4610      	mov	r0, r2
 800846e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008472:	bfa4      	itt	ge
 8008474:	4653      	movge	r3, sl
 8008476:	46a2      	movge	sl, r4
 8008478:	4630      	mov	r0, r6
 800847a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800847e:	bfa6      	itte	ge
 8008480:	461c      	movge	r4, r3
 8008482:	2500      	movge	r5, #0
 8008484:	2501      	movlt	r5, #1
 8008486:	f7ff fd41 	bl	8007f0c <_Balloc>
 800848a:	4602      	mov	r2, r0
 800848c:	b918      	cbnz	r0, 8008496 <__mdiff+0x5e>
 800848e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008492:	4b2f      	ldr	r3, [pc, #188]	; (8008550 <__mdiff+0x118>)
 8008494:	e7e4      	b.n	8008460 <__mdiff+0x28>
 8008496:	f100 0814 	add.w	r8, r0, #20
 800849a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800849e:	60c5      	str	r5, [r0, #12]
 80084a0:	f04f 0c00 	mov.w	ip, #0
 80084a4:	f10a 0514 	add.w	r5, sl, #20
 80084a8:	f10a 0010 	add.w	r0, sl, #16
 80084ac:	46c2      	mov	sl, r8
 80084ae:	6926      	ldr	r6, [r4, #16]
 80084b0:	f104 0914 	add.w	r9, r4, #20
 80084b4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80084b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084bc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80084c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80084c4:	fa1f f18b 	uxth.w	r1, fp
 80084c8:	4461      	add	r1, ip
 80084ca:	fa1f fc83 	uxth.w	ip, r3
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	eba1 010c 	sub.w	r1, r1, ip
 80084d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80084dc:	b289      	uxth	r1, r1
 80084de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80084e2:	454e      	cmp	r6, r9
 80084e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80084e8:	f84a 3b04 	str.w	r3, [sl], #4
 80084ec:	d8e6      	bhi.n	80084bc <__mdiff+0x84>
 80084ee:	1b33      	subs	r3, r6, r4
 80084f0:	3b15      	subs	r3, #21
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	3415      	adds	r4, #21
 80084f8:	3304      	adds	r3, #4
 80084fa:	42a6      	cmp	r6, r4
 80084fc:	bf38      	it	cc
 80084fe:	2304      	movcc	r3, #4
 8008500:	441d      	add	r5, r3
 8008502:	4443      	add	r3, r8
 8008504:	461e      	mov	r6, r3
 8008506:	462c      	mov	r4, r5
 8008508:	4574      	cmp	r4, lr
 800850a:	d30e      	bcc.n	800852a <__mdiff+0xf2>
 800850c:	f10e 0103 	add.w	r1, lr, #3
 8008510:	1b49      	subs	r1, r1, r5
 8008512:	f021 0103 	bic.w	r1, r1, #3
 8008516:	3d03      	subs	r5, #3
 8008518:	45ae      	cmp	lr, r5
 800851a:	bf38      	it	cc
 800851c:	2100      	movcc	r1, #0
 800851e:	4419      	add	r1, r3
 8008520:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008524:	b18b      	cbz	r3, 800854a <__mdiff+0x112>
 8008526:	6117      	str	r7, [r2, #16]
 8008528:	e7a0      	b.n	800846c <__mdiff+0x34>
 800852a:	f854 8b04 	ldr.w	r8, [r4], #4
 800852e:	fa1f f188 	uxth.w	r1, r8
 8008532:	4461      	add	r1, ip
 8008534:	1408      	asrs	r0, r1, #16
 8008536:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800853a:	b289      	uxth	r1, r1
 800853c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008540:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008544:	f846 1b04 	str.w	r1, [r6], #4
 8008548:	e7de      	b.n	8008508 <__mdiff+0xd0>
 800854a:	3f01      	subs	r7, #1
 800854c:	e7e8      	b.n	8008520 <__mdiff+0xe8>
 800854e:	bf00      	nop
 8008550:	0800ac1b 	.word	0x0800ac1b
 8008554:	0800ac2c 	.word	0x0800ac2c

08008558 <__d2b>:
 8008558:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800855c:	2101      	movs	r1, #1
 800855e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008562:	4690      	mov	r8, r2
 8008564:	461d      	mov	r5, r3
 8008566:	f7ff fcd1 	bl	8007f0c <_Balloc>
 800856a:	4604      	mov	r4, r0
 800856c:	b930      	cbnz	r0, 800857c <__d2b+0x24>
 800856e:	4602      	mov	r2, r0
 8008570:	f240 310a 	movw	r1, #778	; 0x30a
 8008574:	4b24      	ldr	r3, [pc, #144]	; (8008608 <__d2b+0xb0>)
 8008576:	4825      	ldr	r0, [pc, #148]	; (800860c <__d2b+0xb4>)
 8008578:	f000 fa6a 	bl	8008a50 <__assert_func>
 800857c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008580:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008584:	bb2d      	cbnz	r5, 80085d2 <__d2b+0x7a>
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	f1b8 0300 	subs.w	r3, r8, #0
 800858c:	d026      	beq.n	80085dc <__d2b+0x84>
 800858e:	4668      	mov	r0, sp
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	f7ff fd87 	bl	80080a4 <__lo0bits>
 8008596:	9900      	ldr	r1, [sp, #0]
 8008598:	b1f0      	cbz	r0, 80085d8 <__d2b+0x80>
 800859a:	9a01      	ldr	r2, [sp, #4]
 800859c:	f1c0 0320 	rsb	r3, r0, #32
 80085a0:	fa02 f303 	lsl.w	r3, r2, r3
 80085a4:	430b      	orrs	r3, r1
 80085a6:	40c2      	lsrs	r2, r0
 80085a8:	6163      	str	r3, [r4, #20]
 80085aa:	9201      	str	r2, [sp, #4]
 80085ac:	9b01      	ldr	r3, [sp, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bf14      	ite	ne
 80085b2:	2102      	movne	r1, #2
 80085b4:	2101      	moveq	r1, #1
 80085b6:	61a3      	str	r3, [r4, #24]
 80085b8:	6121      	str	r1, [r4, #16]
 80085ba:	b1c5      	cbz	r5, 80085ee <__d2b+0x96>
 80085bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80085c0:	4405      	add	r5, r0
 80085c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80085c6:	603d      	str	r5, [r7, #0]
 80085c8:	6030      	str	r0, [r6, #0]
 80085ca:	4620      	mov	r0, r4
 80085cc:	b002      	add	sp, #8
 80085ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085d6:	e7d6      	b.n	8008586 <__d2b+0x2e>
 80085d8:	6161      	str	r1, [r4, #20]
 80085da:	e7e7      	b.n	80085ac <__d2b+0x54>
 80085dc:	a801      	add	r0, sp, #4
 80085de:	f7ff fd61 	bl	80080a4 <__lo0bits>
 80085e2:	2101      	movs	r1, #1
 80085e4:	9b01      	ldr	r3, [sp, #4]
 80085e6:	6121      	str	r1, [r4, #16]
 80085e8:	6163      	str	r3, [r4, #20]
 80085ea:	3020      	adds	r0, #32
 80085ec:	e7e5      	b.n	80085ba <__d2b+0x62>
 80085ee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80085f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085f6:	6038      	str	r0, [r7, #0]
 80085f8:	6918      	ldr	r0, [r3, #16]
 80085fa:	f7ff fd33 	bl	8008064 <__hi0bits>
 80085fe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008602:	6031      	str	r1, [r6, #0]
 8008604:	e7e1      	b.n	80085ca <__d2b+0x72>
 8008606:	bf00      	nop
 8008608:	0800ac1b 	.word	0x0800ac1b
 800860c:	0800ac2c 	.word	0x0800ac2c

08008610 <_calloc_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	fb02 f501 	mul.w	r5, r2, r1
 8008616:	4629      	mov	r1, r5
 8008618:	f000 f854 	bl	80086c4 <_malloc_r>
 800861c:	4604      	mov	r4, r0
 800861e:	b118      	cbz	r0, 8008628 <_calloc_r+0x18>
 8008620:	462a      	mov	r2, r5
 8008622:	2100      	movs	r1, #0
 8008624:	f7fe f922 	bl	800686c <memset>
 8008628:	4620      	mov	r0, r4
 800862a:	bd38      	pop	{r3, r4, r5, pc}

0800862c <_free_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4605      	mov	r5, r0
 8008630:	2900      	cmp	r1, #0
 8008632:	d043      	beq.n	80086bc <_free_r+0x90>
 8008634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008638:	1f0c      	subs	r4, r1, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	bfb8      	it	lt
 800863e:	18e4      	addlt	r4, r4, r3
 8008640:	f000 fa62 	bl	8008b08 <__malloc_lock>
 8008644:	4a1e      	ldr	r2, [pc, #120]	; (80086c0 <_free_r+0x94>)
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	4610      	mov	r0, r2
 800864a:	b933      	cbnz	r3, 800865a <_free_r+0x2e>
 800864c:	6063      	str	r3, [r4, #4]
 800864e:	6014      	str	r4, [r2, #0]
 8008650:	4628      	mov	r0, r5
 8008652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008656:	f000 ba5d 	b.w	8008b14 <__malloc_unlock>
 800865a:	42a3      	cmp	r3, r4
 800865c:	d90a      	bls.n	8008674 <_free_r+0x48>
 800865e:	6821      	ldr	r1, [r4, #0]
 8008660:	1862      	adds	r2, r4, r1
 8008662:	4293      	cmp	r3, r2
 8008664:	bf01      	itttt	eq
 8008666:	681a      	ldreq	r2, [r3, #0]
 8008668:	685b      	ldreq	r3, [r3, #4]
 800866a:	1852      	addeq	r2, r2, r1
 800866c:	6022      	streq	r2, [r4, #0]
 800866e:	6063      	str	r3, [r4, #4]
 8008670:	6004      	str	r4, [r0, #0]
 8008672:	e7ed      	b.n	8008650 <_free_r+0x24>
 8008674:	461a      	mov	r2, r3
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	b10b      	cbz	r3, 800867e <_free_r+0x52>
 800867a:	42a3      	cmp	r3, r4
 800867c:	d9fa      	bls.n	8008674 <_free_r+0x48>
 800867e:	6811      	ldr	r1, [r2, #0]
 8008680:	1850      	adds	r0, r2, r1
 8008682:	42a0      	cmp	r0, r4
 8008684:	d10b      	bne.n	800869e <_free_r+0x72>
 8008686:	6820      	ldr	r0, [r4, #0]
 8008688:	4401      	add	r1, r0
 800868a:	1850      	adds	r0, r2, r1
 800868c:	4283      	cmp	r3, r0
 800868e:	6011      	str	r1, [r2, #0]
 8008690:	d1de      	bne.n	8008650 <_free_r+0x24>
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	4401      	add	r1, r0
 8008698:	6011      	str	r1, [r2, #0]
 800869a:	6053      	str	r3, [r2, #4]
 800869c:	e7d8      	b.n	8008650 <_free_r+0x24>
 800869e:	d902      	bls.n	80086a6 <_free_r+0x7a>
 80086a0:	230c      	movs	r3, #12
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	e7d4      	b.n	8008650 <_free_r+0x24>
 80086a6:	6820      	ldr	r0, [r4, #0]
 80086a8:	1821      	adds	r1, r4, r0
 80086aa:	428b      	cmp	r3, r1
 80086ac:	bf01      	itttt	eq
 80086ae:	6819      	ldreq	r1, [r3, #0]
 80086b0:	685b      	ldreq	r3, [r3, #4]
 80086b2:	1809      	addeq	r1, r1, r0
 80086b4:	6021      	streq	r1, [r4, #0]
 80086b6:	6063      	str	r3, [r4, #4]
 80086b8:	6054      	str	r4, [r2, #4]
 80086ba:	e7c9      	b.n	8008650 <_free_r+0x24>
 80086bc:	bd38      	pop	{r3, r4, r5, pc}
 80086be:	bf00      	nop
 80086c0:	20000354 	.word	0x20000354

080086c4 <_malloc_r>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	1ccd      	adds	r5, r1, #3
 80086c8:	f025 0503 	bic.w	r5, r5, #3
 80086cc:	3508      	adds	r5, #8
 80086ce:	2d0c      	cmp	r5, #12
 80086d0:	bf38      	it	cc
 80086d2:	250c      	movcc	r5, #12
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	4606      	mov	r6, r0
 80086d8:	db01      	blt.n	80086de <_malloc_r+0x1a>
 80086da:	42a9      	cmp	r1, r5
 80086dc:	d903      	bls.n	80086e6 <_malloc_r+0x22>
 80086de:	230c      	movs	r3, #12
 80086e0:	6033      	str	r3, [r6, #0]
 80086e2:	2000      	movs	r0, #0
 80086e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e6:	f000 fa0f 	bl	8008b08 <__malloc_lock>
 80086ea:	4921      	ldr	r1, [pc, #132]	; (8008770 <_malloc_r+0xac>)
 80086ec:	680a      	ldr	r2, [r1, #0]
 80086ee:	4614      	mov	r4, r2
 80086f0:	b99c      	cbnz	r4, 800871a <_malloc_r+0x56>
 80086f2:	4f20      	ldr	r7, [pc, #128]	; (8008774 <_malloc_r+0xb0>)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	b923      	cbnz	r3, 8008702 <_malloc_r+0x3e>
 80086f8:	4621      	mov	r1, r4
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f998 	bl	8008a30 <_sbrk_r>
 8008700:	6038      	str	r0, [r7, #0]
 8008702:	4629      	mov	r1, r5
 8008704:	4630      	mov	r0, r6
 8008706:	f000 f993 	bl	8008a30 <_sbrk_r>
 800870a:	1c43      	adds	r3, r0, #1
 800870c:	d123      	bne.n	8008756 <_malloc_r+0x92>
 800870e:	230c      	movs	r3, #12
 8008710:	4630      	mov	r0, r6
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	f000 f9fe 	bl	8008b14 <__malloc_unlock>
 8008718:	e7e3      	b.n	80086e2 <_malloc_r+0x1e>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	1b5b      	subs	r3, r3, r5
 800871e:	d417      	bmi.n	8008750 <_malloc_r+0x8c>
 8008720:	2b0b      	cmp	r3, #11
 8008722:	d903      	bls.n	800872c <_malloc_r+0x68>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	441c      	add	r4, r3
 8008728:	6025      	str	r5, [r4, #0]
 800872a:	e004      	b.n	8008736 <_malloc_r+0x72>
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	42a2      	cmp	r2, r4
 8008730:	bf0c      	ite	eq
 8008732:	600b      	streq	r3, [r1, #0]
 8008734:	6053      	strne	r3, [r2, #4]
 8008736:	4630      	mov	r0, r6
 8008738:	f000 f9ec 	bl	8008b14 <__malloc_unlock>
 800873c:	f104 000b 	add.w	r0, r4, #11
 8008740:	1d23      	adds	r3, r4, #4
 8008742:	f020 0007 	bic.w	r0, r0, #7
 8008746:	1ac2      	subs	r2, r0, r3
 8008748:	d0cc      	beq.n	80086e4 <_malloc_r+0x20>
 800874a:	1a1b      	subs	r3, r3, r0
 800874c:	50a3      	str	r3, [r4, r2]
 800874e:	e7c9      	b.n	80086e4 <_malloc_r+0x20>
 8008750:	4622      	mov	r2, r4
 8008752:	6864      	ldr	r4, [r4, #4]
 8008754:	e7cc      	b.n	80086f0 <_malloc_r+0x2c>
 8008756:	1cc4      	adds	r4, r0, #3
 8008758:	f024 0403 	bic.w	r4, r4, #3
 800875c:	42a0      	cmp	r0, r4
 800875e:	d0e3      	beq.n	8008728 <_malloc_r+0x64>
 8008760:	1a21      	subs	r1, r4, r0
 8008762:	4630      	mov	r0, r6
 8008764:	f000 f964 	bl	8008a30 <_sbrk_r>
 8008768:	3001      	adds	r0, #1
 800876a:	d1dd      	bne.n	8008728 <_malloc_r+0x64>
 800876c:	e7cf      	b.n	800870e <_malloc_r+0x4a>
 800876e:	bf00      	nop
 8008770:	20000354 	.word	0x20000354
 8008774:	20000358 	.word	0x20000358

08008778 <__ssputs_r>:
 8008778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	688e      	ldr	r6, [r1, #8]
 800877e:	4682      	mov	sl, r0
 8008780:	429e      	cmp	r6, r3
 8008782:	460c      	mov	r4, r1
 8008784:	4690      	mov	r8, r2
 8008786:	461f      	mov	r7, r3
 8008788:	d838      	bhi.n	80087fc <__ssputs_r+0x84>
 800878a:	898a      	ldrh	r2, [r1, #12]
 800878c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008790:	d032      	beq.n	80087f8 <__ssputs_r+0x80>
 8008792:	6825      	ldr	r5, [r4, #0]
 8008794:	6909      	ldr	r1, [r1, #16]
 8008796:	3301      	adds	r3, #1
 8008798:	eba5 0901 	sub.w	r9, r5, r1
 800879c:	6965      	ldr	r5, [r4, #20]
 800879e:	444b      	add	r3, r9
 80087a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087a8:	106d      	asrs	r5, r5, #1
 80087aa:	429d      	cmp	r5, r3
 80087ac:	bf38      	it	cc
 80087ae:	461d      	movcc	r5, r3
 80087b0:	0553      	lsls	r3, r2, #21
 80087b2:	d531      	bpl.n	8008818 <__ssputs_r+0xa0>
 80087b4:	4629      	mov	r1, r5
 80087b6:	f7ff ff85 	bl	80086c4 <_malloc_r>
 80087ba:	4606      	mov	r6, r0
 80087bc:	b950      	cbnz	r0, 80087d4 <__ssputs_r+0x5c>
 80087be:	230c      	movs	r3, #12
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	f8ca 3000 	str.w	r3, [sl]
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d4:	464a      	mov	r2, r9
 80087d6:	6921      	ldr	r1, [r4, #16]
 80087d8:	f7ff fb8a 	bl	8007ef0 <memcpy>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	6126      	str	r6, [r4, #16]
 80087ea:	444e      	add	r6, r9
 80087ec:	6026      	str	r6, [r4, #0]
 80087ee:	463e      	mov	r6, r7
 80087f0:	6165      	str	r5, [r4, #20]
 80087f2:	eba5 0509 	sub.w	r5, r5, r9
 80087f6:	60a5      	str	r5, [r4, #8]
 80087f8:	42be      	cmp	r6, r7
 80087fa:	d900      	bls.n	80087fe <__ssputs_r+0x86>
 80087fc:	463e      	mov	r6, r7
 80087fe:	4632      	mov	r2, r6
 8008800:	4641      	mov	r1, r8
 8008802:	6820      	ldr	r0, [r4, #0]
 8008804:	f000 f966 	bl	8008ad4 <memmove>
 8008808:	68a3      	ldr	r3, [r4, #8]
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	1b9b      	subs	r3, r3, r6
 800880e:	4432      	add	r2, r6
 8008810:	2000      	movs	r0, #0
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	6022      	str	r2, [r4, #0]
 8008816:	e7db      	b.n	80087d0 <__ssputs_r+0x58>
 8008818:	462a      	mov	r2, r5
 800881a:	f000 f981 	bl	8008b20 <_realloc_r>
 800881e:	4606      	mov	r6, r0
 8008820:	2800      	cmp	r0, #0
 8008822:	d1e1      	bne.n	80087e8 <__ssputs_r+0x70>
 8008824:	4650      	mov	r0, sl
 8008826:	6921      	ldr	r1, [r4, #16]
 8008828:	f7ff ff00 	bl	800862c <_free_r>
 800882c:	e7c7      	b.n	80087be <__ssputs_r+0x46>
	...

08008830 <_svfiprintf_r>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	4698      	mov	r8, r3
 8008836:	898b      	ldrh	r3, [r1, #12]
 8008838:	4607      	mov	r7, r0
 800883a:	061b      	lsls	r3, r3, #24
 800883c:	460d      	mov	r5, r1
 800883e:	4614      	mov	r4, r2
 8008840:	b09d      	sub	sp, #116	; 0x74
 8008842:	d50e      	bpl.n	8008862 <_svfiprintf_r+0x32>
 8008844:	690b      	ldr	r3, [r1, #16]
 8008846:	b963      	cbnz	r3, 8008862 <_svfiprintf_r+0x32>
 8008848:	2140      	movs	r1, #64	; 0x40
 800884a:	f7ff ff3b 	bl	80086c4 <_malloc_r>
 800884e:	6028      	str	r0, [r5, #0]
 8008850:	6128      	str	r0, [r5, #16]
 8008852:	b920      	cbnz	r0, 800885e <_svfiprintf_r+0x2e>
 8008854:	230c      	movs	r3, #12
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	f04f 30ff 	mov.w	r0, #4294967295
 800885c:	e0d1      	b.n	8008a02 <_svfiprintf_r+0x1d2>
 800885e:	2340      	movs	r3, #64	; 0x40
 8008860:	616b      	str	r3, [r5, #20]
 8008862:	2300      	movs	r3, #0
 8008864:	9309      	str	r3, [sp, #36]	; 0x24
 8008866:	2320      	movs	r3, #32
 8008868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800886c:	2330      	movs	r3, #48	; 0x30
 800886e:	f04f 0901 	mov.w	r9, #1
 8008872:	f8cd 800c 	str.w	r8, [sp, #12]
 8008876:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a1c <_svfiprintf_r+0x1ec>
 800887a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800887e:	4623      	mov	r3, r4
 8008880:	469a      	mov	sl, r3
 8008882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008886:	b10a      	cbz	r2, 800888c <_svfiprintf_r+0x5c>
 8008888:	2a25      	cmp	r2, #37	; 0x25
 800888a:	d1f9      	bne.n	8008880 <_svfiprintf_r+0x50>
 800888c:	ebba 0b04 	subs.w	fp, sl, r4
 8008890:	d00b      	beq.n	80088aa <_svfiprintf_r+0x7a>
 8008892:	465b      	mov	r3, fp
 8008894:	4622      	mov	r2, r4
 8008896:	4629      	mov	r1, r5
 8008898:	4638      	mov	r0, r7
 800889a:	f7ff ff6d 	bl	8008778 <__ssputs_r>
 800889e:	3001      	adds	r0, #1
 80088a0:	f000 80aa 	beq.w	80089f8 <_svfiprintf_r+0x1c8>
 80088a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088a6:	445a      	add	r2, fp
 80088a8:	9209      	str	r2, [sp, #36]	; 0x24
 80088aa:	f89a 3000 	ldrb.w	r3, [sl]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 80a2 	beq.w	80089f8 <_svfiprintf_r+0x1c8>
 80088b4:	2300      	movs	r3, #0
 80088b6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088be:	f10a 0a01 	add.w	sl, sl, #1
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	9307      	str	r3, [sp, #28]
 80088c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088ca:	931a      	str	r3, [sp, #104]	; 0x68
 80088cc:	4654      	mov	r4, sl
 80088ce:	2205      	movs	r2, #5
 80088d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d4:	4851      	ldr	r0, [pc, #324]	; (8008a1c <_svfiprintf_r+0x1ec>)
 80088d6:	f7ff fafd 	bl	8007ed4 <memchr>
 80088da:	9a04      	ldr	r2, [sp, #16]
 80088dc:	b9d8      	cbnz	r0, 8008916 <_svfiprintf_r+0xe6>
 80088de:	06d0      	lsls	r0, r2, #27
 80088e0:	bf44      	itt	mi
 80088e2:	2320      	movmi	r3, #32
 80088e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088e8:	0711      	lsls	r1, r2, #28
 80088ea:	bf44      	itt	mi
 80088ec:	232b      	movmi	r3, #43	; 0x2b
 80088ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088f2:	f89a 3000 	ldrb.w	r3, [sl]
 80088f6:	2b2a      	cmp	r3, #42	; 0x2a
 80088f8:	d015      	beq.n	8008926 <_svfiprintf_r+0xf6>
 80088fa:	4654      	mov	r4, sl
 80088fc:	2000      	movs	r0, #0
 80088fe:	f04f 0c0a 	mov.w	ip, #10
 8008902:	9a07      	ldr	r2, [sp, #28]
 8008904:	4621      	mov	r1, r4
 8008906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800890a:	3b30      	subs	r3, #48	; 0x30
 800890c:	2b09      	cmp	r3, #9
 800890e:	d94e      	bls.n	80089ae <_svfiprintf_r+0x17e>
 8008910:	b1b0      	cbz	r0, 8008940 <_svfiprintf_r+0x110>
 8008912:	9207      	str	r2, [sp, #28]
 8008914:	e014      	b.n	8008940 <_svfiprintf_r+0x110>
 8008916:	eba0 0308 	sub.w	r3, r0, r8
 800891a:	fa09 f303 	lsl.w	r3, r9, r3
 800891e:	4313      	orrs	r3, r2
 8008920:	46a2      	mov	sl, r4
 8008922:	9304      	str	r3, [sp, #16]
 8008924:	e7d2      	b.n	80088cc <_svfiprintf_r+0x9c>
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	1d19      	adds	r1, r3, #4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	9103      	str	r1, [sp, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	bfbb      	ittet	lt
 8008932:	425b      	neglt	r3, r3
 8008934:	f042 0202 	orrlt.w	r2, r2, #2
 8008938:	9307      	strge	r3, [sp, #28]
 800893a:	9307      	strlt	r3, [sp, #28]
 800893c:	bfb8      	it	lt
 800893e:	9204      	strlt	r2, [sp, #16]
 8008940:	7823      	ldrb	r3, [r4, #0]
 8008942:	2b2e      	cmp	r3, #46	; 0x2e
 8008944:	d10c      	bne.n	8008960 <_svfiprintf_r+0x130>
 8008946:	7863      	ldrb	r3, [r4, #1]
 8008948:	2b2a      	cmp	r3, #42	; 0x2a
 800894a:	d135      	bne.n	80089b8 <_svfiprintf_r+0x188>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	3402      	adds	r4, #2
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	9203      	str	r2, [sp, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	bfb8      	it	lt
 800895a:	f04f 33ff 	movlt.w	r3, #4294967295
 800895e:	9305      	str	r3, [sp, #20]
 8008960:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a2c <_svfiprintf_r+0x1fc>
 8008964:	2203      	movs	r2, #3
 8008966:	4650      	mov	r0, sl
 8008968:	7821      	ldrb	r1, [r4, #0]
 800896a:	f7ff fab3 	bl	8007ed4 <memchr>
 800896e:	b140      	cbz	r0, 8008982 <_svfiprintf_r+0x152>
 8008970:	2340      	movs	r3, #64	; 0x40
 8008972:	eba0 000a 	sub.w	r0, r0, sl
 8008976:	fa03 f000 	lsl.w	r0, r3, r0
 800897a:	9b04      	ldr	r3, [sp, #16]
 800897c:	3401      	adds	r4, #1
 800897e:	4303      	orrs	r3, r0
 8008980:	9304      	str	r3, [sp, #16]
 8008982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008986:	2206      	movs	r2, #6
 8008988:	4825      	ldr	r0, [pc, #148]	; (8008a20 <_svfiprintf_r+0x1f0>)
 800898a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800898e:	f7ff faa1 	bl	8007ed4 <memchr>
 8008992:	2800      	cmp	r0, #0
 8008994:	d038      	beq.n	8008a08 <_svfiprintf_r+0x1d8>
 8008996:	4b23      	ldr	r3, [pc, #140]	; (8008a24 <_svfiprintf_r+0x1f4>)
 8008998:	bb1b      	cbnz	r3, 80089e2 <_svfiprintf_r+0x1b2>
 800899a:	9b03      	ldr	r3, [sp, #12]
 800899c:	3307      	adds	r3, #7
 800899e:	f023 0307 	bic.w	r3, r3, #7
 80089a2:	3308      	adds	r3, #8
 80089a4:	9303      	str	r3, [sp, #12]
 80089a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a8:	4433      	add	r3, r6
 80089aa:	9309      	str	r3, [sp, #36]	; 0x24
 80089ac:	e767      	b.n	800887e <_svfiprintf_r+0x4e>
 80089ae:	460c      	mov	r4, r1
 80089b0:	2001      	movs	r0, #1
 80089b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80089b6:	e7a5      	b.n	8008904 <_svfiprintf_r+0xd4>
 80089b8:	2300      	movs	r3, #0
 80089ba:	f04f 0c0a 	mov.w	ip, #10
 80089be:	4619      	mov	r1, r3
 80089c0:	3401      	adds	r4, #1
 80089c2:	9305      	str	r3, [sp, #20]
 80089c4:	4620      	mov	r0, r4
 80089c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089ca:	3a30      	subs	r2, #48	; 0x30
 80089cc:	2a09      	cmp	r2, #9
 80089ce:	d903      	bls.n	80089d8 <_svfiprintf_r+0x1a8>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0c5      	beq.n	8008960 <_svfiprintf_r+0x130>
 80089d4:	9105      	str	r1, [sp, #20]
 80089d6:	e7c3      	b.n	8008960 <_svfiprintf_r+0x130>
 80089d8:	4604      	mov	r4, r0
 80089da:	2301      	movs	r3, #1
 80089dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80089e0:	e7f0      	b.n	80089c4 <_svfiprintf_r+0x194>
 80089e2:	ab03      	add	r3, sp, #12
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	462a      	mov	r2, r5
 80089e8:	4638      	mov	r0, r7
 80089ea:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <_svfiprintf_r+0x1f8>)
 80089ec:	a904      	add	r1, sp, #16
 80089ee:	f7fd ffe3 	bl	80069b8 <_printf_float>
 80089f2:	1c42      	adds	r2, r0, #1
 80089f4:	4606      	mov	r6, r0
 80089f6:	d1d6      	bne.n	80089a6 <_svfiprintf_r+0x176>
 80089f8:	89ab      	ldrh	r3, [r5, #12]
 80089fa:	065b      	lsls	r3, r3, #25
 80089fc:	f53f af2c 	bmi.w	8008858 <_svfiprintf_r+0x28>
 8008a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a02:	b01d      	add	sp, #116	; 0x74
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	ab03      	add	r3, sp, #12
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	4638      	mov	r0, r7
 8008a10:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <_svfiprintf_r+0x1f8>)
 8008a12:	a904      	add	r1, sp, #16
 8008a14:	f7fe fa6c 	bl	8006ef0 <_printf_i>
 8008a18:	e7eb      	b.n	80089f2 <_svfiprintf_r+0x1c2>
 8008a1a:	bf00      	nop
 8008a1c:	0800ad8c 	.word	0x0800ad8c
 8008a20:	0800ad96 	.word	0x0800ad96
 8008a24:	080069b9 	.word	0x080069b9
 8008a28:	08008779 	.word	0x08008779
 8008a2c:	0800ad92 	.word	0x0800ad92

08008a30 <_sbrk_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	2300      	movs	r3, #0
 8008a34:	4d05      	ldr	r5, [pc, #20]	; (8008a4c <_sbrk_r+0x1c>)
 8008a36:	4604      	mov	r4, r0
 8008a38:	4608      	mov	r0, r1
 8008a3a:	602b      	str	r3, [r5, #0]
 8008a3c:	f7f8 ff3a 	bl	80018b4 <_sbrk>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_sbrk_r+0x1a>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_sbrk_r+0x1a>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	200005dc 	.word	0x200005dc

08008a50 <__assert_func>:
 8008a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a52:	4614      	mov	r4, r2
 8008a54:	461a      	mov	r2, r3
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <__assert_func+0x2c>)
 8008a58:	4605      	mov	r5, r0
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68d8      	ldr	r0, [r3, #12]
 8008a5e:	b14c      	cbz	r4, 8008a74 <__assert_func+0x24>
 8008a60:	4b07      	ldr	r3, [pc, #28]	; (8008a80 <__assert_func+0x30>)
 8008a62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a66:	9100      	str	r1, [sp, #0]
 8008a68:	462b      	mov	r3, r5
 8008a6a:	4906      	ldr	r1, [pc, #24]	; (8008a84 <__assert_func+0x34>)
 8008a6c:	f000 f80e 	bl	8008a8c <fiprintf>
 8008a70:	f000 faa2 	bl	8008fb8 <abort>
 8008a74:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <__assert_func+0x38>)
 8008a76:	461c      	mov	r4, r3
 8008a78:	e7f3      	b.n	8008a62 <__assert_func+0x12>
 8008a7a:	bf00      	nop
 8008a7c:	2000002c 	.word	0x2000002c
 8008a80:	0800ad9d 	.word	0x0800ad9d
 8008a84:	0800adaa 	.word	0x0800adaa
 8008a88:	0800add8 	.word	0x0800add8

08008a8c <fiprintf>:
 8008a8c:	b40e      	push	{r1, r2, r3}
 8008a8e:	b503      	push	{r0, r1, lr}
 8008a90:	4601      	mov	r1, r0
 8008a92:	ab03      	add	r3, sp, #12
 8008a94:	4805      	ldr	r0, [pc, #20]	; (8008aac <fiprintf+0x20>)
 8008a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a9a:	6800      	ldr	r0, [r0, #0]
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	f000 f88d 	bl	8008bbc <_vfiprintf_r>
 8008aa2:	b002      	add	sp, #8
 8008aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aa8:	b003      	add	sp, #12
 8008aaa:	4770      	bx	lr
 8008aac:	2000002c 	.word	0x2000002c

08008ab0 <__ascii_mbtowc>:
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	b901      	cbnz	r1, 8008ab6 <__ascii_mbtowc+0x6>
 8008ab4:	a901      	add	r1, sp, #4
 8008ab6:	b142      	cbz	r2, 8008aca <__ascii_mbtowc+0x1a>
 8008ab8:	b14b      	cbz	r3, 8008ace <__ascii_mbtowc+0x1e>
 8008aba:	7813      	ldrb	r3, [r2, #0]
 8008abc:	600b      	str	r3, [r1, #0]
 8008abe:	7812      	ldrb	r2, [r2, #0]
 8008ac0:	1e10      	subs	r0, r2, #0
 8008ac2:	bf18      	it	ne
 8008ac4:	2001      	movne	r0, #1
 8008ac6:	b002      	add	sp, #8
 8008ac8:	4770      	bx	lr
 8008aca:	4610      	mov	r0, r2
 8008acc:	e7fb      	b.n	8008ac6 <__ascii_mbtowc+0x16>
 8008ace:	f06f 0001 	mvn.w	r0, #1
 8008ad2:	e7f8      	b.n	8008ac6 <__ascii_mbtowc+0x16>

08008ad4 <memmove>:
 8008ad4:	4288      	cmp	r0, r1
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	eb01 0402 	add.w	r4, r1, r2
 8008adc:	d902      	bls.n	8008ae4 <memmove+0x10>
 8008ade:	4284      	cmp	r4, r0
 8008ae0:	4623      	mov	r3, r4
 8008ae2:	d807      	bhi.n	8008af4 <memmove+0x20>
 8008ae4:	1e43      	subs	r3, r0, #1
 8008ae6:	42a1      	cmp	r1, r4
 8008ae8:	d008      	beq.n	8008afc <memmove+0x28>
 8008aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008af2:	e7f8      	b.n	8008ae6 <memmove+0x12>
 8008af4:	4601      	mov	r1, r0
 8008af6:	4402      	add	r2, r0
 8008af8:	428a      	cmp	r2, r1
 8008afa:	d100      	bne.n	8008afe <memmove+0x2a>
 8008afc:	bd10      	pop	{r4, pc}
 8008afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b06:	e7f7      	b.n	8008af8 <memmove+0x24>

08008b08 <__malloc_lock>:
 8008b08:	4801      	ldr	r0, [pc, #4]	; (8008b10 <__malloc_lock+0x8>)
 8008b0a:	f000 bc15 	b.w	8009338 <__retarget_lock_acquire_recursive>
 8008b0e:	bf00      	nop
 8008b10:	200005e4 	.word	0x200005e4

08008b14 <__malloc_unlock>:
 8008b14:	4801      	ldr	r0, [pc, #4]	; (8008b1c <__malloc_unlock+0x8>)
 8008b16:	f000 bc10 	b.w	800933a <__retarget_lock_release_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	200005e4 	.word	0x200005e4

08008b20 <_realloc_r>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	4607      	mov	r7, r0
 8008b24:	4614      	mov	r4, r2
 8008b26:	460e      	mov	r6, r1
 8008b28:	b921      	cbnz	r1, 8008b34 <_realloc_r+0x14>
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b30:	f7ff bdc8 	b.w	80086c4 <_malloc_r>
 8008b34:	b922      	cbnz	r2, 8008b40 <_realloc_r+0x20>
 8008b36:	f7ff fd79 	bl	800862c <_free_r>
 8008b3a:	4625      	mov	r5, r4
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b40:	f000 fc60 	bl	8009404 <_malloc_usable_size_r>
 8008b44:	42a0      	cmp	r0, r4
 8008b46:	d20f      	bcs.n	8008b68 <_realloc_r+0x48>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	f7ff fdba 	bl	80086c4 <_malloc_r>
 8008b50:	4605      	mov	r5, r0
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d0f2      	beq.n	8008b3c <_realloc_r+0x1c>
 8008b56:	4631      	mov	r1, r6
 8008b58:	4622      	mov	r2, r4
 8008b5a:	f7ff f9c9 	bl	8007ef0 <memcpy>
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7ff fd63 	bl	800862c <_free_r>
 8008b66:	e7e9      	b.n	8008b3c <_realloc_r+0x1c>
 8008b68:	4635      	mov	r5, r6
 8008b6a:	e7e7      	b.n	8008b3c <_realloc_r+0x1c>

08008b6c <__sfputc_r>:
 8008b6c:	6893      	ldr	r3, [r2, #8]
 8008b6e:	b410      	push	{r4}
 8008b70:	3b01      	subs	r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	6093      	str	r3, [r2, #8]
 8008b76:	da07      	bge.n	8008b88 <__sfputc_r+0x1c>
 8008b78:	6994      	ldr	r4, [r2, #24]
 8008b7a:	42a3      	cmp	r3, r4
 8008b7c:	db01      	blt.n	8008b82 <__sfputc_r+0x16>
 8008b7e:	290a      	cmp	r1, #10
 8008b80:	d102      	bne.n	8008b88 <__sfputc_r+0x1c>
 8008b82:	bc10      	pop	{r4}
 8008b84:	f000 b94a 	b.w	8008e1c <__swbuf_r>
 8008b88:	6813      	ldr	r3, [r2, #0]
 8008b8a:	1c58      	adds	r0, r3, #1
 8008b8c:	6010      	str	r0, [r2, #0]
 8008b8e:	7019      	strb	r1, [r3, #0]
 8008b90:	4608      	mov	r0, r1
 8008b92:	bc10      	pop	{r4}
 8008b94:	4770      	bx	lr

08008b96 <__sfputs_r>:
 8008b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b98:	4606      	mov	r6, r0
 8008b9a:	460f      	mov	r7, r1
 8008b9c:	4614      	mov	r4, r2
 8008b9e:	18d5      	adds	r5, r2, r3
 8008ba0:	42ac      	cmp	r4, r5
 8008ba2:	d101      	bne.n	8008ba8 <__sfputs_r+0x12>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e007      	b.n	8008bb8 <__sfputs_r+0x22>
 8008ba8:	463a      	mov	r2, r7
 8008baa:	4630      	mov	r0, r6
 8008bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb0:	f7ff ffdc 	bl	8008b6c <__sfputc_r>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d1f3      	bne.n	8008ba0 <__sfputs_r+0xa>
 8008bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bbc <_vfiprintf_r>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	460d      	mov	r5, r1
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	4698      	mov	r8, r3
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	b09d      	sub	sp, #116	; 0x74
 8008bca:	b118      	cbz	r0, 8008bd4 <_vfiprintf_r+0x18>
 8008bcc:	6983      	ldr	r3, [r0, #24]
 8008bce:	b90b      	cbnz	r3, 8008bd4 <_vfiprintf_r+0x18>
 8008bd0:	f000 fb14 	bl	80091fc <__sinit>
 8008bd4:	4b89      	ldr	r3, [pc, #548]	; (8008dfc <_vfiprintf_r+0x240>)
 8008bd6:	429d      	cmp	r5, r3
 8008bd8:	d11b      	bne.n	8008c12 <_vfiprintf_r+0x56>
 8008bda:	6875      	ldr	r5, [r6, #4]
 8008bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bde:	07d9      	lsls	r1, r3, #31
 8008be0:	d405      	bmi.n	8008bee <_vfiprintf_r+0x32>
 8008be2:	89ab      	ldrh	r3, [r5, #12]
 8008be4:	059a      	lsls	r2, r3, #22
 8008be6:	d402      	bmi.n	8008bee <_vfiprintf_r+0x32>
 8008be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bea:	f000 fba5 	bl	8009338 <__retarget_lock_acquire_recursive>
 8008bee:	89ab      	ldrh	r3, [r5, #12]
 8008bf0:	071b      	lsls	r3, r3, #28
 8008bf2:	d501      	bpl.n	8008bf8 <_vfiprintf_r+0x3c>
 8008bf4:	692b      	ldr	r3, [r5, #16]
 8008bf6:	b9eb      	cbnz	r3, 8008c34 <_vfiprintf_r+0x78>
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f000 f96e 	bl	8008edc <__swsetup_r>
 8008c00:	b1c0      	cbz	r0, 8008c34 <_vfiprintf_r+0x78>
 8008c02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c04:	07dc      	lsls	r4, r3, #31
 8008c06:	d50e      	bpl.n	8008c26 <_vfiprintf_r+0x6a>
 8008c08:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0c:	b01d      	add	sp, #116	; 0x74
 8008c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c12:	4b7b      	ldr	r3, [pc, #492]	; (8008e00 <_vfiprintf_r+0x244>)
 8008c14:	429d      	cmp	r5, r3
 8008c16:	d101      	bne.n	8008c1c <_vfiprintf_r+0x60>
 8008c18:	68b5      	ldr	r5, [r6, #8]
 8008c1a:	e7df      	b.n	8008bdc <_vfiprintf_r+0x20>
 8008c1c:	4b79      	ldr	r3, [pc, #484]	; (8008e04 <_vfiprintf_r+0x248>)
 8008c1e:	429d      	cmp	r5, r3
 8008c20:	bf08      	it	eq
 8008c22:	68f5      	ldreq	r5, [r6, #12]
 8008c24:	e7da      	b.n	8008bdc <_vfiprintf_r+0x20>
 8008c26:	89ab      	ldrh	r3, [r5, #12]
 8008c28:	0598      	lsls	r0, r3, #22
 8008c2a:	d4ed      	bmi.n	8008c08 <_vfiprintf_r+0x4c>
 8008c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c2e:	f000 fb84 	bl	800933a <__retarget_lock_release_recursive>
 8008c32:	e7e9      	b.n	8008c08 <_vfiprintf_r+0x4c>
 8008c34:	2300      	movs	r3, #0
 8008c36:	9309      	str	r3, [sp, #36]	; 0x24
 8008c38:	2320      	movs	r3, #32
 8008c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c3e:	2330      	movs	r3, #48	; 0x30
 8008c40:	f04f 0901 	mov.w	r9, #1
 8008c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c48:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008e08 <_vfiprintf_r+0x24c>
 8008c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c50:	4623      	mov	r3, r4
 8008c52:	469a      	mov	sl, r3
 8008c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c58:	b10a      	cbz	r2, 8008c5e <_vfiprintf_r+0xa2>
 8008c5a:	2a25      	cmp	r2, #37	; 0x25
 8008c5c:	d1f9      	bne.n	8008c52 <_vfiprintf_r+0x96>
 8008c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8008c62:	d00b      	beq.n	8008c7c <_vfiprintf_r+0xc0>
 8008c64:	465b      	mov	r3, fp
 8008c66:	4622      	mov	r2, r4
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7ff ff93 	bl	8008b96 <__sfputs_r>
 8008c70:	3001      	adds	r0, #1
 8008c72:	f000 80aa 	beq.w	8008dca <_vfiprintf_r+0x20e>
 8008c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c78:	445a      	add	r2, fp
 8008c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 80a2 	beq.w	8008dca <_vfiprintf_r+0x20e>
 8008c86:	2300      	movs	r3, #0
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c90:	f10a 0a01 	add.w	sl, sl, #1
 8008c94:	9304      	str	r3, [sp, #16]
 8008c96:	9307      	str	r3, [sp, #28]
 8008c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8008c9e:	4654      	mov	r4, sl
 8008ca0:	2205      	movs	r2, #5
 8008ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca6:	4858      	ldr	r0, [pc, #352]	; (8008e08 <_vfiprintf_r+0x24c>)
 8008ca8:	f7ff f914 	bl	8007ed4 <memchr>
 8008cac:	9a04      	ldr	r2, [sp, #16]
 8008cae:	b9d8      	cbnz	r0, 8008ce8 <_vfiprintf_r+0x12c>
 8008cb0:	06d1      	lsls	r1, r2, #27
 8008cb2:	bf44      	itt	mi
 8008cb4:	2320      	movmi	r3, #32
 8008cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cba:	0713      	lsls	r3, r2, #28
 8008cbc:	bf44      	itt	mi
 8008cbe:	232b      	movmi	r3, #43	; 0x2b
 8008cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cca:	d015      	beq.n	8008cf8 <_vfiprintf_r+0x13c>
 8008ccc:	4654      	mov	r4, sl
 8008cce:	2000      	movs	r0, #0
 8008cd0:	f04f 0c0a 	mov.w	ip, #10
 8008cd4:	9a07      	ldr	r2, [sp, #28]
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cdc:	3b30      	subs	r3, #48	; 0x30
 8008cde:	2b09      	cmp	r3, #9
 8008ce0:	d94e      	bls.n	8008d80 <_vfiprintf_r+0x1c4>
 8008ce2:	b1b0      	cbz	r0, 8008d12 <_vfiprintf_r+0x156>
 8008ce4:	9207      	str	r2, [sp, #28]
 8008ce6:	e014      	b.n	8008d12 <_vfiprintf_r+0x156>
 8008ce8:	eba0 0308 	sub.w	r3, r0, r8
 8008cec:	fa09 f303 	lsl.w	r3, r9, r3
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	46a2      	mov	sl, r4
 8008cf4:	9304      	str	r3, [sp, #16]
 8008cf6:	e7d2      	b.n	8008c9e <_vfiprintf_r+0xe2>
 8008cf8:	9b03      	ldr	r3, [sp, #12]
 8008cfa:	1d19      	adds	r1, r3, #4
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	9103      	str	r1, [sp, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	bfbb      	ittet	lt
 8008d04:	425b      	neglt	r3, r3
 8008d06:	f042 0202 	orrlt.w	r2, r2, #2
 8008d0a:	9307      	strge	r3, [sp, #28]
 8008d0c:	9307      	strlt	r3, [sp, #28]
 8008d0e:	bfb8      	it	lt
 8008d10:	9204      	strlt	r2, [sp, #16]
 8008d12:	7823      	ldrb	r3, [r4, #0]
 8008d14:	2b2e      	cmp	r3, #46	; 0x2e
 8008d16:	d10c      	bne.n	8008d32 <_vfiprintf_r+0x176>
 8008d18:	7863      	ldrb	r3, [r4, #1]
 8008d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d1c:	d135      	bne.n	8008d8a <_vfiprintf_r+0x1ce>
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	3402      	adds	r4, #2
 8008d22:	1d1a      	adds	r2, r3, #4
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	9203      	str	r2, [sp, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	bfb8      	it	lt
 8008d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d30:	9305      	str	r3, [sp, #20]
 8008d32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e18 <_vfiprintf_r+0x25c>
 8008d36:	2203      	movs	r2, #3
 8008d38:	4650      	mov	r0, sl
 8008d3a:	7821      	ldrb	r1, [r4, #0]
 8008d3c:	f7ff f8ca 	bl	8007ed4 <memchr>
 8008d40:	b140      	cbz	r0, 8008d54 <_vfiprintf_r+0x198>
 8008d42:	2340      	movs	r3, #64	; 0x40
 8008d44:	eba0 000a 	sub.w	r0, r0, sl
 8008d48:	fa03 f000 	lsl.w	r0, r3, r0
 8008d4c:	9b04      	ldr	r3, [sp, #16]
 8008d4e:	3401      	adds	r4, #1
 8008d50:	4303      	orrs	r3, r0
 8008d52:	9304      	str	r3, [sp, #16]
 8008d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d58:	2206      	movs	r2, #6
 8008d5a:	482c      	ldr	r0, [pc, #176]	; (8008e0c <_vfiprintf_r+0x250>)
 8008d5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d60:	f7ff f8b8 	bl	8007ed4 <memchr>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d03f      	beq.n	8008de8 <_vfiprintf_r+0x22c>
 8008d68:	4b29      	ldr	r3, [pc, #164]	; (8008e10 <_vfiprintf_r+0x254>)
 8008d6a:	bb1b      	cbnz	r3, 8008db4 <_vfiprintf_r+0x1f8>
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	3307      	adds	r3, #7
 8008d70:	f023 0307 	bic.w	r3, r3, #7
 8008d74:	3308      	adds	r3, #8
 8008d76:	9303      	str	r3, [sp, #12]
 8008d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7a:	443b      	add	r3, r7
 8008d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7e:	e767      	b.n	8008c50 <_vfiprintf_r+0x94>
 8008d80:	460c      	mov	r4, r1
 8008d82:	2001      	movs	r0, #1
 8008d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d88:	e7a5      	b.n	8008cd6 <_vfiprintf_r+0x11a>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f04f 0c0a 	mov.w	ip, #10
 8008d90:	4619      	mov	r1, r3
 8008d92:	3401      	adds	r4, #1
 8008d94:	9305      	str	r3, [sp, #20]
 8008d96:	4620      	mov	r0, r4
 8008d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d9c:	3a30      	subs	r2, #48	; 0x30
 8008d9e:	2a09      	cmp	r2, #9
 8008da0:	d903      	bls.n	8008daa <_vfiprintf_r+0x1ee>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0c5      	beq.n	8008d32 <_vfiprintf_r+0x176>
 8008da6:	9105      	str	r1, [sp, #20]
 8008da8:	e7c3      	b.n	8008d32 <_vfiprintf_r+0x176>
 8008daa:	4604      	mov	r4, r0
 8008dac:	2301      	movs	r3, #1
 8008dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db2:	e7f0      	b.n	8008d96 <_vfiprintf_r+0x1da>
 8008db4:	ab03      	add	r3, sp, #12
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	462a      	mov	r2, r5
 8008dba:	4630      	mov	r0, r6
 8008dbc:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <_vfiprintf_r+0x258>)
 8008dbe:	a904      	add	r1, sp, #16
 8008dc0:	f7fd fdfa 	bl	80069b8 <_printf_float>
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	1c78      	adds	r0, r7, #1
 8008dc8:	d1d6      	bne.n	8008d78 <_vfiprintf_r+0x1bc>
 8008dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dcc:	07d9      	lsls	r1, r3, #31
 8008dce:	d405      	bmi.n	8008ddc <_vfiprintf_r+0x220>
 8008dd0:	89ab      	ldrh	r3, [r5, #12]
 8008dd2:	059a      	lsls	r2, r3, #22
 8008dd4:	d402      	bmi.n	8008ddc <_vfiprintf_r+0x220>
 8008dd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dd8:	f000 faaf 	bl	800933a <__retarget_lock_release_recursive>
 8008ddc:	89ab      	ldrh	r3, [r5, #12]
 8008dde:	065b      	lsls	r3, r3, #25
 8008de0:	f53f af12 	bmi.w	8008c08 <_vfiprintf_r+0x4c>
 8008de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008de6:	e711      	b.n	8008c0c <_vfiprintf_r+0x50>
 8008de8:	ab03      	add	r3, sp, #12
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	462a      	mov	r2, r5
 8008dee:	4630      	mov	r0, r6
 8008df0:	4b08      	ldr	r3, [pc, #32]	; (8008e14 <_vfiprintf_r+0x258>)
 8008df2:	a904      	add	r1, sp, #16
 8008df4:	f7fe f87c 	bl	8006ef0 <_printf_i>
 8008df8:	e7e4      	b.n	8008dc4 <_vfiprintf_r+0x208>
 8008dfa:	bf00      	nop
 8008dfc:	0800af04 	.word	0x0800af04
 8008e00:	0800af24 	.word	0x0800af24
 8008e04:	0800aee4 	.word	0x0800aee4
 8008e08:	0800ad8c 	.word	0x0800ad8c
 8008e0c:	0800ad96 	.word	0x0800ad96
 8008e10:	080069b9 	.word	0x080069b9
 8008e14:	08008b97 	.word	0x08008b97
 8008e18:	0800ad92 	.word	0x0800ad92

08008e1c <__swbuf_r>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	460e      	mov	r6, r1
 8008e20:	4614      	mov	r4, r2
 8008e22:	4605      	mov	r5, r0
 8008e24:	b118      	cbz	r0, 8008e2e <__swbuf_r+0x12>
 8008e26:	6983      	ldr	r3, [r0, #24]
 8008e28:	b90b      	cbnz	r3, 8008e2e <__swbuf_r+0x12>
 8008e2a:	f000 f9e7 	bl	80091fc <__sinit>
 8008e2e:	4b21      	ldr	r3, [pc, #132]	; (8008eb4 <__swbuf_r+0x98>)
 8008e30:	429c      	cmp	r4, r3
 8008e32:	d12b      	bne.n	8008e8c <__swbuf_r+0x70>
 8008e34:	686c      	ldr	r4, [r5, #4]
 8008e36:	69a3      	ldr	r3, [r4, #24]
 8008e38:	60a3      	str	r3, [r4, #8]
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	071a      	lsls	r2, r3, #28
 8008e3e:	d52f      	bpl.n	8008ea0 <__swbuf_r+0x84>
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	b36b      	cbz	r3, 8008ea0 <__swbuf_r+0x84>
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	b2f6      	uxtb	r6, r6
 8008e4a:	1ac0      	subs	r0, r0, r3
 8008e4c:	6963      	ldr	r3, [r4, #20]
 8008e4e:	4637      	mov	r7, r6
 8008e50:	4283      	cmp	r3, r0
 8008e52:	dc04      	bgt.n	8008e5e <__swbuf_r+0x42>
 8008e54:	4621      	mov	r1, r4
 8008e56:	4628      	mov	r0, r5
 8008e58:	f000 f93c 	bl	80090d4 <_fflush_r>
 8008e5c:	bb30      	cbnz	r0, 8008eac <__swbuf_r+0x90>
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	3001      	adds	r0, #1
 8008e62:	3b01      	subs	r3, #1
 8008e64:	60a3      	str	r3, [r4, #8]
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	6022      	str	r2, [r4, #0]
 8008e6c:	701e      	strb	r6, [r3, #0]
 8008e6e:	6963      	ldr	r3, [r4, #20]
 8008e70:	4283      	cmp	r3, r0
 8008e72:	d004      	beq.n	8008e7e <__swbuf_r+0x62>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	07db      	lsls	r3, r3, #31
 8008e78:	d506      	bpl.n	8008e88 <__swbuf_r+0x6c>
 8008e7a:	2e0a      	cmp	r6, #10
 8008e7c:	d104      	bne.n	8008e88 <__swbuf_r+0x6c>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4628      	mov	r0, r5
 8008e82:	f000 f927 	bl	80090d4 <_fflush_r>
 8008e86:	b988      	cbnz	r0, 8008eac <__swbuf_r+0x90>
 8008e88:	4638      	mov	r0, r7
 8008e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <__swbuf_r+0x9c>)
 8008e8e:	429c      	cmp	r4, r3
 8008e90:	d101      	bne.n	8008e96 <__swbuf_r+0x7a>
 8008e92:	68ac      	ldr	r4, [r5, #8]
 8008e94:	e7cf      	b.n	8008e36 <__swbuf_r+0x1a>
 8008e96:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <__swbuf_r+0xa0>)
 8008e98:	429c      	cmp	r4, r3
 8008e9a:	bf08      	it	eq
 8008e9c:	68ec      	ldreq	r4, [r5, #12]
 8008e9e:	e7ca      	b.n	8008e36 <__swbuf_r+0x1a>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 f81a 	bl	8008edc <__swsetup_r>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d0cb      	beq.n	8008e44 <__swbuf_r+0x28>
 8008eac:	f04f 37ff 	mov.w	r7, #4294967295
 8008eb0:	e7ea      	b.n	8008e88 <__swbuf_r+0x6c>
 8008eb2:	bf00      	nop
 8008eb4:	0800af04 	.word	0x0800af04
 8008eb8:	0800af24 	.word	0x0800af24
 8008ebc:	0800aee4 	.word	0x0800aee4

08008ec0 <__ascii_wctomb>:
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	4608      	mov	r0, r1
 8008ec4:	b141      	cbz	r1, 8008ed8 <__ascii_wctomb+0x18>
 8008ec6:	2aff      	cmp	r2, #255	; 0xff
 8008ec8:	d904      	bls.n	8008ed4 <__ascii_wctomb+0x14>
 8008eca:	228a      	movs	r2, #138	; 0x8a
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	4770      	bx	lr
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	700a      	strb	r2, [r1, #0]
 8008ed8:	4770      	bx	lr
	...

08008edc <__swsetup_r>:
 8008edc:	4b32      	ldr	r3, [pc, #200]	; (8008fa8 <__swsetup_r+0xcc>)
 8008ede:	b570      	push	{r4, r5, r6, lr}
 8008ee0:	681d      	ldr	r5, [r3, #0]
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	b125      	cbz	r5, 8008ef2 <__swsetup_r+0x16>
 8008ee8:	69ab      	ldr	r3, [r5, #24]
 8008eea:	b913      	cbnz	r3, 8008ef2 <__swsetup_r+0x16>
 8008eec:	4628      	mov	r0, r5
 8008eee:	f000 f985 	bl	80091fc <__sinit>
 8008ef2:	4b2e      	ldr	r3, [pc, #184]	; (8008fac <__swsetup_r+0xd0>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	d10f      	bne.n	8008f18 <__swsetup_r+0x3c>
 8008ef8:	686c      	ldr	r4, [r5, #4]
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f00:	0719      	lsls	r1, r3, #28
 8008f02:	d42c      	bmi.n	8008f5e <__swsetup_r+0x82>
 8008f04:	06dd      	lsls	r5, r3, #27
 8008f06:	d411      	bmi.n	8008f2c <__swsetup_r+0x50>
 8008f08:	2309      	movs	r3, #9
 8008f0a:	6033      	str	r3, [r6, #0]
 8008f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f10:	f04f 30ff 	mov.w	r0, #4294967295
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	e03e      	b.n	8008f96 <__swsetup_r+0xba>
 8008f18:	4b25      	ldr	r3, [pc, #148]	; (8008fb0 <__swsetup_r+0xd4>)
 8008f1a:	429c      	cmp	r4, r3
 8008f1c:	d101      	bne.n	8008f22 <__swsetup_r+0x46>
 8008f1e:	68ac      	ldr	r4, [r5, #8]
 8008f20:	e7eb      	b.n	8008efa <__swsetup_r+0x1e>
 8008f22:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <__swsetup_r+0xd8>)
 8008f24:	429c      	cmp	r4, r3
 8008f26:	bf08      	it	eq
 8008f28:	68ec      	ldreq	r4, [r5, #12]
 8008f2a:	e7e6      	b.n	8008efa <__swsetup_r+0x1e>
 8008f2c:	0758      	lsls	r0, r3, #29
 8008f2e:	d512      	bpl.n	8008f56 <__swsetup_r+0x7a>
 8008f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f32:	b141      	cbz	r1, 8008f46 <__swsetup_r+0x6a>
 8008f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	d002      	beq.n	8008f42 <__swsetup_r+0x66>
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7ff fb75 	bl	800862c <_free_r>
 8008f42:	2300      	movs	r3, #0
 8008f44:	6363      	str	r3, [r4, #52]	; 0x34
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	b94b      	cbnz	r3, 8008f76 <__swsetup_r+0x9a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f6c:	d003      	beq.n	8008f76 <__swsetup_r+0x9a>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4630      	mov	r0, r6
 8008f72:	f000 fa07 	bl	8009384 <__smakebuf_r>
 8008f76:	89a0      	ldrh	r0, [r4, #12]
 8008f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f7c:	f010 0301 	ands.w	r3, r0, #1
 8008f80:	d00a      	beq.n	8008f98 <__swsetup_r+0xbc>
 8008f82:	2300      	movs	r3, #0
 8008f84:	60a3      	str	r3, [r4, #8]
 8008f86:	6963      	ldr	r3, [r4, #20]
 8008f88:	425b      	negs	r3, r3
 8008f8a:	61a3      	str	r3, [r4, #24]
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	b943      	cbnz	r3, 8008fa2 <__swsetup_r+0xc6>
 8008f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f94:	d1ba      	bne.n	8008f0c <__swsetup_r+0x30>
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	0781      	lsls	r1, r0, #30
 8008f9a:	bf58      	it	pl
 8008f9c:	6963      	ldrpl	r3, [r4, #20]
 8008f9e:	60a3      	str	r3, [r4, #8]
 8008fa0:	e7f4      	b.n	8008f8c <__swsetup_r+0xb0>
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e7f7      	b.n	8008f96 <__swsetup_r+0xba>
 8008fa6:	bf00      	nop
 8008fa8:	2000002c 	.word	0x2000002c
 8008fac:	0800af04 	.word	0x0800af04
 8008fb0:	0800af24 	.word	0x0800af24
 8008fb4:	0800aee4 	.word	0x0800aee4

08008fb8 <abort>:
 8008fb8:	2006      	movs	r0, #6
 8008fba:	b508      	push	{r3, lr}
 8008fbc:	f000 fa52 	bl	8009464 <raise>
 8008fc0:	2001      	movs	r0, #1
 8008fc2:	f7f8 fc04 	bl	80017ce <_exit>
	...

08008fc8 <__sflush_r>:
 8008fc8:	898a      	ldrh	r2, [r1, #12]
 8008fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fce:	4605      	mov	r5, r0
 8008fd0:	0710      	lsls	r0, r2, #28
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	d458      	bmi.n	8009088 <__sflush_r+0xc0>
 8008fd6:	684b      	ldr	r3, [r1, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	dc05      	bgt.n	8008fe8 <__sflush_r+0x20>
 8008fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	dc02      	bgt.n	8008fe8 <__sflush_r+0x20>
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	d0f9      	beq.n	8008fe2 <__sflush_r+0x1a>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ff4:	682f      	ldr	r7, [r5, #0]
 8008ff6:	602b      	str	r3, [r5, #0]
 8008ff8:	d032      	beq.n	8009060 <__sflush_r+0x98>
 8008ffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	075a      	lsls	r2, r3, #29
 8009000:	d505      	bpl.n	800900e <__sflush_r+0x46>
 8009002:	6863      	ldr	r3, [r4, #4]
 8009004:	1ac0      	subs	r0, r0, r3
 8009006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009008:	b10b      	cbz	r3, 800900e <__sflush_r+0x46>
 800900a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800900c:	1ac0      	subs	r0, r0, r3
 800900e:	2300      	movs	r3, #0
 8009010:	4602      	mov	r2, r0
 8009012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009014:	4628      	mov	r0, r5
 8009016:	6a21      	ldr	r1, [r4, #32]
 8009018:	47b0      	blx	r6
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	d106      	bne.n	800902e <__sflush_r+0x66>
 8009020:	6829      	ldr	r1, [r5, #0]
 8009022:	291d      	cmp	r1, #29
 8009024:	d82c      	bhi.n	8009080 <__sflush_r+0xb8>
 8009026:	4a2a      	ldr	r2, [pc, #168]	; (80090d0 <__sflush_r+0x108>)
 8009028:	40ca      	lsrs	r2, r1
 800902a:	07d6      	lsls	r6, r2, #31
 800902c:	d528      	bpl.n	8009080 <__sflush_r+0xb8>
 800902e:	2200      	movs	r2, #0
 8009030:	6062      	str	r2, [r4, #4]
 8009032:	6922      	ldr	r2, [r4, #16]
 8009034:	04d9      	lsls	r1, r3, #19
 8009036:	6022      	str	r2, [r4, #0]
 8009038:	d504      	bpl.n	8009044 <__sflush_r+0x7c>
 800903a:	1c42      	adds	r2, r0, #1
 800903c:	d101      	bne.n	8009042 <__sflush_r+0x7a>
 800903e:	682b      	ldr	r3, [r5, #0]
 8009040:	b903      	cbnz	r3, 8009044 <__sflush_r+0x7c>
 8009042:	6560      	str	r0, [r4, #84]	; 0x54
 8009044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009046:	602f      	str	r7, [r5, #0]
 8009048:	2900      	cmp	r1, #0
 800904a:	d0ca      	beq.n	8008fe2 <__sflush_r+0x1a>
 800904c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009050:	4299      	cmp	r1, r3
 8009052:	d002      	beq.n	800905a <__sflush_r+0x92>
 8009054:	4628      	mov	r0, r5
 8009056:	f7ff fae9 	bl	800862c <_free_r>
 800905a:	2000      	movs	r0, #0
 800905c:	6360      	str	r0, [r4, #52]	; 0x34
 800905e:	e7c1      	b.n	8008fe4 <__sflush_r+0x1c>
 8009060:	6a21      	ldr	r1, [r4, #32]
 8009062:	2301      	movs	r3, #1
 8009064:	4628      	mov	r0, r5
 8009066:	47b0      	blx	r6
 8009068:	1c41      	adds	r1, r0, #1
 800906a:	d1c7      	bne.n	8008ffc <__sflush_r+0x34>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0c4      	beq.n	8008ffc <__sflush_r+0x34>
 8009072:	2b1d      	cmp	r3, #29
 8009074:	d001      	beq.n	800907a <__sflush_r+0xb2>
 8009076:	2b16      	cmp	r3, #22
 8009078:	d101      	bne.n	800907e <__sflush_r+0xb6>
 800907a:	602f      	str	r7, [r5, #0]
 800907c:	e7b1      	b.n	8008fe2 <__sflush_r+0x1a>
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009084:	81a3      	strh	r3, [r4, #12]
 8009086:	e7ad      	b.n	8008fe4 <__sflush_r+0x1c>
 8009088:	690f      	ldr	r7, [r1, #16]
 800908a:	2f00      	cmp	r7, #0
 800908c:	d0a9      	beq.n	8008fe2 <__sflush_r+0x1a>
 800908e:	0793      	lsls	r3, r2, #30
 8009090:	bf18      	it	ne
 8009092:	2300      	movne	r3, #0
 8009094:	680e      	ldr	r6, [r1, #0]
 8009096:	bf08      	it	eq
 8009098:	694b      	ldreq	r3, [r1, #20]
 800909a:	eba6 0807 	sub.w	r8, r6, r7
 800909e:	600f      	str	r7, [r1, #0]
 80090a0:	608b      	str	r3, [r1, #8]
 80090a2:	f1b8 0f00 	cmp.w	r8, #0
 80090a6:	dd9c      	ble.n	8008fe2 <__sflush_r+0x1a>
 80090a8:	4643      	mov	r3, r8
 80090aa:	463a      	mov	r2, r7
 80090ac:	4628      	mov	r0, r5
 80090ae:	6a21      	ldr	r1, [r4, #32]
 80090b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090b2:	47b0      	blx	r6
 80090b4:	2800      	cmp	r0, #0
 80090b6:	dc06      	bgt.n	80090c6 <__sflush_r+0xfe>
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	f04f 30ff 	mov.w	r0, #4294967295
 80090be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c2:	81a3      	strh	r3, [r4, #12]
 80090c4:	e78e      	b.n	8008fe4 <__sflush_r+0x1c>
 80090c6:	4407      	add	r7, r0
 80090c8:	eba8 0800 	sub.w	r8, r8, r0
 80090cc:	e7e9      	b.n	80090a2 <__sflush_r+0xda>
 80090ce:	bf00      	nop
 80090d0:	20400001 	.word	0x20400001

080090d4 <_fflush_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	690b      	ldr	r3, [r1, #16]
 80090d8:	4605      	mov	r5, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	b913      	cbnz	r3, 80090e4 <_fflush_r+0x10>
 80090de:	2500      	movs	r5, #0
 80090e0:	4628      	mov	r0, r5
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	b118      	cbz	r0, 80090ee <_fflush_r+0x1a>
 80090e6:	6983      	ldr	r3, [r0, #24]
 80090e8:	b90b      	cbnz	r3, 80090ee <_fflush_r+0x1a>
 80090ea:	f000 f887 	bl	80091fc <__sinit>
 80090ee:	4b14      	ldr	r3, [pc, #80]	; (8009140 <_fflush_r+0x6c>)
 80090f0:	429c      	cmp	r4, r3
 80090f2:	d11b      	bne.n	800912c <_fflush_r+0x58>
 80090f4:	686c      	ldr	r4, [r5, #4]
 80090f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0ef      	beq.n	80090de <_fflush_r+0xa>
 80090fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009100:	07d0      	lsls	r0, r2, #31
 8009102:	d404      	bmi.n	800910e <_fflush_r+0x3a>
 8009104:	0599      	lsls	r1, r3, #22
 8009106:	d402      	bmi.n	800910e <_fflush_r+0x3a>
 8009108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800910a:	f000 f915 	bl	8009338 <__retarget_lock_acquire_recursive>
 800910e:	4628      	mov	r0, r5
 8009110:	4621      	mov	r1, r4
 8009112:	f7ff ff59 	bl	8008fc8 <__sflush_r>
 8009116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009118:	4605      	mov	r5, r0
 800911a:	07da      	lsls	r2, r3, #31
 800911c:	d4e0      	bmi.n	80090e0 <_fflush_r+0xc>
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	059b      	lsls	r3, r3, #22
 8009122:	d4dd      	bmi.n	80090e0 <_fflush_r+0xc>
 8009124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009126:	f000 f908 	bl	800933a <__retarget_lock_release_recursive>
 800912a:	e7d9      	b.n	80090e0 <_fflush_r+0xc>
 800912c:	4b05      	ldr	r3, [pc, #20]	; (8009144 <_fflush_r+0x70>)
 800912e:	429c      	cmp	r4, r3
 8009130:	d101      	bne.n	8009136 <_fflush_r+0x62>
 8009132:	68ac      	ldr	r4, [r5, #8]
 8009134:	e7df      	b.n	80090f6 <_fflush_r+0x22>
 8009136:	4b04      	ldr	r3, [pc, #16]	; (8009148 <_fflush_r+0x74>)
 8009138:	429c      	cmp	r4, r3
 800913a:	bf08      	it	eq
 800913c:	68ec      	ldreq	r4, [r5, #12]
 800913e:	e7da      	b.n	80090f6 <_fflush_r+0x22>
 8009140:	0800af04 	.word	0x0800af04
 8009144:	0800af24 	.word	0x0800af24
 8009148:	0800aee4 	.word	0x0800aee4

0800914c <std>:
 800914c:	2300      	movs	r3, #0
 800914e:	b510      	push	{r4, lr}
 8009150:	4604      	mov	r4, r0
 8009152:	e9c0 3300 	strd	r3, r3, [r0]
 8009156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800915a:	6083      	str	r3, [r0, #8]
 800915c:	8181      	strh	r1, [r0, #12]
 800915e:	6643      	str	r3, [r0, #100]	; 0x64
 8009160:	81c2      	strh	r2, [r0, #14]
 8009162:	6183      	str	r3, [r0, #24]
 8009164:	4619      	mov	r1, r3
 8009166:	2208      	movs	r2, #8
 8009168:	305c      	adds	r0, #92	; 0x5c
 800916a:	f7fd fb7f 	bl	800686c <memset>
 800916e:	4b05      	ldr	r3, [pc, #20]	; (8009184 <std+0x38>)
 8009170:	6224      	str	r4, [r4, #32]
 8009172:	6263      	str	r3, [r4, #36]	; 0x24
 8009174:	4b04      	ldr	r3, [pc, #16]	; (8009188 <std+0x3c>)
 8009176:	62a3      	str	r3, [r4, #40]	; 0x28
 8009178:	4b04      	ldr	r3, [pc, #16]	; (800918c <std+0x40>)
 800917a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800917c:	4b04      	ldr	r3, [pc, #16]	; (8009190 <std+0x44>)
 800917e:	6323      	str	r3, [r4, #48]	; 0x30
 8009180:	bd10      	pop	{r4, pc}
 8009182:	bf00      	nop
 8009184:	0800949d 	.word	0x0800949d
 8009188:	080094bf 	.word	0x080094bf
 800918c:	080094f7 	.word	0x080094f7
 8009190:	0800951b 	.word	0x0800951b

08009194 <_cleanup_r>:
 8009194:	4901      	ldr	r1, [pc, #4]	; (800919c <_cleanup_r+0x8>)
 8009196:	f000 b8af 	b.w	80092f8 <_fwalk_reent>
 800919a:	bf00      	nop
 800919c:	080090d5 	.word	0x080090d5

080091a0 <__sfmoreglue>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	2568      	movs	r5, #104	; 0x68
 80091a4:	1e4a      	subs	r2, r1, #1
 80091a6:	4355      	muls	r5, r2
 80091a8:	460e      	mov	r6, r1
 80091aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091ae:	f7ff fa89 	bl	80086c4 <_malloc_r>
 80091b2:	4604      	mov	r4, r0
 80091b4:	b140      	cbz	r0, 80091c8 <__sfmoreglue+0x28>
 80091b6:	2100      	movs	r1, #0
 80091b8:	e9c0 1600 	strd	r1, r6, [r0]
 80091bc:	300c      	adds	r0, #12
 80091be:	60a0      	str	r0, [r4, #8]
 80091c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091c4:	f7fd fb52 	bl	800686c <memset>
 80091c8:	4620      	mov	r0, r4
 80091ca:	bd70      	pop	{r4, r5, r6, pc}

080091cc <__sfp_lock_acquire>:
 80091cc:	4801      	ldr	r0, [pc, #4]	; (80091d4 <__sfp_lock_acquire+0x8>)
 80091ce:	f000 b8b3 	b.w	8009338 <__retarget_lock_acquire_recursive>
 80091d2:	bf00      	nop
 80091d4:	200005e8 	.word	0x200005e8

080091d8 <__sfp_lock_release>:
 80091d8:	4801      	ldr	r0, [pc, #4]	; (80091e0 <__sfp_lock_release+0x8>)
 80091da:	f000 b8ae 	b.w	800933a <__retarget_lock_release_recursive>
 80091de:	bf00      	nop
 80091e0:	200005e8 	.word	0x200005e8

080091e4 <__sinit_lock_acquire>:
 80091e4:	4801      	ldr	r0, [pc, #4]	; (80091ec <__sinit_lock_acquire+0x8>)
 80091e6:	f000 b8a7 	b.w	8009338 <__retarget_lock_acquire_recursive>
 80091ea:	bf00      	nop
 80091ec:	200005e3 	.word	0x200005e3

080091f0 <__sinit_lock_release>:
 80091f0:	4801      	ldr	r0, [pc, #4]	; (80091f8 <__sinit_lock_release+0x8>)
 80091f2:	f000 b8a2 	b.w	800933a <__retarget_lock_release_recursive>
 80091f6:	bf00      	nop
 80091f8:	200005e3 	.word	0x200005e3

080091fc <__sinit>:
 80091fc:	b510      	push	{r4, lr}
 80091fe:	4604      	mov	r4, r0
 8009200:	f7ff fff0 	bl	80091e4 <__sinit_lock_acquire>
 8009204:	69a3      	ldr	r3, [r4, #24]
 8009206:	b11b      	cbz	r3, 8009210 <__sinit+0x14>
 8009208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800920c:	f7ff bff0 	b.w	80091f0 <__sinit_lock_release>
 8009210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009214:	6523      	str	r3, [r4, #80]	; 0x50
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <__sinit+0x68>)
 8009218:	4a13      	ldr	r2, [pc, #76]	; (8009268 <__sinit+0x6c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	62a2      	str	r2, [r4, #40]	; 0x28
 800921e:	42a3      	cmp	r3, r4
 8009220:	bf08      	it	eq
 8009222:	2301      	moveq	r3, #1
 8009224:	4620      	mov	r0, r4
 8009226:	bf08      	it	eq
 8009228:	61a3      	streq	r3, [r4, #24]
 800922a:	f000 f81f 	bl	800926c <__sfp>
 800922e:	6060      	str	r0, [r4, #4]
 8009230:	4620      	mov	r0, r4
 8009232:	f000 f81b 	bl	800926c <__sfp>
 8009236:	60a0      	str	r0, [r4, #8]
 8009238:	4620      	mov	r0, r4
 800923a:	f000 f817 	bl	800926c <__sfp>
 800923e:	2200      	movs	r2, #0
 8009240:	2104      	movs	r1, #4
 8009242:	60e0      	str	r0, [r4, #12]
 8009244:	6860      	ldr	r0, [r4, #4]
 8009246:	f7ff ff81 	bl	800914c <std>
 800924a:	2201      	movs	r2, #1
 800924c:	2109      	movs	r1, #9
 800924e:	68a0      	ldr	r0, [r4, #8]
 8009250:	f7ff ff7c 	bl	800914c <std>
 8009254:	2202      	movs	r2, #2
 8009256:	2112      	movs	r1, #18
 8009258:	68e0      	ldr	r0, [r4, #12]
 800925a:	f7ff ff77 	bl	800914c <std>
 800925e:	2301      	movs	r3, #1
 8009260:	61a3      	str	r3, [r4, #24]
 8009262:	e7d1      	b.n	8009208 <__sinit+0xc>
 8009264:	0800ab60 	.word	0x0800ab60
 8009268:	08009195 	.word	0x08009195

0800926c <__sfp>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	4607      	mov	r7, r0
 8009270:	f7ff ffac 	bl	80091cc <__sfp_lock_acquire>
 8009274:	4b1e      	ldr	r3, [pc, #120]	; (80092f0 <__sfp+0x84>)
 8009276:	681e      	ldr	r6, [r3, #0]
 8009278:	69b3      	ldr	r3, [r6, #24]
 800927a:	b913      	cbnz	r3, 8009282 <__sfp+0x16>
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff ffbd 	bl	80091fc <__sinit>
 8009282:	3648      	adds	r6, #72	; 0x48
 8009284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009288:	3b01      	subs	r3, #1
 800928a:	d503      	bpl.n	8009294 <__sfp+0x28>
 800928c:	6833      	ldr	r3, [r6, #0]
 800928e:	b30b      	cbz	r3, 80092d4 <__sfp+0x68>
 8009290:	6836      	ldr	r6, [r6, #0]
 8009292:	e7f7      	b.n	8009284 <__sfp+0x18>
 8009294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009298:	b9d5      	cbnz	r5, 80092d0 <__sfp+0x64>
 800929a:	4b16      	ldr	r3, [pc, #88]	; (80092f4 <__sfp+0x88>)
 800929c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092a0:	60e3      	str	r3, [r4, #12]
 80092a2:	6665      	str	r5, [r4, #100]	; 0x64
 80092a4:	f000 f847 	bl	8009336 <__retarget_lock_init_recursive>
 80092a8:	f7ff ff96 	bl	80091d8 <__sfp_lock_release>
 80092ac:	2208      	movs	r2, #8
 80092ae:	4629      	mov	r1, r5
 80092b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092b8:	6025      	str	r5, [r4, #0]
 80092ba:	61a5      	str	r5, [r4, #24]
 80092bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092c0:	f7fd fad4 	bl	800686c <memset>
 80092c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092cc:	4620      	mov	r0, r4
 80092ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092d0:	3468      	adds	r4, #104	; 0x68
 80092d2:	e7d9      	b.n	8009288 <__sfp+0x1c>
 80092d4:	2104      	movs	r1, #4
 80092d6:	4638      	mov	r0, r7
 80092d8:	f7ff ff62 	bl	80091a0 <__sfmoreglue>
 80092dc:	4604      	mov	r4, r0
 80092de:	6030      	str	r0, [r6, #0]
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d1d5      	bne.n	8009290 <__sfp+0x24>
 80092e4:	f7ff ff78 	bl	80091d8 <__sfp_lock_release>
 80092e8:	230c      	movs	r3, #12
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	e7ee      	b.n	80092cc <__sfp+0x60>
 80092ee:	bf00      	nop
 80092f0:	0800ab60 	.word	0x0800ab60
 80092f4:	ffff0001 	.word	0xffff0001

080092f8 <_fwalk_reent>:
 80092f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092fc:	4606      	mov	r6, r0
 80092fe:	4688      	mov	r8, r1
 8009300:	2700      	movs	r7, #0
 8009302:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800930a:	f1b9 0901 	subs.w	r9, r9, #1
 800930e:	d505      	bpl.n	800931c <_fwalk_reent+0x24>
 8009310:	6824      	ldr	r4, [r4, #0]
 8009312:	2c00      	cmp	r4, #0
 8009314:	d1f7      	bne.n	8009306 <_fwalk_reent+0xe>
 8009316:	4638      	mov	r0, r7
 8009318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931c:	89ab      	ldrh	r3, [r5, #12]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d907      	bls.n	8009332 <_fwalk_reent+0x3a>
 8009322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009326:	3301      	adds	r3, #1
 8009328:	d003      	beq.n	8009332 <_fwalk_reent+0x3a>
 800932a:	4629      	mov	r1, r5
 800932c:	4630      	mov	r0, r6
 800932e:	47c0      	blx	r8
 8009330:	4307      	orrs	r7, r0
 8009332:	3568      	adds	r5, #104	; 0x68
 8009334:	e7e9      	b.n	800930a <_fwalk_reent+0x12>

08009336 <__retarget_lock_init_recursive>:
 8009336:	4770      	bx	lr

08009338 <__retarget_lock_acquire_recursive>:
 8009338:	4770      	bx	lr

0800933a <__retarget_lock_release_recursive>:
 800933a:	4770      	bx	lr

0800933c <__swhatbuf_r>:
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	460e      	mov	r6, r1
 8009340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009344:	4614      	mov	r4, r2
 8009346:	2900      	cmp	r1, #0
 8009348:	461d      	mov	r5, r3
 800934a:	b096      	sub	sp, #88	; 0x58
 800934c:	da07      	bge.n	800935e <__swhatbuf_r+0x22>
 800934e:	2300      	movs	r3, #0
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	89b3      	ldrh	r3, [r6, #12]
 8009354:	061a      	lsls	r2, r3, #24
 8009356:	d410      	bmi.n	800937a <__swhatbuf_r+0x3e>
 8009358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800935c:	e00e      	b.n	800937c <__swhatbuf_r+0x40>
 800935e:	466a      	mov	r2, sp
 8009360:	f000 f902 	bl	8009568 <_fstat_r>
 8009364:	2800      	cmp	r0, #0
 8009366:	dbf2      	blt.n	800934e <__swhatbuf_r+0x12>
 8009368:	9a01      	ldr	r2, [sp, #4]
 800936a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800936e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009372:	425a      	negs	r2, r3
 8009374:	415a      	adcs	r2, r3
 8009376:	602a      	str	r2, [r5, #0]
 8009378:	e7ee      	b.n	8009358 <__swhatbuf_r+0x1c>
 800937a:	2340      	movs	r3, #64	; 0x40
 800937c:	2000      	movs	r0, #0
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	b016      	add	sp, #88	; 0x58
 8009382:	bd70      	pop	{r4, r5, r6, pc}

08009384 <__smakebuf_r>:
 8009384:	898b      	ldrh	r3, [r1, #12]
 8009386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009388:	079d      	lsls	r5, r3, #30
 800938a:	4606      	mov	r6, r0
 800938c:	460c      	mov	r4, r1
 800938e:	d507      	bpl.n	80093a0 <__smakebuf_r+0x1c>
 8009390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	6123      	str	r3, [r4, #16]
 8009398:	2301      	movs	r3, #1
 800939a:	6163      	str	r3, [r4, #20]
 800939c:	b002      	add	sp, #8
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	466a      	mov	r2, sp
 80093a2:	ab01      	add	r3, sp, #4
 80093a4:	f7ff ffca 	bl	800933c <__swhatbuf_r>
 80093a8:	9900      	ldr	r1, [sp, #0]
 80093aa:	4605      	mov	r5, r0
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff f989 	bl	80086c4 <_malloc_r>
 80093b2:	b948      	cbnz	r0, 80093c8 <__smakebuf_r+0x44>
 80093b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b8:	059a      	lsls	r2, r3, #22
 80093ba:	d4ef      	bmi.n	800939c <__smakebuf_r+0x18>
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	f043 0302 	orr.w	r3, r3, #2
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	e7e3      	b.n	8009390 <__smakebuf_r+0xc>
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <__smakebuf_r+0x7c>)
 80093ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	6020      	str	r0, [r4, #0]
 80093d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	9b00      	ldr	r3, [sp, #0]
 80093d8:	6120      	str	r0, [r4, #16]
 80093da:	6163      	str	r3, [r4, #20]
 80093dc:	9b01      	ldr	r3, [sp, #4]
 80093de:	b15b      	cbz	r3, 80093f8 <__smakebuf_r+0x74>
 80093e0:	4630      	mov	r0, r6
 80093e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e6:	f000 f8d1 	bl	800958c <_isatty_r>
 80093ea:	b128      	cbz	r0, 80093f8 <__smakebuf_r+0x74>
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	f043 0301 	orr.w	r3, r3, #1
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	89a0      	ldrh	r0, [r4, #12]
 80093fa:	4305      	orrs	r5, r0
 80093fc:	81a5      	strh	r5, [r4, #12]
 80093fe:	e7cd      	b.n	800939c <__smakebuf_r+0x18>
 8009400:	08009195 	.word	0x08009195

08009404 <_malloc_usable_size_r>:
 8009404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009408:	1f18      	subs	r0, r3, #4
 800940a:	2b00      	cmp	r3, #0
 800940c:	bfbc      	itt	lt
 800940e:	580b      	ldrlt	r3, [r1, r0]
 8009410:	18c0      	addlt	r0, r0, r3
 8009412:	4770      	bx	lr

08009414 <_raise_r>:
 8009414:	291f      	cmp	r1, #31
 8009416:	b538      	push	{r3, r4, r5, lr}
 8009418:	4604      	mov	r4, r0
 800941a:	460d      	mov	r5, r1
 800941c:	d904      	bls.n	8009428 <_raise_r+0x14>
 800941e:	2316      	movs	r3, #22
 8009420:	6003      	str	r3, [r0, #0]
 8009422:	f04f 30ff 	mov.w	r0, #4294967295
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800942a:	b112      	cbz	r2, 8009432 <_raise_r+0x1e>
 800942c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009430:	b94b      	cbnz	r3, 8009446 <_raise_r+0x32>
 8009432:	4620      	mov	r0, r4
 8009434:	f000 f830 	bl	8009498 <_getpid_r>
 8009438:	462a      	mov	r2, r5
 800943a:	4601      	mov	r1, r0
 800943c:	4620      	mov	r0, r4
 800943e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009442:	f000 b817 	b.w	8009474 <_kill_r>
 8009446:	2b01      	cmp	r3, #1
 8009448:	d00a      	beq.n	8009460 <_raise_r+0x4c>
 800944a:	1c59      	adds	r1, r3, #1
 800944c:	d103      	bne.n	8009456 <_raise_r+0x42>
 800944e:	2316      	movs	r3, #22
 8009450:	6003      	str	r3, [r0, #0]
 8009452:	2001      	movs	r0, #1
 8009454:	e7e7      	b.n	8009426 <_raise_r+0x12>
 8009456:	2400      	movs	r4, #0
 8009458:	4628      	mov	r0, r5
 800945a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800945e:	4798      	blx	r3
 8009460:	2000      	movs	r0, #0
 8009462:	e7e0      	b.n	8009426 <_raise_r+0x12>

08009464 <raise>:
 8009464:	4b02      	ldr	r3, [pc, #8]	; (8009470 <raise+0xc>)
 8009466:	4601      	mov	r1, r0
 8009468:	6818      	ldr	r0, [r3, #0]
 800946a:	f7ff bfd3 	b.w	8009414 <_raise_r>
 800946e:	bf00      	nop
 8009470:	2000002c 	.word	0x2000002c

08009474 <_kill_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	2300      	movs	r3, #0
 8009478:	4d06      	ldr	r5, [pc, #24]	; (8009494 <_kill_r+0x20>)
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	4611      	mov	r1, r2
 8009480:	602b      	str	r3, [r5, #0]
 8009482:	f7f8 f994 	bl	80017ae <_kill>
 8009486:	1c43      	adds	r3, r0, #1
 8009488:	d102      	bne.n	8009490 <_kill_r+0x1c>
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	b103      	cbz	r3, 8009490 <_kill_r+0x1c>
 800948e:	6023      	str	r3, [r4, #0]
 8009490:	bd38      	pop	{r3, r4, r5, pc}
 8009492:	bf00      	nop
 8009494:	200005dc 	.word	0x200005dc

08009498 <_getpid_r>:
 8009498:	f7f8 b982 	b.w	80017a0 <_getpid>

0800949c <__sread>:
 800949c:	b510      	push	{r4, lr}
 800949e:	460c      	mov	r4, r1
 80094a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a4:	f000 f894 	bl	80095d0 <_read_r>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	bfab      	itete	ge
 80094ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094ae:	89a3      	ldrhlt	r3, [r4, #12]
 80094b0:	181b      	addge	r3, r3, r0
 80094b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094b6:	bfac      	ite	ge
 80094b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ba:	81a3      	strhlt	r3, [r4, #12]
 80094bc:	bd10      	pop	{r4, pc}

080094be <__swrite>:
 80094be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c2:	461f      	mov	r7, r3
 80094c4:	898b      	ldrh	r3, [r1, #12]
 80094c6:	4605      	mov	r5, r0
 80094c8:	05db      	lsls	r3, r3, #23
 80094ca:	460c      	mov	r4, r1
 80094cc:	4616      	mov	r6, r2
 80094ce:	d505      	bpl.n	80094dc <__swrite+0x1e>
 80094d0:	2302      	movs	r3, #2
 80094d2:	2200      	movs	r2, #0
 80094d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d8:	f000 f868 	bl	80095ac <_lseek_r>
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	4632      	mov	r2, r6
 80094e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094e4:	81a3      	strh	r3, [r4, #12]
 80094e6:	4628      	mov	r0, r5
 80094e8:	463b      	mov	r3, r7
 80094ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f2:	f000 b817 	b.w	8009524 <_write_r>

080094f6 <__sseek>:
 80094f6:	b510      	push	{r4, lr}
 80094f8:	460c      	mov	r4, r1
 80094fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fe:	f000 f855 	bl	80095ac <_lseek_r>
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	bf15      	itete	ne
 8009508:	6560      	strne	r0, [r4, #84]	; 0x54
 800950a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800950e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009512:	81a3      	strheq	r3, [r4, #12]
 8009514:	bf18      	it	ne
 8009516:	81a3      	strhne	r3, [r4, #12]
 8009518:	bd10      	pop	{r4, pc}

0800951a <__sclose>:
 800951a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951e:	f000 b813 	b.w	8009548 <_close_r>
	...

08009524 <_write_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	4611      	mov	r1, r2
 800952c:	2200      	movs	r2, #0
 800952e:	4d05      	ldr	r5, [pc, #20]	; (8009544 <_write_r+0x20>)
 8009530:	602a      	str	r2, [r5, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	f7f8 f972 	bl	800181c <_write>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d102      	bne.n	8009542 <_write_r+0x1e>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b103      	cbz	r3, 8009542 <_write_r+0x1e>
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	200005dc 	.word	0x200005dc

08009548 <_close_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	2300      	movs	r3, #0
 800954c:	4d05      	ldr	r5, [pc, #20]	; (8009564 <_close_r+0x1c>)
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	602b      	str	r3, [r5, #0]
 8009554:	f7f8 f97e 	bl	8001854 <_close>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	d102      	bne.n	8009562 <_close_r+0x1a>
 800955c:	682b      	ldr	r3, [r5, #0]
 800955e:	b103      	cbz	r3, 8009562 <_close_r+0x1a>
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	bd38      	pop	{r3, r4, r5, pc}
 8009564:	200005dc 	.word	0x200005dc

08009568 <_fstat_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	2300      	movs	r3, #0
 800956c:	4d06      	ldr	r5, [pc, #24]	; (8009588 <_fstat_r+0x20>)
 800956e:	4604      	mov	r4, r0
 8009570:	4608      	mov	r0, r1
 8009572:	4611      	mov	r1, r2
 8009574:	602b      	str	r3, [r5, #0]
 8009576:	f7f8 f978 	bl	800186a <_fstat>
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	d102      	bne.n	8009584 <_fstat_r+0x1c>
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	b103      	cbz	r3, 8009584 <_fstat_r+0x1c>
 8009582:	6023      	str	r3, [r4, #0]
 8009584:	bd38      	pop	{r3, r4, r5, pc}
 8009586:	bf00      	nop
 8009588:	200005dc 	.word	0x200005dc

0800958c <_isatty_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	2300      	movs	r3, #0
 8009590:	4d05      	ldr	r5, [pc, #20]	; (80095a8 <_isatty_r+0x1c>)
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	602b      	str	r3, [r5, #0]
 8009598:	f7f8 f976 	bl	8001888 <_isatty>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_isatty_r+0x1a>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_isatty_r+0x1a>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	200005dc 	.word	0x200005dc

080095ac <_lseek_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	2200      	movs	r2, #0
 80095b6:	4d05      	ldr	r5, [pc, #20]	; (80095cc <_lseek_r+0x20>)
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f7f8 f96e 	bl	800189c <_lseek>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_lseek_r+0x1e>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_lseek_r+0x1e>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	200005dc 	.word	0x200005dc

080095d0 <_read_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	4611      	mov	r1, r2
 80095d8:	2200      	movs	r2, #0
 80095da:	4d05      	ldr	r5, [pc, #20]	; (80095f0 <_read_r+0x20>)
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f7f8 f8ff 	bl	80017e2 <_read>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_read_r+0x1e>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_read_r+0x1e>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	200005dc 	.word	0x200005dc

080095f4 <fabs>:
 80095f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80095f8:	4770      	bx	lr
	...

080095fc <cosf>:
 80095fc:	b507      	push	{r0, r1, r2, lr}
 80095fe:	4a18      	ldr	r2, [pc, #96]	; (8009660 <cosf+0x64>)
 8009600:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009604:	4293      	cmp	r3, r2
 8009606:	4601      	mov	r1, r0
 8009608:	dc03      	bgt.n	8009612 <cosf+0x16>
 800960a:	2100      	movs	r1, #0
 800960c:	f000 fd1c 	bl	800a048 <__kernel_cosf>
 8009610:	e004      	b.n	800961c <cosf+0x20>
 8009612:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009616:	db04      	blt.n	8009622 <cosf+0x26>
 8009618:	f7f7 fa9a 	bl	8000b50 <__aeabi_fsub>
 800961c:	b003      	add	sp, #12
 800961e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009622:	4669      	mov	r1, sp
 8009624:	f000 fbb2 	bl	8009d8c <__ieee754_rem_pio2f>
 8009628:	f000 0203 	and.w	r2, r0, #3
 800962c:	2a01      	cmp	r2, #1
 800962e:	d005      	beq.n	800963c <cosf+0x40>
 8009630:	2a02      	cmp	r2, #2
 8009632:	d00a      	beq.n	800964a <cosf+0x4e>
 8009634:	b972      	cbnz	r2, 8009654 <cosf+0x58>
 8009636:	9901      	ldr	r1, [sp, #4]
 8009638:	9800      	ldr	r0, [sp, #0]
 800963a:	e7e7      	b.n	800960c <cosf+0x10>
 800963c:	9901      	ldr	r1, [sp, #4]
 800963e:	9800      	ldr	r0, [sp, #0]
 8009640:	f001 f838 	bl	800a6b4 <__kernel_sinf>
 8009644:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009648:	e7e8      	b.n	800961c <cosf+0x20>
 800964a:	9901      	ldr	r1, [sp, #4]
 800964c:	9800      	ldr	r0, [sp, #0]
 800964e:	f000 fcfb 	bl	800a048 <__kernel_cosf>
 8009652:	e7f7      	b.n	8009644 <cosf+0x48>
 8009654:	2201      	movs	r2, #1
 8009656:	9901      	ldr	r1, [sp, #4]
 8009658:	9800      	ldr	r0, [sp, #0]
 800965a:	f001 f82b 	bl	800a6b4 <__kernel_sinf>
 800965e:	e7dd      	b.n	800961c <cosf+0x20>
 8009660:	3f490fd8 	.word	0x3f490fd8

08009664 <sinf>:
 8009664:	b507      	push	{r0, r1, r2, lr}
 8009666:	4a19      	ldr	r2, [pc, #100]	; (80096cc <sinf+0x68>)
 8009668:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800966c:	4293      	cmp	r3, r2
 800966e:	4601      	mov	r1, r0
 8009670:	dc04      	bgt.n	800967c <sinf+0x18>
 8009672:	2200      	movs	r2, #0
 8009674:	2100      	movs	r1, #0
 8009676:	f001 f81d 	bl	800a6b4 <__kernel_sinf>
 800967a:	e004      	b.n	8009686 <sinf+0x22>
 800967c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009680:	db04      	blt.n	800968c <sinf+0x28>
 8009682:	f7f7 fa65 	bl	8000b50 <__aeabi_fsub>
 8009686:	b003      	add	sp, #12
 8009688:	f85d fb04 	ldr.w	pc, [sp], #4
 800968c:	4669      	mov	r1, sp
 800968e:	f000 fb7d 	bl	8009d8c <__ieee754_rem_pio2f>
 8009692:	f000 0003 	and.w	r0, r0, #3
 8009696:	2801      	cmp	r0, #1
 8009698:	d006      	beq.n	80096a8 <sinf+0x44>
 800969a:	2802      	cmp	r0, #2
 800969c:	d009      	beq.n	80096b2 <sinf+0x4e>
 800969e:	b980      	cbnz	r0, 80096c2 <sinf+0x5e>
 80096a0:	2201      	movs	r2, #1
 80096a2:	9901      	ldr	r1, [sp, #4]
 80096a4:	9800      	ldr	r0, [sp, #0]
 80096a6:	e7e6      	b.n	8009676 <sinf+0x12>
 80096a8:	9901      	ldr	r1, [sp, #4]
 80096aa:	9800      	ldr	r0, [sp, #0]
 80096ac:	f000 fccc 	bl	800a048 <__kernel_cosf>
 80096b0:	e7e9      	b.n	8009686 <sinf+0x22>
 80096b2:	2201      	movs	r2, #1
 80096b4:	9901      	ldr	r1, [sp, #4]
 80096b6:	9800      	ldr	r0, [sp, #0]
 80096b8:	f000 fffc 	bl	800a6b4 <__kernel_sinf>
 80096bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80096c0:	e7e1      	b.n	8009686 <sinf+0x22>
 80096c2:	9901      	ldr	r1, [sp, #4]
 80096c4:	9800      	ldr	r0, [sp, #0]
 80096c6:	f000 fcbf 	bl	800a048 <__kernel_cosf>
 80096ca:	e7f7      	b.n	80096bc <sinf+0x58>
 80096cc:	3f490fd8 	.word	0x3f490fd8

080096d0 <asin>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	4604      	mov	r4, r0
 80096d4:	460d      	mov	r5, r1
 80096d6:	f000 f82b 	bl	8009730 <__ieee754_asin>
 80096da:	4b11      	ldr	r3, [pc, #68]	; (8009720 <asin+0x50>)
 80096dc:	4606      	mov	r6, r0
 80096de:	f993 3000 	ldrsb.w	r3, [r3]
 80096e2:	460f      	mov	r7, r1
 80096e4:	3301      	adds	r3, #1
 80096e6:	d018      	beq.n	800971a <asin+0x4a>
 80096e8:	4622      	mov	r2, r4
 80096ea:	462b      	mov	r3, r5
 80096ec:	4620      	mov	r0, r4
 80096ee:	4629      	mov	r1, r5
 80096f0:	f7f7 f99c 	bl	8000a2c <__aeabi_dcmpun>
 80096f4:	b988      	cbnz	r0, 800971a <asin+0x4a>
 80096f6:	4620      	mov	r0, r4
 80096f8:	4629      	mov	r1, r5
 80096fa:	f7ff ff7b 	bl	80095f4 <fabs>
 80096fe:	2200      	movs	r2, #0
 8009700:	4b08      	ldr	r3, [pc, #32]	; (8009724 <asin+0x54>)
 8009702:	f7f7 f989 	bl	8000a18 <__aeabi_dcmpgt>
 8009706:	b140      	cbz	r0, 800971a <asin+0x4a>
 8009708:	f7fd f886 	bl	8006818 <__errno>
 800970c:	2321      	movs	r3, #33	; 0x21
 800970e:	6003      	str	r3, [r0, #0]
 8009710:	4805      	ldr	r0, [pc, #20]	; (8009728 <asin+0x58>)
 8009712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009716:	f001 b843 	b.w	800a7a0 <nan>
 800971a:	4630      	mov	r0, r6
 800971c:	4639      	mov	r1, r7
 800971e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009720:	200001fc 	.word	0x200001fc
 8009724:	3ff00000 	.word	0x3ff00000
 8009728:	0800add8 	.word	0x0800add8

0800972c <atan2f>:
 800972c:	f000 baa8 	b.w	8009c80 <__ieee754_atan2f>

08009730 <__ieee754_asin>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	4bc4      	ldr	r3, [pc, #784]	; (8009a48 <__ieee754_asin+0x318>)
 8009736:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800973a:	b087      	sub	sp, #28
 800973c:	429e      	cmp	r6, r3
 800973e:	4602      	mov	r2, r0
 8009740:	4604      	mov	r4, r0
 8009742:	460d      	mov	r5, r1
 8009744:	9105      	str	r1, [sp, #20]
 8009746:	dd29      	ble.n	800979c <__ieee754_asin+0x6c>
 8009748:	4603      	mov	r3, r0
 800974a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800974e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8009752:	4333      	orrs	r3, r6
 8009754:	d114      	bne.n	8009780 <__ieee754_asin+0x50>
 8009756:	a3a2      	add	r3, pc, #648	; (adr r3, 80099e0 <__ieee754_asin+0x2b0>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f7f6 fecc 	bl	80004f8 <__aeabi_dmul>
 8009760:	a3a1      	add	r3, pc, #644	; (adr r3, 80099e8 <__ieee754_asin+0x2b8>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	4606      	mov	r6, r0
 8009768:	460f      	mov	r7, r1
 800976a:	4620      	mov	r0, r4
 800976c:	4629      	mov	r1, r5
 800976e:	f7f6 fec3 	bl	80004f8 <__aeabi_dmul>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4630      	mov	r0, r6
 8009778:	4639      	mov	r1, r7
 800977a:	f7f6 fd07 	bl	800018c <__adddf3>
 800977e:	e006      	b.n	800978e <__ieee754_asin+0x5e>
 8009780:	460b      	mov	r3, r1
 8009782:	f7f6 fd01 	bl	8000188 <__aeabi_dsub>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	f7f6 ffdf 	bl	800074c <__aeabi_ddiv>
 800978e:	4604      	mov	r4, r0
 8009790:	460d      	mov	r5, r1
 8009792:	4620      	mov	r0, r4
 8009794:	4629      	mov	r1, r5
 8009796:	b007      	add	sp, #28
 8009798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979c:	4bab      	ldr	r3, [pc, #684]	; (8009a4c <__ieee754_asin+0x31c>)
 800979e:	429e      	cmp	r6, r3
 80097a0:	dc0e      	bgt.n	80097c0 <__ieee754_asin+0x90>
 80097a2:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80097a6:	f280 80ab 	bge.w	8009900 <__ieee754_asin+0x1d0>
 80097aa:	a391      	add	r3, pc, #580	; (adr r3, 80099f0 <__ieee754_asin+0x2c0>)
 80097ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b0:	f7f6 fcec 	bl	800018c <__adddf3>
 80097b4:	2200      	movs	r2, #0
 80097b6:	4ba6      	ldr	r3, [pc, #664]	; (8009a50 <__ieee754_asin+0x320>)
 80097b8:	f7f7 f92e 	bl	8000a18 <__aeabi_dcmpgt>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d1e8      	bne.n	8009792 <__ieee754_asin+0x62>
 80097c0:	4620      	mov	r0, r4
 80097c2:	4629      	mov	r1, r5
 80097c4:	f7ff ff16 	bl	80095f4 <fabs>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	2000      	movs	r0, #0
 80097ce:	49a0      	ldr	r1, [pc, #640]	; (8009a50 <__ieee754_asin+0x320>)
 80097d0:	f7f6 fcda 	bl	8000188 <__aeabi_dsub>
 80097d4:	2200      	movs	r2, #0
 80097d6:	4b9f      	ldr	r3, [pc, #636]	; (8009a54 <__ieee754_asin+0x324>)
 80097d8:	f7f6 fe8e 	bl	80004f8 <__aeabi_dmul>
 80097dc:	a386      	add	r3, pc, #536	; (adr r3, 80099f8 <__ieee754_asin+0x2c8>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	f7f6 fe87 	bl	80004f8 <__aeabi_dmul>
 80097ea:	a385      	add	r3, pc, #532	; (adr r3, 8009a00 <__ieee754_asin+0x2d0>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f7f6 fccc 	bl	800018c <__adddf3>
 80097f4:	4622      	mov	r2, r4
 80097f6:	462b      	mov	r3, r5
 80097f8:	f7f6 fe7e 	bl	80004f8 <__aeabi_dmul>
 80097fc:	a382      	add	r3, pc, #520	; (adr r3, 8009a08 <__ieee754_asin+0x2d8>)
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	f7f6 fcc1 	bl	8000188 <__aeabi_dsub>
 8009806:	4622      	mov	r2, r4
 8009808:	462b      	mov	r3, r5
 800980a:	f7f6 fe75 	bl	80004f8 <__aeabi_dmul>
 800980e:	a380      	add	r3, pc, #512	; (adr r3, 8009a10 <__ieee754_asin+0x2e0>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f6 fcba 	bl	800018c <__adddf3>
 8009818:	4622      	mov	r2, r4
 800981a:	462b      	mov	r3, r5
 800981c:	f7f6 fe6c 	bl	80004f8 <__aeabi_dmul>
 8009820:	a37d      	add	r3, pc, #500	; (adr r3, 8009a18 <__ieee754_asin+0x2e8>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 fcaf 	bl	8000188 <__aeabi_dsub>
 800982a:	4622      	mov	r2, r4
 800982c:	462b      	mov	r3, r5
 800982e:	f7f6 fe63 	bl	80004f8 <__aeabi_dmul>
 8009832:	a37b      	add	r3, pc, #492	; (adr r3, 8009a20 <__ieee754_asin+0x2f0>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f7f6 fca8 	bl	800018c <__adddf3>
 800983c:	4622      	mov	r2, r4
 800983e:	462b      	mov	r3, r5
 8009840:	f7f6 fe5a 	bl	80004f8 <__aeabi_dmul>
 8009844:	a378      	add	r3, pc, #480	; (adr r3, 8009a28 <__ieee754_asin+0x2f8>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	e9cd 0100 	strd	r0, r1, [sp]
 800984e:	4620      	mov	r0, r4
 8009850:	4629      	mov	r1, r5
 8009852:	f7f6 fe51 	bl	80004f8 <__aeabi_dmul>
 8009856:	a376      	add	r3, pc, #472	; (adr r3, 8009a30 <__ieee754_asin+0x300>)
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	f7f6 fc94 	bl	8000188 <__aeabi_dsub>
 8009860:	4622      	mov	r2, r4
 8009862:	462b      	mov	r3, r5
 8009864:	f7f6 fe48 	bl	80004f8 <__aeabi_dmul>
 8009868:	a373      	add	r3, pc, #460	; (adr r3, 8009a38 <__ieee754_asin+0x308>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f7f6 fc8d 	bl	800018c <__adddf3>
 8009872:	4622      	mov	r2, r4
 8009874:	462b      	mov	r3, r5
 8009876:	f7f6 fe3f 	bl	80004f8 <__aeabi_dmul>
 800987a:	a371      	add	r3, pc, #452	; (adr r3, 8009a40 <__ieee754_asin+0x310>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 fc82 	bl	8000188 <__aeabi_dsub>
 8009884:	4622      	mov	r2, r4
 8009886:	462b      	mov	r3, r5
 8009888:	f7f6 fe36 	bl	80004f8 <__aeabi_dmul>
 800988c:	4b70      	ldr	r3, [pc, #448]	; (8009a50 <__ieee754_asin+0x320>)
 800988e:	2200      	movs	r2, #0
 8009890:	f7f6 fc7c 	bl	800018c <__adddf3>
 8009894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009898:	4620      	mov	r0, r4
 800989a:	4629      	mov	r1, r5
 800989c:	f000 f944 	bl	8009b28 <__ieee754_sqrt>
 80098a0:	4b6d      	ldr	r3, [pc, #436]	; (8009a58 <__ieee754_asin+0x328>)
 80098a2:	4682      	mov	sl, r0
 80098a4:	429e      	cmp	r6, r3
 80098a6:	468b      	mov	fp, r1
 80098a8:	f340 80d8 	ble.w	8009a5c <__ieee754_asin+0x32c>
 80098ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098b4:	f7f6 ff4a 	bl	800074c <__aeabi_ddiv>
 80098b8:	4652      	mov	r2, sl
 80098ba:	465b      	mov	r3, fp
 80098bc:	f7f6 fe1c 	bl	80004f8 <__aeabi_dmul>
 80098c0:	4652      	mov	r2, sl
 80098c2:	465b      	mov	r3, fp
 80098c4:	f7f6 fc62 	bl	800018c <__adddf3>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	f7f6 fc5e 	bl	800018c <__adddf3>
 80098d0:	a345      	add	r3, pc, #276	; (adr r3, 80099e8 <__ieee754_asin+0x2b8>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7f6 fc57 	bl	8000188 <__aeabi_dsub>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	a140      	add	r1, pc, #256	; (adr r1, 80099e0 <__ieee754_asin+0x2b0>)
 80098e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e4:	f7f6 fc50 	bl	8000188 <__aeabi_dsub>
 80098e8:	9b05      	ldr	r3, [sp, #20]
 80098ea:	4604      	mov	r4, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	bfdc      	itt	le
 80098f0:	4602      	movle	r2, r0
 80098f2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80098f6:	460d      	mov	r5, r1
 80098f8:	bfdc      	itt	le
 80098fa:	4614      	movle	r4, r2
 80098fc:	461d      	movle	r5, r3
 80098fe:	e748      	b.n	8009792 <__ieee754_asin+0x62>
 8009900:	460b      	mov	r3, r1
 8009902:	f7f6 fdf9 	bl	80004f8 <__aeabi_dmul>
 8009906:	a33c      	add	r3, pc, #240	; (adr r3, 80099f8 <__ieee754_asin+0x2c8>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	4606      	mov	r6, r0
 800990e:	460f      	mov	r7, r1
 8009910:	f7f6 fdf2 	bl	80004f8 <__aeabi_dmul>
 8009914:	a33a      	add	r3, pc, #232	; (adr r3, 8009a00 <__ieee754_asin+0x2d0>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fc37 	bl	800018c <__adddf3>
 800991e:	4632      	mov	r2, r6
 8009920:	463b      	mov	r3, r7
 8009922:	f7f6 fde9 	bl	80004f8 <__aeabi_dmul>
 8009926:	a338      	add	r3, pc, #224	; (adr r3, 8009a08 <__ieee754_asin+0x2d8>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f7f6 fc2c 	bl	8000188 <__aeabi_dsub>
 8009930:	4632      	mov	r2, r6
 8009932:	463b      	mov	r3, r7
 8009934:	f7f6 fde0 	bl	80004f8 <__aeabi_dmul>
 8009938:	a335      	add	r3, pc, #212	; (adr r3, 8009a10 <__ieee754_asin+0x2e0>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7f6 fc25 	bl	800018c <__adddf3>
 8009942:	4632      	mov	r2, r6
 8009944:	463b      	mov	r3, r7
 8009946:	f7f6 fdd7 	bl	80004f8 <__aeabi_dmul>
 800994a:	a333      	add	r3, pc, #204	; (adr r3, 8009a18 <__ieee754_asin+0x2e8>)
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f7f6 fc1a 	bl	8000188 <__aeabi_dsub>
 8009954:	4632      	mov	r2, r6
 8009956:	463b      	mov	r3, r7
 8009958:	f7f6 fdce 	bl	80004f8 <__aeabi_dmul>
 800995c:	a330      	add	r3, pc, #192	; (adr r3, 8009a20 <__ieee754_asin+0x2f0>)
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	f7f6 fc13 	bl	800018c <__adddf3>
 8009966:	4632      	mov	r2, r6
 8009968:	463b      	mov	r3, r7
 800996a:	f7f6 fdc5 	bl	80004f8 <__aeabi_dmul>
 800996e:	a32e      	add	r3, pc, #184	; (adr r3, 8009a28 <__ieee754_asin+0x2f8>)
 8009970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009974:	4680      	mov	r8, r0
 8009976:	4689      	mov	r9, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f6 fdbc 	bl	80004f8 <__aeabi_dmul>
 8009980:	a32b      	add	r3, pc, #172	; (adr r3, 8009a30 <__ieee754_asin+0x300>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f7f6 fbff 	bl	8000188 <__aeabi_dsub>
 800998a:	4632      	mov	r2, r6
 800998c:	463b      	mov	r3, r7
 800998e:	f7f6 fdb3 	bl	80004f8 <__aeabi_dmul>
 8009992:	a329      	add	r3, pc, #164	; (adr r3, 8009a38 <__ieee754_asin+0x308>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	f7f6 fbf8 	bl	800018c <__adddf3>
 800999c:	4632      	mov	r2, r6
 800999e:	463b      	mov	r3, r7
 80099a0:	f7f6 fdaa 	bl	80004f8 <__aeabi_dmul>
 80099a4:	a326      	add	r3, pc, #152	; (adr r3, 8009a40 <__ieee754_asin+0x310>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	f7f6 fbed 	bl	8000188 <__aeabi_dsub>
 80099ae:	4632      	mov	r2, r6
 80099b0:	463b      	mov	r3, r7
 80099b2:	f7f6 fda1 	bl	80004f8 <__aeabi_dmul>
 80099b6:	2200      	movs	r2, #0
 80099b8:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <__ieee754_asin+0x320>)
 80099ba:	f7f6 fbe7 	bl	800018c <__adddf3>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4640      	mov	r0, r8
 80099c4:	4649      	mov	r1, r9
 80099c6:	f7f6 fec1 	bl	800074c <__aeabi_ddiv>
 80099ca:	4622      	mov	r2, r4
 80099cc:	462b      	mov	r3, r5
 80099ce:	f7f6 fd93 	bl	80004f8 <__aeabi_dmul>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4620      	mov	r0, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	e6ce      	b.n	800977a <__ieee754_asin+0x4a>
 80099dc:	f3af 8000 	nop.w
 80099e0:	54442d18 	.word	0x54442d18
 80099e4:	3ff921fb 	.word	0x3ff921fb
 80099e8:	33145c07 	.word	0x33145c07
 80099ec:	3c91a626 	.word	0x3c91a626
 80099f0:	8800759c 	.word	0x8800759c
 80099f4:	7e37e43c 	.word	0x7e37e43c
 80099f8:	0dfdf709 	.word	0x0dfdf709
 80099fc:	3f023de1 	.word	0x3f023de1
 8009a00:	7501b288 	.word	0x7501b288
 8009a04:	3f49efe0 	.word	0x3f49efe0
 8009a08:	b5688f3b 	.word	0xb5688f3b
 8009a0c:	3fa48228 	.word	0x3fa48228
 8009a10:	0e884455 	.word	0x0e884455
 8009a14:	3fc9c155 	.word	0x3fc9c155
 8009a18:	03eb6f7d 	.word	0x03eb6f7d
 8009a1c:	3fd4d612 	.word	0x3fd4d612
 8009a20:	55555555 	.word	0x55555555
 8009a24:	3fc55555 	.word	0x3fc55555
 8009a28:	b12e9282 	.word	0xb12e9282
 8009a2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009a30:	1b8d0159 	.word	0x1b8d0159
 8009a34:	3fe6066c 	.word	0x3fe6066c
 8009a38:	9c598ac8 	.word	0x9c598ac8
 8009a3c:	40002ae5 	.word	0x40002ae5
 8009a40:	1c8a2d4b 	.word	0x1c8a2d4b
 8009a44:	40033a27 	.word	0x40033a27
 8009a48:	3fefffff 	.word	0x3fefffff
 8009a4c:	3fdfffff 	.word	0x3fdfffff
 8009a50:	3ff00000 	.word	0x3ff00000
 8009a54:	3fe00000 	.word	0x3fe00000
 8009a58:	3fef3332 	.word	0x3fef3332
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	f7f6 fb94 	bl	800018c <__adddf3>
 8009a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a68:	4606      	mov	r6, r0
 8009a6a:	460f      	mov	r7, r1
 8009a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a70:	f7f6 fe6c 	bl	800074c <__aeabi_ddiv>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f6 fd3c 	bl	80004f8 <__aeabi_dmul>
 8009a80:	f04f 0800 	mov.w	r8, #0
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	4642      	mov	r2, r8
 8009a8a:	465b      	mov	r3, fp
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4659      	mov	r1, fp
 8009a90:	f7f6 fd32 	bl	80004f8 <__aeabi_dmul>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4620      	mov	r0, r4
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	f7f6 fb74 	bl	8000188 <__aeabi_dsub>
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	465b      	mov	r3, fp
 8009aa8:	4650      	mov	r0, sl
 8009aaa:	4659      	mov	r1, fp
 8009aac:	f7f6 fb6e 	bl	800018c <__adddf3>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	f7f6 fe48 	bl	800074c <__aeabi_ddiv>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	f7f6 fb64 	bl	800018c <__adddf3>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	a113      	add	r1, pc, #76	; (adr r1, 8009b18 <__ieee754_asin+0x3e8>)
 8009aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ace:	f7f6 fb5b 	bl	8000188 <__aeabi_dsub>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	4639      	mov	r1, r7
 8009ada:	f7f6 fb55 	bl	8000188 <__aeabi_dsub>
 8009ade:	4642      	mov	r2, r8
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	465b      	mov	r3, fp
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4659      	mov	r1, fp
 8009aea:	f7f6 fb4f 	bl	800018c <__adddf3>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	a10b      	add	r1, pc, #44	; (adr r1, 8009b20 <__ieee754_asin+0x3f0>)
 8009af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009af8:	f7f6 fb46 	bl	8000188 <__aeabi_dsub>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4620      	mov	r0, r4
 8009b02:	4629      	mov	r1, r5
 8009b04:	f7f6 fb40 	bl	8000188 <__aeabi_dsub>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	a104      	add	r1, pc, #16	; (adr r1, 8009b20 <__ieee754_asin+0x3f0>)
 8009b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b12:	e6e7      	b.n	80098e4 <__ieee754_asin+0x1b4>
 8009b14:	f3af 8000 	nop.w
 8009b18:	33145c07 	.word	0x33145c07
 8009b1c:	3c91a626 	.word	0x3c91a626
 8009b20:	54442d18 	.word	0x54442d18
 8009b24:	3fe921fb 	.word	0x3fe921fb

08009b28 <__ieee754_sqrt>:
 8009b28:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009c7c <__ieee754_sqrt+0x154>
 8009b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b30:	ea3c 0c01 	bics.w	ip, ip, r1
 8009b34:	460b      	mov	r3, r1
 8009b36:	4606      	mov	r6, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	460a      	mov	r2, r1
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	d10e      	bne.n	8009b60 <__ieee754_sqrt+0x38>
 8009b42:	4602      	mov	r2, r0
 8009b44:	f7f6 fcd8 	bl	80004f8 <__aeabi_dmul>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f7f6 fb1c 	bl	800018c <__adddf3>
 8009b54:	4606      	mov	r6, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	4630      	mov	r0, r6
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b60:	2900      	cmp	r1, #0
 8009b62:	dc0d      	bgt.n	8009b80 <__ieee754_sqrt+0x58>
 8009b64:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009b68:	ea5c 0707 	orrs.w	r7, ip, r7
 8009b6c:	d0f4      	beq.n	8009b58 <__ieee754_sqrt+0x30>
 8009b6e:	b139      	cbz	r1, 8009b80 <__ieee754_sqrt+0x58>
 8009b70:	4602      	mov	r2, r0
 8009b72:	f7f6 fb09 	bl	8000188 <__aeabi_dsub>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	f7f6 fde7 	bl	800074c <__aeabi_ddiv>
 8009b7e:	e7e9      	b.n	8009b54 <__ieee754_sqrt+0x2c>
 8009b80:	1512      	asrs	r2, r2, #20
 8009b82:	d074      	beq.n	8009c6e <__ieee754_sqrt+0x146>
 8009b84:	2000      	movs	r0, #0
 8009b86:	07d5      	lsls	r5, r2, #31
 8009b88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b8c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8009b90:	bf5e      	ittt	pl
 8009b92:	0fe3      	lsrpl	r3, r4, #31
 8009b94:	0064      	lslpl	r4, r4, #1
 8009b96:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8009b9a:	0fe3      	lsrs	r3, r4, #31
 8009b9c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009ba0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009ba4:	2516      	movs	r5, #22
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009bac:	1076      	asrs	r6, r6, #1
 8009bae:	0064      	lsls	r4, r4, #1
 8009bb0:	188f      	adds	r7, r1, r2
 8009bb2:	429f      	cmp	r7, r3
 8009bb4:	bfde      	ittt	le
 8009bb6:	1bdb      	suble	r3, r3, r7
 8009bb8:	18b9      	addle	r1, r7, r2
 8009bba:	1880      	addle	r0, r0, r2
 8009bbc:	005b      	lsls	r3, r3, #1
 8009bbe:	3d01      	subs	r5, #1
 8009bc0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009bc4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009bc8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009bcc:	d1f0      	bne.n	8009bb0 <__ieee754_sqrt+0x88>
 8009bce:	462a      	mov	r2, r5
 8009bd0:	f04f 0e20 	mov.w	lr, #32
 8009bd4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009bd8:	428b      	cmp	r3, r1
 8009bda:	eb07 0c05 	add.w	ip, r7, r5
 8009bde:	dc02      	bgt.n	8009be6 <__ieee754_sqrt+0xbe>
 8009be0:	d113      	bne.n	8009c0a <__ieee754_sqrt+0xe2>
 8009be2:	45a4      	cmp	ip, r4
 8009be4:	d811      	bhi.n	8009c0a <__ieee754_sqrt+0xe2>
 8009be6:	f1bc 0f00 	cmp.w	ip, #0
 8009bea:	eb0c 0507 	add.w	r5, ip, r7
 8009bee:	da43      	bge.n	8009c78 <__ieee754_sqrt+0x150>
 8009bf0:	2d00      	cmp	r5, #0
 8009bf2:	db41      	blt.n	8009c78 <__ieee754_sqrt+0x150>
 8009bf4:	f101 0801 	add.w	r8, r1, #1
 8009bf8:	1a5b      	subs	r3, r3, r1
 8009bfa:	4641      	mov	r1, r8
 8009bfc:	45a4      	cmp	ip, r4
 8009bfe:	bf88      	it	hi
 8009c00:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009c04:	eba4 040c 	sub.w	r4, r4, ip
 8009c08:	443a      	add	r2, r7
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	f1be 0e01 	subs.w	lr, lr, #1
 8009c10:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009c14:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8009c18:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009c1c:	d1dc      	bne.n	8009bd8 <__ieee754_sqrt+0xb0>
 8009c1e:	4323      	orrs	r3, r4
 8009c20:	d006      	beq.n	8009c30 <__ieee754_sqrt+0x108>
 8009c22:	1c54      	adds	r4, r2, #1
 8009c24:	bf0b      	itete	eq
 8009c26:	4672      	moveq	r2, lr
 8009c28:	3201      	addne	r2, #1
 8009c2a:	3001      	addeq	r0, #1
 8009c2c:	f022 0201 	bicne.w	r2, r2, #1
 8009c30:	1043      	asrs	r3, r0, #1
 8009c32:	07c1      	lsls	r1, r0, #31
 8009c34:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009c38:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009c3c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009c40:	bf48      	it	mi
 8009c42:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009c46:	4610      	mov	r0, r2
 8009c48:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009c4c:	e782      	b.n	8009b54 <__ieee754_sqrt+0x2c>
 8009c4e:	0ae3      	lsrs	r3, r4, #11
 8009c50:	3915      	subs	r1, #21
 8009c52:	0564      	lsls	r4, r4, #21
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0fa      	beq.n	8009c4e <__ieee754_sqrt+0x126>
 8009c58:	02de      	lsls	r6, r3, #11
 8009c5a:	d50a      	bpl.n	8009c72 <__ieee754_sqrt+0x14a>
 8009c5c:	f1c2 0020 	rsb	r0, r2, #32
 8009c60:	fa24 f000 	lsr.w	r0, r4, r0
 8009c64:	1e55      	subs	r5, r2, #1
 8009c66:	4094      	lsls	r4, r2
 8009c68:	4303      	orrs	r3, r0
 8009c6a:	1b4a      	subs	r2, r1, r5
 8009c6c:	e78a      	b.n	8009b84 <__ieee754_sqrt+0x5c>
 8009c6e:	4611      	mov	r1, r2
 8009c70:	e7f0      	b.n	8009c54 <__ieee754_sqrt+0x12c>
 8009c72:	005b      	lsls	r3, r3, #1
 8009c74:	3201      	adds	r2, #1
 8009c76:	e7ef      	b.n	8009c58 <__ieee754_sqrt+0x130>
 8009c78:	4688      	mov	r8, r1
 8009c7a:	e7bd      	b.n	8009bf8 <__ieee754_sqrt+0xd0>
 8009c7c:	7ff00000 	.word	0x7ff00000

08009c80 <__ieee754_atan2f>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009c86:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	dc05      	bgt.n	8009c9a <__ieee754_atan2f+0x1a>
 8009c8e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8009c92:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009c96:	4607      	mov	r7, r0
 8009c98:	dd04      	ble.n	8009ca4 <__ieee754_atan2f+0x24>
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7f6 ff5a 	bl	8000b54 <__addsf3>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	e011      	b.n	8009cc8 <__ieee754_atan2f+0x48>
 8009ca4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8009ca8:	d103      	bne.n	8009cb2 <__ieee754_atan2f+0x32>
 8009caa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cae:	f000 bd7d 	b.w	800a7ac <atanf>
 8009cb2:	178c      	asrs	r4, r1, #30
 8009cb4:	f004 0402 	and.w	r4, r4, #2
 8009cb8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009cbc:	b932      	cbnz	r2, 8009ccc <__ieee754_atan2f+0x4c>
 8009cbe:	2c02      	cmp	r4, #2
 8009cc0:	d04c      	beq.n	8009d5c <__ieee754_atan2f+0xdc>
 8009cc2:	2c03      	cmp	r4, #3
 8009cc4:	d100      	bne.n	8009cc8 <__ieee754_atan2f+0x48>
 8009cc6:	4b29      	ldr	r3, [pc, #164]	; (8009d6c <__ieee754_atan2f+0xec>)
 8009cc8:	4618      	mov	r0, r3
 8009cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ccc:	b91e      	cbnz	r6, 8009cd6 <__ieee754_atan2f+0x56>
 8009cce:	2f00      	cmp	r7, #0
 8009cd0:	da4a      	bge.n	8009d68 <__ieee754_atan2f+0xe8>
 8009cd2:	4b27      	ldr	r3, [pc, #156]	; (8009d70 <__ieee754_atan2f+0xf0>)
 8009cd4:	e7f8      	b.n	8009cc8 <__ieee754_atan2f+0x48>
 8009cd6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009cda:	d10e      	bne.n	8009cfa <__ieee754_atan2f+0x7a>
 8009cdc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009ce0:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ce4:	d105      	bne.n	8009cf2 <__ieee754_atan2f+0x72>
 8009ce6:	2c02      	cmp	r4, #2
 8009ce8:	d83a      	bhi.n	8009d60 <__ieee754_atan2f+0xe0>
 8009cea:	4b22      	ldr	r3, [pc, #136]	; (8009d74 <__ieee754_atan2f+0xf4>)
 8009cec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009cf0:	e7ea      	b.n	8009cc8 <__ieee754_atan2f+0x48>
 8009cf2:	2c02      	cmp	r4, #2
 8009cf4:	d836      	bhi.n	8009d64 <__ieee754_atan2f+0xe4>
 8009cf6:	4b20      	ldr	r3, [pc, #128]	; (8009d78 <__ieee754_atan2f+0xf8>)
 8009cf8:	e7f8      	b.n	8009cec <__ieee754_atan2f+0x6c>
 8009cfa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009cfe:	d0e6      	beq.n	8009cce <__ieee754_atan2f+0x4e>
 8009d00:	1b92      	subs	r2, r2, r6
 8009d02:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8009d06:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8009d0a:	da17      	bge.n	8009d3c <__ieee754_atan2f+0xbc>
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	da01      	bge.n	8009d14 <__ieee754_atan2f+0x94>
 8009d10:	303c      	adds	r0, #60	; 0x3c
 8009d12:	db15      	blt.n	8009d40 <__ieee754_atan2f+0xc0>
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7f7 f8d9 	bl	8000ecc <__aeabi_fdiv>
 8009d1a:	f000 fe53 	bl	800a9c4 <fabsf>
 8009d1e:	f000 fd45 	bl	800a7ac <atanf>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2c01      	cmp	r4, #1
 8009d26:	d00d      	beq.n	8009d44 <__ieee754_atan2f+0xc4>
 8009d28:	2c02      	cmp	r4, #2
 8009d2a:	d00e      	beq.n	8009d4a <__ieee754_atan2f+0xca>
 8009d2c:	2c00      	cmp	r4, #0
 8009d2e:	d0cb      	beq.n	8009cc8 <__ieee754_atan2f+0x48>
 8009d30:	4912      	ldr	r1, [pc, #72]	; (8009d7c <__ieee754_atan2f+0xfc>)
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7f6 ff0e 	bl	8000b54 <__addsf3>
 8009d38:	4911      	ldr	r1, [pc, #68]	; (8009d80 <__ieee754_atan2f+0x100>)
 8009d3a:	e00c      	b.n	8009d56 <__ieee754_atan2f+0xd6>
 8009d3c:	4b11      	ldr	r3, [pc, #68]	; (8009d84 <__ieee754_atan2f+0x104>)
 8009d3e:	e7f1      	b.n	8009d24 <__ieee754_atan2f+0xa4>
 8009d40:	2300      	movs	r3, #0
 8009d42:	e7ef      	b.n	8009d24 <__ieee754_atan2f+0xa4>
 8009d44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d48:	e7be      	b.n	8009cc8 <__ieee754_atan2f+0x48>
 8009d4a:	490c      	ldr	r1, [pc, #48]	; (8009d7c <__ieee754_atan2f+0xfc>)
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7f6 ff01 	bl	8000b54 <__addsf3>
 8009d52:	4601      	mov	r1, r0
 8009d54:	480a      	ldr	r0, [pc, #40]	; (8009d80 <__ieee754_atan2f+0x100>)
 8009d56:	f7f6 fefb 	bl	8000b50 <__aeabi_fsub>
 8009d5a:	e7a1      	b.n	8009ca0 <__ieee754_atan2f+0x20>
 8009d5c:	4b08      	ldr	r3, [pc, #32]	; (8009d80 <__ieee754_atan2f+0x100>)
 8009d5e:	e7b3      	b.n	8009cc8 <__ieee754_atan2f+0x48>
 8009d60:	4b09      	ldr	r3, [pc, #36]	; (8009d88 <__ieee754_atan2f+0x108>)
 8009d62:	e7b1      	b.n	8009cc8 <__ieee754_atan2f+0x48>
 8009d64:	2300      	movs	r3, #0
 8009d66:	e7af      	b.n	8009cc8 <__ieee754_atan2f+0x48>
 8009d68:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <__ieee754_atan2f+0x104>)
 8009d6a:	e7ad      	b.n	8009cc8 <__ieee754_atan2f+0x48>
 8009d6c:	c0490fdb 	.word	0xc0490fdb
 8009d70:	bfc90fdb 	.word	0xbfc90fdb
 8009d74:	0800af44 	.word	0x0800af44
 8009d78:	0800af50 	.word	0x0800af50
 8009d7c:	33bbbd2e 	.word	0x33bbbd2e
 8009d80:	40490fdb 	.word	0x40490fdb
 8009d84:	3fc90fdb 	.word	0x3fc90fdb
 8009d88:	3f490fdb 	.word	0x3f490fdb

08009d8c <__ieee754_rem_pio2f>:
 8009d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	4aa0      	ldr	r2, [pc, #640]	; (800a014 <__ieee754_rem_pio2f+0x288>)
 8009d92:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009d96:	4296      	cmp	r6, r2
 8009d98:	460c      	mov	r4, r1
 8009d9a:	4682      	mov	sl, r0
 8009d9c:	b087      	sub	sp, #28
 8009d9e:	dc04      	bgt.n	8009daa <__ieee754_rem_pio2f+0x1e>
 8009da0:	2300      	movs	r3, #0
 8009da2:	6008      	str	r0, [r1, #0]
 8009da4:	604b      	str	r3, [r1, #4]
 8009da6:	2500      	movs	r5, #0
 8009da8:	e01a      	b.n	8009de0 <__ieee754_rem_pio2f+0x54>
 8009daa:	4a9b      	ldr	r2, [pc, #620]	; (800a018 <__ieee754_rem_pio2f+0x28c>)
 8009dac:	4296      	cmp	r6, r2
 8009dae:	dc4b      	bgt.n	8009e48 <__ieee754_rem_pio2f+0xbc>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	499a      	ldr	r1, [pc, #616]	; (800a01c <__ieee754_rem_pio2f+0x290>)
 8009db4:	4f9a      	ldr	r7, [pc, #616]	; (800a020 <__ieee754_rem_pio2f+0x294>)
 8009db6:	f026 060f 	bic.w	r6, r6, #15
 8009dba:	dd23      	ble.n	8009e04 <__ieee754_rem_pio2f+0x78>
 8009dbc:	f7f6 fec8 	bl	8000b50 <__aeabi_fsub>
 8009dc0:	42be      	cmp	r6, r7
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	d010      	beq.n	8009de8 <__ieee754_rem_pio2f+0x5c>
 8009dc6:	4997      	ldr	r1, [pc, #604]	; (800a024 <__ieee754_rem_pio2f+0x298>)
 8009dc8:	f7f6 fec2 	bl	8000b50 <__aeabi_fsub>
 8009dcc:	4601      	mov	r1, r0
 8009dce:	6020      	str	r0, [r4, #0]
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f7f6 febd 	bl	8000b50 <__aeabi_fsub>
 8009dd6:	4993      	ldr	r1, [pc, #588]	; (800a024 <__ieee754_rem_pio2f+0x298>)
 8009dd8:	f7f6 feba 	bl	8000b50 <__aeabi_fsub>
 8009ddc:	2501      	movs	r5, #1
 8009dde:	6060      	str	r0, [r4, #4]
 8009de0:	4628      	mov	r0, r5
 8009de2:	b007      	add	sp, #28
 8009de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de8:	498f      	ldr	r1, [pc, #572]	; (800a028 <__ieee754_rem_pio2f+0x29c>)
 8009dea:	f7f6 feb1 	bl	8000b50 <__aeabi_fsub>
 8009dee:	498f      	ldr	r1, [pc, #572]	; (800a02c <__ieee754_rem_pio2f+0x2a0>)
 8009df0:	4605      	mov	r5, r0
 8009df2:	f7f6 fead 	bl	8000b50 <__aeabi_fsub>
 8009df6:	4601      	mov	r1, r0
 8009df8:	6020      	str	r0, [r4, #0]
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f7f6 fea8 	bl	8000b50 <__aeabi_fsub>
 8009e00:	498a      	ldr	r1, [pc, #552]	; (800a02c <__ieee754_rem_pio2f+0x2a0>)
 8009e02:	e7e9      	b.n	8009dd8 <__ieee754_rem_pio2f+0x4c>
 8009e04:	f7f6 fea6 	bl	8000b54 <__addsf3>
 8009e08:	42be      	cmp	r6, r7
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	d00e      	beq.n	8009e2c <__ieee754_rem_pio2f+0xa0>
 8009e0e:	4985      	ldr	r1, [pc, #532]	; (800a024 <__ieee754_rem_pio2f+0x298>)
 8009e10:	f7f6 fea0 	bl	8000b54 <__addsf3>
 8009e14:	4601      	mov	r1, r0
 8009e16:	6020      	str	r0, [r4, #0]
 8009e18:	4628      	mov	r0, r5
 8009e1a:	f7f6 fe99 	bl	8000b50 <__aeabi_fsub>
 8009e1e:	4981      	ldr	r1, [pc, #516]	; (800a024 <__ieee754_rem_pio2f+0x298>)
 8009e20:	f7f6 fe98 	bl	8000b54 <__addsf3>
 8009e24:	f04f 35ff 	mov.w	r5, #4294967295
 8009e28:	6060      	str	r0, [r4, #4]
 8009e2a:	e7d9      	b.n	8009de0 <__ieee754_rem_pio2f+0x54>
 8009e2c:	497e      	ldr	r1, [pc, #504]	; (800a028 <__ieee754_rem_pio2f+0x29c>)
 8009e2e:	f7f6 fe91 	bl	8000b54 <__addsf3>
 8009e32:	497e      	ldr	r1, [pc, #504]	; (800a02c <__ieee754_rem_pio2f+0x2a0>)
 8009e34:	4605      	mov	r5, r0
 8009e36:	f7f6 fe8d 	bl	8000b54 <__addsf3>
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	6020      	str	r0, [r4, #0]
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f7f6 fe86 	bl	8000b50 <__aeabi_fsub>
 8009e44:	4979      	ldr	r1, [pc, #484]	; (800a02c <__ieee754_rem_pio2f+0x2a0>)
 8009e46:	e7eb      	b.n	8009e20 <__ieee754_rem_pio2f+0x94>
 8009e48:	4a79      	ldr	r2, [pc, #484]	; (800a030 <__ieee754_rem_pio2f+0x2a4>)
 8009e4a:	4296      	cmp	r6, r2
 8009e4c:	f300 8091 	bgt.w	8009f72 <__ieee754_rem_pio2f+0x1e6>
 8009e50:	f000 fdb8 	bl	800a9c4 <fabsf>
 8009e54:	4977      	ldr	r1, [pc, #476]	; (800a034 <__ieee754_rem_pio2f+0x2a8>)
 8009e56:	4607      	mov	r7, r0
 8009e58:	f7f6 ff84 	bl	8000d64 <__aeabi_fmul>
 8009e5c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009e60:	f7f6 fe78 	bl	8000b54 <__addsf3>
 8009e64:	f7f7 f944 	bl	80010f0 <__aeabi_f2iz>
 8009e68:	4605      	mov	r5, r0
 8009e6a:	f7f6 ff27 	bl	8000cbc <__aeabi_i2f>
 8009e6e:	496b      	ldr	r1, [pc, #428]	; (800a01c <__ieee754_rem_pio2f+0x290>)
 8009e70:	4681      	mov	r9, r0
 8009e72:	f7f6 ff77 	bl	8000d64 <__aeabi_fmul>
 8009e76:	4601      	mov	r1, r0
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f7f6 fe69 	bl	8000b50 <__aeabi_fsub>
 8009e7e:	4969      	ldr	r1, [pc, #420]	; (800a024 <__ieee754_rem_pio2f+0x298>)
 8009e80:	4680      	mov	r8, r0
 8009e82:	4648      	mov	r0, r9
 8009e84:	f7f6 ff6e 	bl	8000d64 <__aeabi_fmul>
 8009e88:	2d1f      	cmp	r5, #31
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	dc0c      	bgt.n	8009ea8 <__ieee754_rem_pio2f+0x11c>
 8009e8e:	4a6a      	ldr	r2, [pc, #424]	; (800a038 <__ieee754_rem_pio2f+0x2ac>)
 8009e90:	1e69      	subs	r1, r5, #1
 8009e92:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009e96:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d004      	beq.n	8009ea8 <__ieee754_rem_pio2f+0x11c>
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	f7f6 fe55 	bl	8000b50 <__aeabi_fsub>
 8009ea6:	e00b      	b.n	8009ec0 <__ieee754_rem_pio2f+0x134>
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	4640      	mov	r0, r8
 8009eac:	f7f6 fe50 	bl	8000b50 <__aeabi_fsub>
 8009eb0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009eb4:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8009eb8:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8009ebc:	2e08      	cmp	r6, #8
 8009ebe:	dc01      	bgt.n	8009ec4 <__ieee754_rem_pio2f+0x138>
 8009ec0:	6020      	str	r0, [r4, #0]
 8009ec2:	e026      	b.n	8009f12 <__ieee754_rem_pio2f+0x186>
 8009ec4:	4958      	ldr	r1, [pc, #352]	; (800a028 <__ieee754_rem_pio2f+0x29c>)
 8009ec6:	4648      	mov	r0, r9
 8009ec8:	f7f6 ff4c 	bl	8000d64 <__aeabi_fmul>
 8009ecc:	4607      	mov	r7, r0
 8009ece:	4601      	mov	r1, r0
 8009ed0:	4640      	mov	r0, r8
 8009ed2:	f7f6 fe3d 	bl	8000b50 <__aeabi_fsub>
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	4606      	mov	r6, r0
 8009eda:	4640      	mov	r0, r8
 8009edc:	f7f6 fe38 	bl	8000b50 <__aeabi_fsub>
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	f7f6 fe35 	bl	8000b50 <__aeabi_fsub>
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	4950      	ldr	r1, [pc, #320]	; (800a02c <__ieee754_rem_pio2f+0x2a0>)
 8009eea:	4648      	mov	r0, r9
 8009eec:	f7f6 ff3a 	bl	8000d64 <__aeabi_fmul>
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	f7f6 fe2d 	bl	8000b50 <__aeabi_fsub>
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	4607      	mov	r7, r0
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7f6 fe28 	bl	8000b50 <__aeabi_fsub>
 8009f00:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009f04:	ebab 0b03 	sub.w	fp, fp, r3
 8009f08:	f1bb 0f19 	cmp.w	fp, #25
 8009f0c:	dc16      	bgt.n	8009f3c <__ieee754_rem_pio2f+0x1b0>
 8009f0e:	46b0      	mov	r8, r6
 8009f10:	6020      	str	r0, [r4, #0]
 8009f12:	6826      	ldr	r6, [r4, #0]
 8009f14:	4640      	mov	r0, r8
 8009f16:	4631      	mov	r1, r6
 8009f18:	f7f6 fe1a 	bl	8000b50 <__aeabi_fsub>
 8009f1c:	4639      	mov	r1, r7
 8009f1e:	f7f6 fe17 	bl	8000b50 <__aeabi_fsub>
 8009f22:	f1ba 0f00 	cmp.w	sl, #0
 8009f26:	6060      	str	r0, [r4, #4]
 8009f28:	f6bf af5a 	bge.w	8009de0 <__ieee754_rem_pio2f+0x54>
 8009f2c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009f30:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009f34:	6026      	str	r6, [r4, #0]
 8009f36:	6060      	str	r0, [r4, #4]
 8009f38:	426d      	negs	r5, r5
 8009f3a:	e751      	b.n	8009de0 <__ieee754_rem_pio2f+0x54>
 8009f3c:	493f      	ldr	r1, [pc, #252]	; (800a03c <__ieee754_rem_pio2f+0x2b0>)
 8009f3e:	4648      	mov	r0, r9
 8009f40:	f7f6 ff10 	bl	8000d64 <__aeabi_fmul>
 8009f44:	4607      	mov	r7, r0
 8009f46:	4601      	mov	r1, r0
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f7f6 fe01 	bl	8000b50 <__aeabi_fsub>
 8009f4e:	4601      	mov	r1, r0
 8009f50:	4680      	mov	r8, r0
 8009f52:	4630      	mov	r0, r6
 8009f54:	f7f6 fdfc 	bl	8000b50 <__aeabi_fsub>
 8009f58:	4639      	mov	r1, r7
 8009f5a:	f7f6 fdf9 	bl	8000b50 <__aeabi_fsub>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	4937      	ldr	r1, [pc, #220]	; (800a040 <__ieee754_rem_pio2f+0x2b4>)
 8009f62:	4648      	mov	r0, r9
 8009f64:	f7f6 fefe 	bl	8000d64 <__aeabi_fmul>
 8009f68:	4631      	mov	r1, r6
 8009f6a:	f7f6 fdf1 	bl	8000b50 <__aeabi_fsub>
 8009f6e:	4607      	mov	r7, r0
 8009f70:	e795      	b.n	8009e9e <__ieee754_rem_pio2f+0x112>
 8009f72:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8009f76:	db05      	blt.n	8009f84 <__ieee754_rem_pio2f+0x1f8>
 8009f78:	4601      	mov	r1, r0
 8009f7a:	f7f6 fde9 	bl	8000b50 <__aeabi_fsub>
 8009f7e:	6060      	str	r0, [r4, #4]
 8009f80:	6020      	str	r0, [r4, #0]
 8009f82:	e710      	b.n	8009da6 <__ieee754_rem_pio2f+0x1a>
 8009f84:	15f7      	asrs	r7, r6, #23
 8009f86:	3f86      	subs	r7, #134	; 0x86
 8009f88:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7f7 f8af 	bl	80010f0 <__aeabi_f2iz>
 8009f92:	f7f6 fe93 	bl	8000cbc <__aeabi_i2f>
 8009f96:	4601      	mov	r1, r0
 8009f98:	9003      	str	r0, [sp, #12]
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7f6 fdd8 	bl	8000b50 <__aeabi_fsub>
 8009fa0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009fa4:	f7f6 fede 	bl	8000d64 <__aeabi_fmul>
 8009fa8:	4606      	mov	r6, r0
 8009faa:	f7f7 f8a1 	bl	80010f0 <__aeabi_f2iz>
 8009fae:	f7f6 fe85 	bl	8000cbc <__aeabi_i2f>
 8009fb2:	4601      	mov	r1, r0
 8009fb4:	9004      	str	r0, [sp, #16]
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7f6 fdc9 	bl	8000b50 <__aeabi_fsub>
 8009fbe:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8009fc2:	f7f6 fecf 	bl	8000d64 <__aeabi_fmul>
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	9005      	str	r0, [sp, #20]
 8009fca:	f7f7 f85f 	bl	800108c <__aeabi_fcmpeq>
 8009fce:	b1f0      	cbz	r0, 800a00e <__ieee754_rem_pio2f+0x282>
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f7f7 f85a 	bl	800108c <__aeabi_fcmpeq>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	bf14      	ite	ne
 8009fdc:	2301      	movne	r3, #1
 8009fde:	2302      	moveq	r3, #2
 8009fe0:	4a18      	ldr	r2, [pc, #96]	; (800a044 <__ieee754_rem_pio2f+0x2b8>)
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	9201      	str	r2, [sp, #4]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	a803      	add	r0, sp, #12
 8009fea:	9200      	str	r2, [sp, #0]
 8009fec:	463a      	mov	r2, r7
 8009fee:	f000 f8ab 	bl	800a148 <__kernel_rem_pio2f>
 8009ff2:	f1ba 0f00 	cmp.w	sl, #0
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	f6bf aef2 	bge.w	8009de0 <__ieee754_rem_pio2f+0x54>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a002:	6023      	str	r3, [r4, #0]
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a00a:	6063      	str	r3, [r4, #4]
 800a00c:	e794      	b.n	8009f38 <__ieee754_rem_pio2f+0x1ac>
 800a00e:	2303      	movs	r3, #3
 800a010:	e7e6      	b.n	8009fe0 <__ieee754_rem_pio2f+0x254>
 800a012:	bf00      	nop
 800a014:	3f490fd8 	.word	0x3f490fd8
 800a018:	4016cbe3 	.word	0x4016cbe3
 800a01c:	3fc90f80 	.word	0x3fc90f80
 800a020:	3fc90fd0 	.word	0x3fc90fd0
 800a024:	37354443 	.word	0x37354443
 800a028:	37354400 	.word	0x37354400
 800a02c:	2e85a308 	.word	0x2e85a308
 800a030:	43490f80 	.word	0x43490f80
 800a034:	3f22f984 	.word	0x3f22f984
 800a038:	0800af5c 	.word	0x0800af5c
 800a03c:	2e85a300 	.word	0x2e85a300
 800a040:	248d3132 	.word	0x248d3132
 800a044:	0800afdc 	.word	0x0800afdc

0800a048 <__kernel_cosf>:
 800a048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a04c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800a050:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a054:	4606      	mov	r6, r0
 800a056:	4688      	mov	r8, r1
 800a058:	da03      	bge.n	800a062 <__kernel_cosf+0x1a>
 800a05a:	f7f7 f849 	bl	80010f0 <__aeabi_f2iz>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d05c      	beq.n	800a11c <__kernel_cosf+0xd4>
 800a062:	4631      	mov	r1, r6
 800a064:	4630      	mov	r0, r6
 800a066:	f7f6 fe7d 	bl	8000d64 <__aeabi_fmul>
 800a06a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a06e:	4605      	mov	r5, r0
 800a070:	f7f6 fe78 	bl	8000d64 <__aeabi_fmul>
 800a074:	492b      	ldr	r1, [pc, #172]	; (800a124 <__kernel_cosf+0xdc>)
 800a076:	4607      	mov	r7, r0
 800a078:	4628      	mov	r0, r5
 800a07a:	f7f6 fe73 	bl	8000d64 <__aeabi_fmul>
 800a07e:	492a      	ldr	r1, [pc, #168]	; (800a128 <__kernel_cosf+0xe0>)
 800a080:	f7f6 fd68 	bl	8000b54 <__addsf3>
 800a084:	4629      	mov	r1, r5
 800a086:	f7f6 fe6d 	bl	8000d64 <__aeabi_fmul>
 800a08a:	4928      	ldr	r1, [pc, #160]	; (800a12c <__kernel_cosf+0xe4>)
 800a08c:	f7f6 fd60 	bl	8000b50 <__aeabi_fsub>
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 fe67 	bl	8000d64 <__aeabi_fmul>
 800a096:	4926      	ldr	r1, [pc, #152]	; (800a130 <__kernel_cosf+0xe8>)
 800a098:	f7f6 fd5c 	bl	8000b54 <__addsf3>
 800a09c:	4629      	mov	r1, r5
 800a09e:	f7f6 fe61 	bl	8000d64 <__aeabi_fmul>
 800a0a2:	4924      	ldr	r1, [pc, #144]	; (800a134 <__kernel_cosf+0xec>)
 800a0a4:	f7f6 fd54 	bl	8000b50 <__aeabi_fsub>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	f7f6 fe5b 	bl	8000d64 <__aeabi_fmul>
 800a0ae:	4922      	ldr	r1, [pc, #136]	; (800a138 <__kernel_cosf+0xf0>)
 800a0b0:	f7f6 fd50 	bl	8000b54 <__addsf3>
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7f6 fe55 	bl	8000d64 <__aeabi_fmul>
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7f6 fe52 	bl	8000d64 <__aeabi_fmul>
 800a0c0:	4641      	mov	r1, r8
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7f6 fe4d 	bl	8000d64 <__aeabi_fmul>
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f7f6 fd3f 	bl	8000b50 <__aeabi_fsub>
 800a0d2:	4b1a      	ldr	r3, [pc, #104]	; (800a13c <__kernel_cosf+0xf4>)
 800a0d4:	4605      	mov	r5, r0
 800a0d6:	429c      	cmp	r4, r3
 800a0d8:	dc0a      	bgt.n	800a0f0 <__kernel_cosf+0xa8>
 800a0da:	4601      	mov	r1, r0
 800a0dc:	4638      	mov	r0, r7
 800a0de:	f7f6 fd37 	bl	8000b50 <__aeabi_fsub>
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a0e8:	f7f6 fd32 	bl	8000b50 <__aeabi_fsub>
 800a0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f0:	4b13      	ldr	r3, [pc, #76]	; (800a140 <__kernel_cosf+0xf8>)
 800a0f2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a0f6:	429c      	cmp	r4, r3
 800a0f8:	bfcc      	ite	gt
 800a0fa:	4c12      	ldrgt	r4, [pc, #72]	; (800a144 <__kernel_cosf+0xfc>)
 800a0fc:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800a100:	4621      	mov	r1, r4
 800a102:	f7f6 fd25 	bl	8000b50 <__aeabi_fsub>
 800a106:	4621      	mov	r1, r4
 800a108:	4606      	mov	r6, r0
 800a10a:	4638      	mov	r0, r7
 800a10c:	f7f6 fd20 	bl	8000b50 <__aeabi_fsub>
 800a110:	4629      	mov	r1, r5
 800a112:	f7f6 fd1d 	bl	8000b50 <__aeabi_fsub>
 800a116:	4601      	mov	r1, r0
 800a118:	4630      	mov	r0, r6
 800a11a:	e7e5      	b.n	800a0e8 <__kernel_cosf+0xa0>
 800a11c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a120:	e7e4      	b.n	800a0ec <__kernel_cosf+0xa4>
 800a122:	bf00      	nop
 800a124:	ad47d74e 	.word	0xad47d74e
 800a128:	310f74f6 	.word	0x310f74f6
 800a12c:	3493f27c 	.word	0x3493f27c
 800a130:	37d00d01 	.word	0x37d00d01
 800a134:	3ab60b61 	.word	0x3ab60b61
 800a138:	3d2aaaab 	.word	0x3d2aaaab
 800a13c:	3e999999 	.word	0x3e999999
 800a140:	3f480000 	.word	0x3f480000
 800a144:	3e900000 	.word	0x3e900000

0800a148 <__kernel_rem_pio2f>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	b0db      	sub	sp, #364	; 0x16c
 800a14e:	9202      	str	r2, [sp, #8]
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800a154:	4bc5      	ldr	r3, [pc, #788]	; (800a46c <__kernel_rem_pio2f+0x324>)
 800a156:	9005      	str	r0, [sp, #20]
 800a158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15c:	9100      	str	r1, [sp, #0]
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	9b04      	ldr	r3, [sp, #16]
 800a162:	3b01      	subs	r3, #1
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	9b02      	ldr	r3, [sp, #8]
 800a168:	1d1a      	adds	r2, r3, #4
 800a16a:	f2c0 809b 	blt.w	800a2a4 <__kernel_rem_pio2f+0x15c>
 800a16e:	1edc      	subs	r4, r3, #3
 800a170:	bf48      	it	mi
 800a172:	1d1c      	addmi	r4, r3, #4
 800a174:	10e4      	asrs	r4, r4, #3
 800a176:	2500      	movs	r5, #0
 800a178:	f04f 0a00 	mov.w	sl, #0
 800a17c:	1c67      	adds	r7, r4, #1
 800a17e:	00fb      	lsls	r3, r7, #3
 800a180:	9306      	str	r3, [sp, #24]
 800a182:	9b02      	ldr	r3, [sp, #8]
 800a184:	9a03      	ldr	r2, [sp, #12]
 800a186:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800a18a:	9b01      	ldr	r3, [sp, #4]
 800a18c:	1aa6      	subs	r6, r4, r2
 800a18e:	eb03 0802 	add.w	r8, r3, r2
 800a192:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a194:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800a198:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800a19c:	4545      	cmp	r5, r8
 800a19e:	f340 8083 	ble.w	800a2a8 <__kernel_rem_pio2f+0x160>
 800a1a2:	f04f 0800 	mov.w	r8, #0
 800a1a6:	f04f 0b00 	mov.w	fp, #0
 800a1aa:	9b04      	ldr	r3, [sp, #16]
 800a1ac:	aa1e      	add	r2, sp, #120	; 0x78
 800a1ae:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800a1b2:	ab46      	add	r3, sp, #280	; 0x118
 800a1b4:	9a01      	ldr	r2, [sp, #4]
 800a1b6:	4590      	cmp	r8, r2
 800a1b8:	f340 809c 	ble.w	800a2f4 <__kernel_rem_pio2f+0x1ac>
 800a1bc:	4613      	mov	r3, r2
 800a1be:	aa0a      	add	r2, sp, #40	; 0x28
 800a1c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1c4:	9308      	str	r3, [sp, #32]
 800a1c6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800a1c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a1d0:	9307      	str	r3, [sp, #28]
 800a1d2:	ad0a      	add	r5, sp, #40	; 0x28
 800a1d4:	462e      	mov	r6, r5
 800a1d6:	46c3      	mov	fp, r8
 800a1d8:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800a1dc:	ab5a      	add	r3, sp, #360	; 0x168
 800a1de:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800a1e2:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800a1e6:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800a1ea:	f1bb 0f00 	cmp.w	fp, #0
 800a1ee:	f300 8086 	bgt.w	800a2fe <__kernel_rem_pio2f+0x1b6>
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 fc2b 	bl	800aa50 <scalbnf>
 800a1fa:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800a1fe:	4604      	mov	r4, r0
 800a200:	f7f6 fdb0 	bl	8000d64 <__aeabi_fmul>
 800a204:	f000 fbe2 	bl	800a9cc <floorf>
 800a208:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800a20c:	f7f6 fdaa 	bl	8000d64 <__aeabi_fmul>
 800a210:	4601      	mov	r1, r0
 800a212:	4620      	mov	r0, r4
 800a214:	f7f6 fc9c 	bl	8000b50 <__aeabi_fsub>
 800a218:	4604      	mov	r4, r0
 800a21a:	f7f6 ff69 	bl	80010f0 <__aeabi_f2iz>
 800a21e:	4606      	mov	r6, r0
 800a220:	f7f6 fd4c 	bl	8000cbc <__aeabi_i2f>
 800a224:	4601      	mov	r1, r0
 800a226:	4620      	mov	r0, r4
 800a228:	f7f6 fc92 	bl	8000b50 <__aeabi_fsub>
 800a22c:	2f00      	cmp	r7, #0
 800a22e:	4681      	mov	r9, r0
 800a230:	f340 8084 	ble.w	800a33c <__kernel_rem_pio2f+0x1f4>
 800a234:	f108 32ff 	add.w	r2, r8, #4294967295
 800a238:	ab0a      	add	r3, sp, #40	; 0x28
 800a23a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800a23e:	f1c7 0108 	rsb	r1, r7, #8
 800a242:	fa44 f301 	asr.w	r3, r4, r1
 800a246:	441e      	add	r6, r3
 800a248:	408b      	lsls	r3, r1
 800a24a:	1ae4      	subs	r4, r4, r3
 800a24c:	f1c7 0007 	rsb	r0, r7, #7
 800a250:	ab0a      	add	r3, sp, #40	; 0x28
 800a252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a256:	4104      	asrs	r4, r0
 800a258:	2c00      	cmp	r4, #0
 800a25a:	dd7e      	ble.n	800a35a <__kernel_rem_pio2f+0x212>
 800a25c:	2200      	movs	r2, #0
 800a25e:	4692      	mov	sl, r2
 800a260:	3601      	adds	r6, #1
 800a262:	4590      	cmp	r8, r2
 800a264:	f300 80b0 	bgt.w	800a3c8 <__kernel_rem_pio2f+0x280>
 800a268:	2f00      	cmp	r7, #0
 800a26a:	dd05      	ble.n	800a278 <__kernel_rem_pio2f+0x130>
 800a26c:	2f01      	cmp	r7, #1
 800a26e:	f000 80bd 	beq.w	800a3ec <__kernel_rem_pio2f+0x2a4>
 800a272:	2f02      	cmp	r7, #2
 800a274:	f000 80c5 	beq.w	800a402 <__kernel_rem_pio2f+0x2ba>
 800a278:	2c02      	cmp	r4, #2
 800a27a:	d16e      	bne.n	800a35a <__kernel_rem_pio2f+0x212>
 800a27c:	4649      	mov	r1, r9
 800a27e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a282:	f7f6 fc65 	bl	8000b50 <__aeabi_fsub>
 800a286:	4681      	mov	r9, r0
 800a288:	f1ba 0f00 	cmp.w	sl, #0
 800a28c:	d065      	beq.n	800a35a <__kernel_rem_pio2f+0x212>
 800a28e:	4639      	mov	r1, r7
 800a290:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a294:	f000 fbdc 	bl	800aa50 <scalbnf>
 800a298:	4601      	mov	r1, r0
 800a29a:	4648      	mov	r0, r9
 800a29c:	f7f6 fc58 	bl	8000b50 <__aeabi_fsub>
 800a2a0:	4681      	mov	r9, r0
 800a2a2:	e05a      	b.n	800a35a <__kernel_rem_pio2f+0x212>
 800a2a4:	2400      	movs	r4, #0
 800a2a6:	e766      	b.n	800a176 <__kernel_rem_pio2f+0x2e>
 800a2a8:	42ee      	cmn	r6, r5
 800a2aa:	d407      	bmi.n	800a2bc <__kernel_rem_pio2f+0x174>
 800a2ac:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a2b0:	f7f6 fd04 	bl	8000cbc <__aeabi_i2f>
 800a2b4:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800a2b8:	3501      	adds	r5, #1
 800a2ba:	e76f      	b.n	800a19c <__kernel_rem_pio2f+0x54>
 800a2bc:	4650      	mov	r0, sl
 800a2be:	e7f9      	b.n	800a2b4 <__kernel_rem_pio2f+0x16c>
 800a2c0:	9b05      	ldr	r3, [sp, #20]
 800a2c2:	f8da 1000 	ldr.w	r1, [sl]
 800a2c6:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800a2ca:	f7f6 fd4b 	bl	8000d64 <__aeabi_fmul>
 800a2ce:	4601      	mov	r1, r0
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7f6 fc3f 	bl	8000b54 <__addsf3>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	f109 0901 	add.w	r9, r9, #1
 800a2dc:	ab46      	add	r3, sp, #280	; 0x118
 800a2de:	9a03      	ldr	r2, [sp, #12]
 800a2e0:	f1aa 0a04 	sub.w	sl, sl, #4
 800a2e4:	4591      	cmp	r9, r2
 800a2e6:	ddeb      	ble.n	800a2c0 <__kernel_rem_pio2f+0x178>
 800a2e8:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a2ec:	3504      	adds	r5, #4
 800a2ee:	f108 0801 	add.w	r8, r8, #1
 800a2f2:	e75f      	b.n	800a1b4 <__kernel_rem_pio2f+0x6c>
 800a2f4:	46aa      	mov	sl, r5
 800a2f6:	465e      	mov	r6, fp
 800a2f8:	f04f 0900 	mov.w	r9, #0
 800a2fc:	e7ef      	b.n	800a2de <__kernel_rem_pio2f+0x196>
 800a2fe:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a302:	4620      	mov	r0, r4
 800a304:	f7f6 fd2e 	bl	8000d64 <__aeabi_fmul>
 800a308:	f7f6 fef2 	bl	80010f0 <__aeabi_f2iz>
 800a30c:	f7f6 fcd6 	bl	8000cbc <__aeabi_i2f>
 800a310:	4649      	mov	r1, r9
 800a312:	9009      	str	r0, [sp, #36]	; 0x24
 800a314:	f7f6 fd26 	bl	8000d64 <__aeabi_fmul>
 800a318:	4601      	mov	r1, r0
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7f6 fc18 	bl	8000b50 <__aeabi_fsub>
 800a320:	f7f6 fee6 	bl	80010f0 <__aeabi_f2iz>
 800a324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a326:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a32a:	f846 0b04 	str.w	r0, [r6], #4
 800a32e:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 800a332:	4618      	mov	r0, r3
 800a334:	f7f6 fc0e 	bl	8000b54 <__addsf3>
 800a338:	4604      	mov	r4, r0
 800a33a:	e756      	b.n	800a1ea <__kernel_rem_pio2f+0xa2>
 800a33c:	d106      	bne.n	800a34c <__kernel_rem_pio2f+0x204>
 800a33e:	f108 33ff 	add.w	r3, r8, #4294967295
 800a342:	aa0a      	add	r2, sp, #40	; 0x28
 800a344:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a348:	1224      	asrs	r4, r4, #8
 800a34a:	e785      	b.n	800a258 <__kernel_rem_pio2f+0x110>
 800a34c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a350:	f7f6 feba 	bl	80010c8 <__aeabi_fcmpge>
 800a354:	4604      	mov	r4, r0
 800a356:	2800      	cmp	r0, #0
 800a358:	d134      	bne.n	800a3c4 <__kernel_rem_pio2f+0x27c>
 800a35a:	2100      	movs	r1, #0
 800a35c:	4648      	mov	r0, r9
 800a35e:	f7f6 fe95 	bl	800108c <__aeabi_fcmpeq>
 800a362:	2800      	cmp	r0, #0
 800a364:	f000 809a 	beq.w	800a49c <__kernel_rem_pio2f+0x354>
 800a368:	f108 35ff 	add.w	r5, r8, #4294967295
 800a36c:	462b      	mov	r3, r5
 800a36e:	2200      	movs	r2, #0
 800a370:	9901      	ldr	r1, [sp, #4]
 800a372:	428b      	cmp	r3, r1
 800a374:	da4d      	bge.n	800a412 <__kernel_rem_pio2f+0x2ca>
 800a376:	2a00      	cmp	r2, #0
 800a378:	d07c      	beq.n	800a474 <__kernel_rem_pio2f+0x32c>
 800a37a:	ab0a      	add	r3, sp, #40	; 0x28
 800a37c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a380:	3f08      	subs	r7, #8
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8088 	beq.w	800a498 <__kernel_rem_pio2f+0x350>
 800a388:	4639      	mov	r1, r7
 800a38a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800a38e:	f000 fb5f 	bl	800aa50 <scalbnf>
 800a392:	46aa      	mov	sl, r5
 800a394:	4681      	mov	r9, r0
 800a396:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800a39a:	af46      	add	r7, sp, #280	; 0x118
 800a39c:	f1ba 0f00 	cmp.w	sl, #0
 800a3a0:	f280 80b1 	bge.w	800a506 <__kernel_rem_pio2f+0x3be>
 800a3a4:	46a9      	mov	r9, r5
 800a3a6:	f04f 0a00 	mov.w	sl, #0
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f1b9 0f00 	cmp.w	r9, #0
 800a3b0:	f2c0 80db 	blt.w	800a56a <__kernel_rem_pio2f+0x422>
 800a3b4:	a946      	add	r1, sp, #280	; 0x118
 800a3b6:	4617      	mov	r7, r2
 800a3b8:	f04f 0800 	mov.w	r8, #0
 800a3bc:	4b2c      	ldr	r3, [pc, #176]	; (800a470 <__kernel_rem_pio2f+0x328>)
 800a3be:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 800a3c2:	e0c3      	b.n	800a54c <__kernel_rem_pio2f+0x404>
 800a3c4:	2402      	movs	r4, #2
 800a3c6:	e749      	b.n	800a25c <__kernel_rem_pio2f+0x114>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	f1ba 0f00 	cmp.w	sl, #0
 800a3ce:	d108      	bne.n	800a3e2 <__kernel_rem_pio2f+0x29a>
 800a3d0:	b11b      	cbz	r3, 800a3da <__kernel_rem_pio2f+0x292>
 800a3d2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a3d6:	602b      	str	r3, [r5, #0]
 800a3d8:	2301      	movs	r3, #1
 800a3da:	469a      	mov	sl, r3
 800a3dc:	3201      	adds	r2, #1
 800a3de:	3504      	adds	r5, #4
 800a3e0:	e73f      	b.n	800a262 <__kernel_rem_pio2f+0x11a>
 800a3e2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800a3e6:	602b      	str	r3, [r5, #0]
 800a3e8:	4653      	mov	r3, sl
 800a3ea:	e7f6      	b.n	800a3da <__kernel_rem_pio2f+0x292>
 800a3ec:	f108 32ff 	add.w	r2, r8, #4294967295
 800a3f0:	ab0a      	add	r3, sp, #40	; 0x28
 800a3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3fa:	a90a      	add	r1, sp, #40	; 0x28
 800a3fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a400:	e73a      	b.n	800a278 <__kernel_rem_pio2f+0x130>
 800a402:	f108 32ff 	add.w	r2, r8, #4294967295
 800a406:	ab0a      	add	r3, sp, #40	; 0x28
 800a408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a410:	e7f3      	b.n	800a3fa <__kernel_rem_pio2f+0x2b2>
 800a412:	a90a      	add	r1, sp, #40	; 0x28
 800a414:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a418:	3b01      	subs	r3, #1
 800a41a:	430a      	orrs	r2, r1
 800a41c:	e7a8      	b.n	800a370 <__kernel_rem_pio2f+0x228>
 800a41e:	3301      	adds	r3, #1
 800a420:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a424:	2900      	cmp	r1, #0
 800a426:	d0fa      	beq.n	800a41e <__kernel_rem_pio2f+0x2d6>
 800a428:	9a04      	ldr	r2, [sp, #16]
 800a42a:	f108 0501 	add.w	r5, r8, #1
 800a42e:	eb08 0402 	add.w	r4, r8, r2
 800a432:	aa1e      	add	r2, sp, #120	; 0x78
 800a434:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a438:	4498      	add	r8, r3
 800a43a:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 800a43e:	45a8      	cmp	r8, r5
 800a440:	f6ff aec7 	blt.w	800a1d2 <__kernel_rem_pio2f+0x8a>
 800a444:	9b07      	ldr	r3, [sp, #28]
 800a446:	46a3      	mov	fp, r4
 800a448:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a44c:	f7f6 fc36 	bl	8000cbc <__aeabi_i2f>
 800a450:	f04f 0a00 	mov.w	sl, #0
 800a454:	2600      	movs	r6, #0
 800a456:	f84b 0b04 	str.w	r0, [fp], #4
 800a45a:	9b03      	ldr	r3, [sp, #12]
 800a45c:	459a      	cmp	sl, r3
 800a45e:	dd0c      	ble.n	800a47a <__kernel_rem_pio2f+0x332>
 800a460:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800a464:	465c      	mov	r4, fp
 800a466:	3501      	adds	r5, #1
 800a468:	e7e9      	b.n	800a43e <__kernel_rem_pio2f+0x2f6>
 800a46a:	bf00      	nop
 800a46c:	0800b320 	.word	0x0800b320
 800a470:	0800b2f4 	.word	0x0800b2f4
 800a474:	2301      	movs	r3, #1
 800a476:	9a08      	ldr	r2, [sp, #32]
 800a478:	e7d2      	b.n	800a420 <__kernel_rem_pio2f+0x2d8>
 800a47a:	9b05      	ldr	r3, [sp, #20]
 800a47c:	f854 0904 	ldr.w	r0, [r4], #-4
 800a480:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800a484:	f7f6 fc6e 	bl	8000d64 <__aeabi_fmul>
 800a488:	4601      	mov	r1, r0
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7f6 fb62 	bl	8000b54 <__addsf3>
 800a490:	f10a 0a01 	add.w	sl, sl, #1
 800a494:	4606      	mov	r6, r0
 800a496:	e7e0      	b.n	800a45a <__kernel_rem_pio2f+0x312>
 800a498:	3d01      	subs	r5, #1
 800a49a:	e76e      	b.n	800a37a <__kernel_rem_pio2f+0x232>
 800a49c:	9b06      	ldr	r3, [sp, #24]
 800a49e:	9a02      	ldr	r2, [sp, #8]
 800a4a0:	4648      	mov	r0, r9
 800a4a2:	1a99      	subs	r1, r3, r2
 800a4a4:	f000 fad4 	bl	800aa50 <scalbnf>
 800a4a8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a4ac:	4605      	mov	r5, r0
 800a4ae:	f7f6 fe0b 	bl	80010c8 <__aeabi_fcmpge>
 800a4b2:	b300      	cbz	r0, 800a4f6 <__kernel_rem_pio2f+0x3ae>
 800a4b4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f7f6 fc53 	bl	8000d64 <__aeabi_fmul>
 800a4be:	f7f6 fe17 	bl	80010f0 <__aeabi_f2iz>
 800a4c2:	f7f6 fbfb 	bl	8000cbc <__aeabi_i2f>
 800a4c6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800a4ca:	4681      	mov	r9, r0
 800a4cc:	f7f6 fc4a 	bl	8000d64 <__aeabi_fmul>
 800a4d0:	4601      	mov	r1, r0
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	f7f6 fb3c 	bl	8000b50 <__aeabi_fsub>
 800a4d8:	f7f6 fe0a 	bl	80010f0 <__aeabi_f2iz>
 800a4dc:	ab0a      	add	r3, sp, #40	; 0x28
 800a4de:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a4e2:	4648      	mov	r0, r9
 800a4e4:	f7f6 fe04 	bl	80010f0 <__aeabi_f2iz>
 800a4e8:	f108 0501 	add.w	r5, r8, #1
 800a4ec:	ab0a      	add	r3, sp, #40	; 0x28
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800a4f4:	e748      	b.n	800a388 <__kernel_rem_pio2f+0x240>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f7f6 fdfa 	bl	80010f0 <__aeabi_f2iz>
 800a4fc:	ab0a      	add	r3, sp, #40	; 0x28
 800a4fe:	4645      	mov	r5, r8
 800a500:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a504:	e740      	b.n	800a388 <__kernel_rem_pio2f+0x240>
 800a506:	ab0a      	add	r3, sp, #40	; 0x28
 800a508:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a50c:	f7f6 fbd6 	bl	8000cbc <__aeabi_i2f>
 800a510:	4649      	mov	r1, r9
 800a512:	f7f6 fc27 	bl	8000d64 <__aeabi_fmul>
 800a516:	4641      	mov	r1, r8
 800a518:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800a51c:	4648      	mov	r0, r9
 800a51e:	f7f6 fc21 	bl	8000d64 <__aeabi_fmul>
 800a522:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a526:	4681      	mov	r9, r0
 800a528:	e738      	b.n	800a39c <__kernel_rem_pio2f+0x254>
 800a52a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a52e:	f85b 1b04 	ldr.w	r1, [fp], #4
 800a532:	9203      	str	r2, [sp, #12]
 800a534:	9302      	str	r3, [sp, #8]
 800a536:	f7f6 fc15 	bl	8000d64 <__aeabi_fmul>
 800a53a:	4601      	mov	r1, r0
 800a53c:	4638      	mov	r0, r7
 800a53e:	f7f6 fb09 	bl	8000b54 <__addsf3>
 800a542:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a546:	4607      	mov	r7, r0
 800a548:	f108 0801 	add.w	r8, r8, #1
 800a54c:	9901      	ldr	r1, [sp, #4]
 800a54e:	4588      	cmp	r8, r1
 800a550:	dc01      	bgt.n	800a556 <__kernel_rem_pio2f+0x40e>
 800a552:	45c2      	cmp	sl, r8
 800a554:	dae9      	bge.n	800a52a <__kernel_rem_pio2f+0x3e2>
 800a556:	ab5a      	add	r3, sp, #360	; 0x168
 800a558:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a55c:	f843 7ca0 	str.w	r7, [r3, #-160]
 800a560:	f109 39ff 	add.w	r9, r9, #4294967295
 800a564:	f10a 0a01 	add.w	sl, sl, #1
 800a568:	e720      	b.n	800a3ac <__kernel_rem_pio2f+0x264>
 800a56a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	dc07      	bgt.n	800a580 <__kernel_rem_pio2f+0x438>
 800a570:	2b00      	cmp	r3, #0
 800a572:	dc4d      	bgt.n	800a610 <__kernel_rem_pio2f+0x4c8>
 800a574:	d02e      	beq.n	800a5d4 <__kernel_rem_pio2f+0x48c>
 800a576:	f006 0007 	and.w	r0, r6, #7
 800a57a:	b05b      	add	sp, #364	; 0x16c
 800a57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a580:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800a582:	2b03      	cmp	r3, #3
 800a584:	d1f7      	bne.n	800a576 <__kernel_rem_pio2f+0x42e>
 800a586:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 800a58a:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 800a58e:	46b8      	mov	r8, r7
 800a590:	46aa      	mov	sl, r5
 800a592:	f1ba 0f00 	cmp.w	sl, #0
 800a596:	dc48      	bgt.n	800a62a <__kernel_rem_pio2f+0x4e2>
 800a598:	46a9      	mov	r9, r5
 800a59a:	f1b9 0f01 	cmp.w	r9, #1
 800a59e:	dc5f      	bgt.n	800a660 <__kernel_rem_pio2f+0x518>
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	2d01      	cmp	r5, #1
 800a5a4:	dc75      	bgt.n	800a692 <__kernel_rem_pio2f+0x54a>
 800a5a6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800a5a8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800a5aa:	2c00      	cmp	r4, #0
 800a5ac:	d177      	bne.n	800a69e <__kernel_rem_pio2f+0x556>
 800a5ae:	9900      	ldr	r1, [sp, #0]
 800a5b0:	600a      	str	r2, [r1, #0]
 800a5b2:	460a      	mov	r2, r1
 800a5b4:	604b      	str	r3, [r1, #4]
 800a5b6:	6090      	str	r0, [r2, #8]
 800a5b8:	e7dd      	b.n	800a576 <__kernel_rem_pio2f+0x42e>
 800a5ba:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 800a5be:	f7f6 fac9 	bl	8000b54 <__addsf3>
 800a5c2:	3d01      	subs	r5, #1
 800a5c4:	2d00      	cmp	r5, #0
 800a5c6:	daf8      	bge.n	800a5ba <__kernel_rem_pio2f+0x472>
 800a5c8:	b10c      	cbz	r4, 800a5ce <__kernel_rem_pio2f+0x486>
 800a5ca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a5ce:	9b00      	ldr	r3, [sp, #0]
 800a5d0:	6018      	str	r0, [r3, #0]
 800a5d2:	e7d0      	b.n	800a576 <__kernel_rem_pio2f+0x42e>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	af32      	add	r7, sp, #200	; 0xc8
 800a5d8:	e7f4      	b.n	800a5c4 <__kernel_rem_pio2f+0x47c>
 800a5da:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800a5de:	f7f6 fab9 	bl	8000b54 <__addsf3>
 800a5e2:	3f01      	subs	r7, #1
 800a5e4:	2f00      	cmp	r7, #0
 800a5e6:	daf8      	bge.n	800a5da <__kernel_rem_pio2f+0x492>
 800a5e8:	b1bc      	cbz	r4, 800a61a <__kernel_rem_pio2f+0x4d2>
 800a5ea:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800a5ee:	9a00      	ldr	r2, [sp, #0]
 800a5f0:	4601      	mov	r1, r0
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800a5f6:	f7f6 faab 	bl	8000b50 <__aeabi_fsub>
 800a5fa:	2701      	movs	r7, #1
 800a5fc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800a600:	42bd      	cmp	r5, r7
 800a602:	da0c      	bge.n	800a61e <__kernel_rem_pio2f+0x4d6>
 800a604:	b10c      	cbz	r4, 800a60a <__kernel_rem_pio2f+0x4c2>
 800a606:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a60a:	9b00      	ldr	r3, [sp, #0]
 800a60c:	6058      	str	r0, [r3, #4]
 800a60e:	e7b2      	b.n	800a576 <__kernel_rem_pio2f+0x42e>
 800a610:	462f      	mov	r7, r5
 800a612:	2000      	movs	r0, #0
 800a614:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800a618:	e7e4      	b.n	800a5e4 <__kernel_rem_pio2f+0x49c>
 800a61a:	4603      	mov	r3, r0
 800a61c:	e7e7      	b.n	800a5ee <__kernel_rem_pio2f+0x4a6>
 800a61e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800a622:	f7f6 fa97 	bl	8000b54 <__addsf3>
 800a626:	3701      	adds	r7, #1
 800a628:	e7ea      	b.n	800a600 <__kernel_rem_pio2f+0x4b8>
 800a62a:	f8d8 3000 	ldr.w	r3, [r8]
 800a62e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a632:	4619      	mov	r1, r3
 800a634:	4610      	mov	r0, r2
 800a636:	9302      	str	r3, [sp, #8]
 800a638:	9201      	str	r2, [sp, #4]
 800a63a:	f7f6 fa8b 	bl	8000b54 <__addsf3>
 800a63e:	9a01      	ldr	r2, [sp, #4]
 800a640:	4601      	mov	r1, r0
 800a642:	4681      	mov	r9, r0
 800a644:	4610      	mov	r0, r2
 800a646:	f7f6 fa83 	bl	8000b50 <__aeabi_fsub>
 800a64a:	9b02      	ldr	r3, [sp, #8]
 800a64c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a650:	4619      	mov	r1, r3
 800a652:	f7f6 fa7f 	bl	8000b54 <__addsf3>
 800a656:	f848 0904 	str.w	r0, [r8], #-4
 800a65a:	f8c8 9000 	str.w	r9, [r8]
 800a65e:	e798      	b.n	800a592 <__kernel_rem_pio2f+0x44a>
 800a660:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800a664:	f8d7 a000 	ldr.w	sl, [r7]
 800a668:	4618      	mov	r0, r3
 800a66a:	4651      	mov	r1, sl
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	f7f6 fa71 	bl	8000b54 <__addsf3>
 800a672:	9b01      	ldr	r3, [sp, #4]
 800a674:	4601      	mov	r1, r0
 800a676:	4680      	mov	r8, r0
 800a678:	4618      	mov	r0, r3
 800a67a:	f7f6 fa69 	bl	8000b50 <__aeabi_fsub>
 800a67e:	4651      	mov	r1, sl
 800a680:	f7f6 fa68 	bl	8000b54 <__addsf3>
 800a684:	f847 0904 	str.w	r0, [r7], #-4
 800a688:	f109 39ff 	add.w	r9, r9, #4294967295
 800a68c:	f8c7 8000 	str.w	r8, [r7]
 800a690:	e783      	b.n	800a59a <__kernel_rem_pio2f+0x452>
 800a692:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800a696:	f7f6 fa5d 	bl	8000b54 <__addsf3>
 800a69a:	3d01      	subs	r5, #1
 800a69c:	e781      	b.n	800a5a2 <__kernel_rem_pio2f+0x45a>
 800a69e:	9900      	ldr	r1, [sp, #0]
 800a6a0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800a6a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6a8:	600a      	str	r2, [r1, #0]
 800a6aa:	604b      	str	r3, [r1, #4]
 800a6ac:	460a      	mov	r2, r1
 800a6ae:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a6b2:	e780      	b.n	800a5b6 <__kernel_rem_pio2f+0x46e>

0800a6b4 <__kernel_sinf>:
 800a6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a6bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	460f      	mov	r7, r1
 800a6c4:	4691      	mov	r9, r2
 800a6c6:	da03      	bge.n	800a6d0 <__kernel_sinf+0x1c>
 800a6c8:	f7f6 fd12 	bl	80010f0 <__aeabi_f2iz>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d035      	beq.n	800a73c <__kernel_sinf+0x88>
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7f6 fb46 	bl	8000d64 <__aeabi_fmul>
 800a6d8:	4605      	mov	r5, r0
 800a6da:	4601      	mov	r1, r0
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f7f6 fb41 	bl	8000d64 <__aeabi_fmul>
 800a6e2:	4929      	ldr	r1, [pc, #164]	; (800a788 <__kernel_sinf+0xd4>)
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f7f6 fb3c 	bl	8000d64 <__aeabi_fmul>
 800a6ec:	4927      	ldr	r1, [pc, #156]	; (800a78c <__kernel_sinf+0xd8>)
 800a6ee:	f7f6 fa2f 	bl	8000b50 <__aeabi_fsub>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	f7f6 fb36 	bl	8000d64 <__aeabi_fmul>
 800a6f8:	4925      	ldr	r1, [pc, #148]	; (800a790 <__kernel_sinf+0xdc>)
 800a6fa:	f7f6 fa2b 	bl	8000b54 <__addsf3>
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f6 fb30 	bl	8000d64 <__aeabi_fmul>
 800a704:	4923      	ldr	r1, [pc, #140]	; (800a794 <__kernel_sinf+0xe0>)
 800a706:	f7f6 fa23 	bl	8000b50 <__aeabi_fsub>
 800a70a:	4629      	mov	r1, r5
 800a70c:	f7f6 fb2a 	bl	8000d64 <__aeabi_fmul>
 800a710:	4921      	ldr	r1, [pc, #132]	; (800a798 <__kernel_sinf+0xe4>)
 800a712:	f7f6 fa1f 	bl	8000b54 <__addsf3>
 800a716:	4680      	mov	r8, r0
 800a718:	f1b9 0f00 	cmp.w	r9, #0
 800a71c:	d111      	bne.n	800a742 <__kernel_sinf+0x8e>
 800a71e:	4601      	mov	r1, r0
 800a720:	4628      	mov	r0, r5
 800a722:	f7f6 fb1f 	bl	8000d64 <__aeabi_fmul>
 800a726:	491d      	ldr	r1, [pc, #116]	; (800a79c <__kernel_sinf+0xe8>)
 800a728:	f7f6 fa12 	bl	8000b50 <__aeabi_fsub>
 800a72c:	4631      	mov	r1, r6
 800a72e:	f7f6 fb19 	bl	8000d64 <__aeabi_fmul>
 800a732:	4601      	mov	r1, r0
 800a734:	4620      	mov	r0, r4
 800a736:	f7f6 fa0d 	bl	8000b54 <__addsf3>
 800a73a:	4604      	mov	r4, r0
 800a73c:	4620      	mov	r0, r4
 800a73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a742:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a746:	4638      	mov	r0, r7
 800a748:	f7f6 fb0c 	bl	8000d64 <__aeabi_fmul>
 800a74c:	4641      	mov	r1, r8
 800a74e:	4681      	mov	r9, r0
 800a750:	4630      	mov	r0, r6
 800a752:	f7f6 fb07 	bl	8000d64 <__aeabi_fmul>
 800a756:	4601      	mov	r1, r0
 800a758:	4648      	mov	r0, r9
 800a75a:	f7f6 f9f9 	bl	8000b50 <__aeabi_fsub>
 800a75e:	4629      	mov	r1, r5
 800a760:	f7f6 fb00 	bl	8000d64 <__aeabi_fmul>
 800a764:	4639      	mov	r1, r7
 800a766:	f7f6 f9f3 	bl	8000b50 <__aeabi_fsub>
 800a76a:	490c      	ldr	r1, [pc, #48]	; (800a79c <__kernel_sinf+0xe8>)
 800a76c:	4605      	mov	r5, r0
 800a76e:	4630      	mov	r0, r6
 800a770:	f7f6 faf8 	bl	8000d64 <__aeabi_fmul>
 800a774:	4601      	mov	r1, r0
 800a776:	4628      	mov	r0, r5
 800a778:	f7f6 f9ec 	bl	8000b54 <__addsf3>
 800a77c:	4601      	mov	r1, r0
 800a77e:	4620      	mov	r0, r4
 800a780:	f7f6 f9e6 	bl	8000b50 <__aeabi_fsub>
 800a784:	e7d9      	b.n	800a73a <__kernel_sinf+0x86>
 800a786:	bf00      	nop
 800a788:	2f2ec9d3 	.word	0x2f2ec9d3
 800a78c:	32d72f34 	.word	0x32d72f34
 800a790:	3638ef1b 	.word	0x3638ef1b
 800a794:	39500d01 	.word	0x39500d01
 800a798:	3c088889 	.word	0x3c088889
 800a79c:	3e2aaaab 	.word	0x3e2aaaab

0800a7a0 <nan>:
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	4901      	ldr	r1, [pc, #4]	; (800a7a8 <nan+0x8>)
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	7ff80000 	.word	0x7ff80000

0800a7ac <atanf>:
 800a7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800a7b4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	4680      	mov	r8, r0
 800a7bc:	db0e      	blt.n	800a7dc <atanf+0x30>
 800a7be:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a7c2:	dd04      	ble.n	800a7ce <atanf+0x22>
 800a7c4:	4601      	mov	r1, r0
 800a7c6:	f7f6 f9c5 	bl	8000b54 <__addsf3>
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	e003      	b.n	800a7d6 <atanf+0x2a>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f300 80ce 	bgt.w	800a970 <atanf+0x1c4>
 800a7d4:	4c67      	ldr	r4, [pc, #412]	; (800a974 <atanf+0x1c8>)
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7dc:	4b66      	ldr	r3, [pc, #408]	; (800a978 <atanf+0x1cc>)
 800a7de:	429d      	cmp	r5, r3
 800a7e0:	dc0e      	bgt.n	800a800 <atanf+0x54>
 800a7e2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800a7e6:	da08      	bge.n	800a7fa <atanf+0x4e>
 800a7e8:	4964      	ldr	r1, [pc, #400]	; (800a97c <atanf+0x1d0>)
 800a7ea:	f7f6 f9b3 	bl	8000b54 <__addsf3>
 800a7ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a7f2:	f7f6 fc73 	bl	80010dc <__aeabi_fcmpgt>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d1ed      	bne.n	800a7d6 <atanf+0x2a>
 800a7fa:	f04f 36ff 	mov.w	r6, #4294967295
 800a7fe:	e01c      	b.n	800a83a <atanf+0x8e>
 800a800:	f000 f8e0 	bl	800a9c4 <fabsf>
 800a804:	4b5e      	ldr	r3, [pc, #376]	; (800a980 <atanf+0x1d4>)
 800a806:	4604      	mov	r4, r0
 800a808:	429d      	cmp	r5, r3
 800a80a:	dc7c      	bgt.n	800a906 <atanf+0x15a>
 800a80c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a810:	429d      	cmp	r5, r3
 800a812:	dc67      	bgt.n	800a8e4 <atanf+0x138>
 800a814:	4601      	mov	r1, r0
 800a816:	f7f6 f99d 	bl	8000b54 <__addsf3>
 800a81a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a81e:	f7f6 f997 	bl	8000b50 <__aeabi_fsub>
 800a822:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a826:	4605      	mov	r5, r0
 800a828:	4620      	mov	r0, r4
 800a82a:	f7f6 f993 	bl	8000b54 <__addsf3>
 800a82e:	4601      	mov	r1, r0
 800a830:	4628      	mov	r0, r5
 800a832:	f7f6 fb4b 	bl	8000ecc <__aeabi_fdiv>
 800a836:	2600      	movs	r6, #0
 800a838:	4604      	mov	r4, r0
 800a83a:	4621      	mov	r1, r4
 800a83c:	4620      	mov	r0, r4
 800a83e:	f7f6 fa91 	bl	8000d64 <__aeabi_fmul>
 800a842:	4601      	mov	r1, r0
 800a844:	4607      	mov	r7, r0
 800a846:	f7f6 fa8d 	bl	8000d64 <__aeabi_fmul>
 800a84a:	4605      	mov	r5, r0
 800a84c:	494d      	ldr	r1, [pc, #308]	; (800a984 <atanf+0x1d8>)
 800a84e:	f7f6 fa89 	bl	8000d64 <__aeabi_fmul>
 800a852:	494d      	ldr	r1, [pc, #308]	; (800a988 <atanf+0x1dc>)
 800a854:	f7f6 f97e 	bl	8000b54 <__addsf3>
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f6 fa83 	bl	8000d64 <__aeabi_fmul>
 800a85e:	494b      	ldr	r1, [pc, #300]	; (800a98c <atanf+0x1e0>)
 800a860:	f7f6 f978 	bl	8000b54 <__addsf3>
 800a864:	4629      	mov	r1, r5
 800a866:	f7f6 fa7d 	bl	8000d64 <__aeabi_fmul>
 800a86a:	4949      	ldr	r1, [pc, #292]	; (800a990 <atanf+0x1e4>)
 800a86c:	f7f6 f972 	bl	8000b54 <__addsf3>
 800a870:	4629      	mov	r1, r5
 800a872:	f7f6 fa77 	bl	8000d64 <__aeabi_fmul>
 800a876:	4947      	ldr	r1, [pc, #284]	; (800a994 <atanf+0x1e8>)
 800a878:	f7f6 f96c 	bl	8000b54 <__addsf3>
 800a87c:	4629      	mov	r1, r5
 800a87e:	f7f6 fa71 	bl	8000d64 <__aeabi_fmul>
 800a882:	4945      	ldr	r1, [pc, #276]	; (800a998 <atanf+0x1ec>)
 800a884:	f7f6 f966 	bl	8000b54 <__addsf3>
 800a888:	4639      	mov	r1, r7
 800a88a:	f7f6 fa6b 	bl	8000d64 <__aeabi_fmul>
 800a88e:	4943      	ldr	r1, [pc, #268]	; (800a99c <atanf+0x1f0>)
 800a890:	4607      	mov	r7, r0
 800a892:	4628      	mov	r0, r5
 800a894:	f7f6 fa66 	bl	8000d64 <__aeabi_fmul>
 800a898:	4941      	ldr	r1, [pc, #260]	; (800a9a0 <atanf+0x1f4>)
 800a89a:	f7f6 f959 	bl	8000b50 <__aeabi_fsub>
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f6 fa60 	bl	8000d64 <__aeabi_fmul>
 800a8a4:	493f      	ldr	r1, [pc, #252]	; (800a9a4 <atanf+0x1f8>)
 800a8a6:	f7f6 f953 	bl	8000b50 <__aeabi_fsub>
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7f6 fa5a 	bl	8000d64 <__aeabi_fmul>
 800a8b0:	493d      	ldr	r1, [pc, #244]	; (800a9a8 <atanf+0x1fc>)
 800a8b2:	f7f6 f94d 	bl	8000b50 <__aeabi_fsub>
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	f7f6 fa54 	bl	8000d64 <__aeabi_fmul>
 800a8bc:	493b      	ldr	r1, [pc, #236]	; (800a9ac <atanf+0x200>)
 800a8be:	f7f6 f947 	bl	8000b50 <__aeabi_fsub>
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	f7f6 fa4e 	bl	8000d64 <__aeabi_fmul>
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	f7f6 f942 	bl	8000b54 <__addsf3>
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f7f6 fa47 	bl	8000d64 <__aeabi_fmul>
 800a8d6:	1c73      	adds	r3, r6, #1
 800a8d8:	4601      	mov	r1, r0
 800a8da:	d133      	bne.n	800a944 <atanf+0x198>
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f7f6 f937 	bl	8000b50 <__aeabi_fsub>
 800a8e2:	e772      	b.n	800a7ca <atanf+0x1e>
 800a8e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a8e8:	f7f6 f932 	bl	8000b50 <__aeabi_fsub>
 800a8ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f7f6 f92e 	bl	8000b54 <__addsf3>
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f7f6 fae6 	bl	8000ecc <__aeabi_fdiv>
 800a900:	2601      	movs	r6, #1
 800a902:	4604      	mov	r4, r0
 800a904:	e799      	b.n	800a83a <atanf+0x8e>
 800a906:	4b2a      	ldr	r3, [pc, #168]	; (800a9b0 <atanf+0x204>)
 800a908:	429d      	cmp	r5, r3
 800a90a:	dc14      	bgt.n	800a936 <atanf+0x18a>
 800a90c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800a910:	f7f6 f91e 	bl	8000b50 <__aeabi_fsub>
 800a914:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800a918:	4605      	mov	r5, r0
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7f6 fa22 	bl	8000d64 <__aeabi_fmul>
 800a920:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a924:	f7f6 f916 	bl	8000b54 <__addsf3>
 800a928:	4601      	mov	r1, r0
 800a92a:	4628      	mov	r0, r5
 800a92c:	f7f6 face 	bl	8000ecc <__aeabi_fdiv>
 800a930:	2602      	movs	r6, #2
 800a932:	4604      	mov	r4, r0
 800a934:	e781      	b.n	800a83a <atanf+0x8e>
 800a936:	4601      	mov	r1, r0
 800a938:	481e      	ldr	r0, [pc, #120]	; (800a9b4 <atanf+0x208>)
 800a93a:	f7f6 fac7 	bl	8000ecc <__aeabi_fdiv>
 800a93e:	2603      	movs	r6, #3
 800a940:	4604      	mov	r4, r0
 800a942:	e77a      	b.n	800a83a <atanf+0x8e>
 800a944:	4b1c      	ldr	r3, [pc, #112]	; (800a9b8 <atanf+0x20c>)
 800a946:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800a94a:	f7f6 f901 	bl	8000b50 <__aeabi_fsub>
 800a94e:	4621      	mov	r1, r4
 800a950:	f7f6 f8fe 	bl	8000b50 <__aeabi_fsub>
 800a954:	4b19      	ldr	r3, [pc, #100]	; (800a9bc <atanf+0x210>)
 800a956:	4601      	mov	r1, r0
 800a958:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a95c:	f7f6 f8f8 	bl	8000b50 <__aeabi_fsub>
 800a960:	f1b8 0f00 	cmp.w	r8, #0
 800a964:	4604      	mov	r4, r0
 800a966:	f6bf af36 	bge.w	800a7d6 <atanf+0x2a>
 800a96a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a96e:	e72c      	b.n	800a7ca <atanf+0x1e>
 800a970:	4c13      	ldr	r4, [pc, #76]	; (800a9c0 <atanf+0x214>)
 800a972:	e730      	b.n	800a7d6 <atanf+0x2a>
 800a974:	bfc90fdb 	.word	0xbfc90fdb
 800a978:	3edfffff 	.word	0x3edfffff
 800a97c:	7149f2ca 	.word	0x7149f2ca
 800a980:	3f97ffff 	.word	0x3f97ffff
 800a984:	3c8569d7 	.word	0x3c8569d7
 800a988:	3d4bda59 	.word	0x3d4bda59
 800a98c:	3d886b35 	.word	0x3d886b35
 800a990:	3dba2e6e 	.word	0x3dba2e6e
 800a994:	3e124925 	.word	0x3e124925
 800a998:	3eaaaaab 	.word	0x3eaaaaab
 800a99c:	bd15a221 	.word	0xbd15a221
 800a9a0:	3d6ef16b 	.word	0x3d6ef16b
 800a9a4:	3d9d8795 	.word	0x3d9d8795
 800a9a8:	3de38e38 	.word	0x3de38e38
 800a9ac:	3e4ccccd 	.word	0x3e4ccccd
 800a9b0:	401bffff 	.word	0x401bffff
 800a9b4:	bf800000 	.word	0xbf800000
 800a9b8:	0800b33c 	.word	0x0800b33c
 800a9bc:	0800b32c 	.word	0x0800b32c
 800a9c0:	3fc90fdb 	.word	0x3fc90fdb

0800a9c4 <fabsf>:
 800a9c4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a9c8:	4770      	bx	lr
	...

0800a9cc <floorf>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800a9d2:	3d7f      	subs	r5, #127	; 0x7f
 800a9d4:	2d16      	cmp	r5, #22
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	4604      	mov	r4, r0
 800a9da:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800a9de:	dc26      	bgt.n	800aa2e <floorf+0x62>
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	da0e      	bge.n	800aa02 <floorf+0x36>
 800a9e4:	4917      	ldr	r1, [pc, #92]	; (800aa44 <floorf+0x78>)
 800a9e6:	f7f6 f8b5 	bl	8000b54 <__addsf3>
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	f7f6 fb76 	bl	80010dc <__aeabi_fcmpgt>
 800a9f0:	b128      	cbz	r0, 800a9fe <floorf+0x32>
 800a9f2:	2c00      	cmp	r4, #0
 800a9f4:	da23      	bge.n	800aa3e <floorf+0x72>
 800a9f6:	4b14      	ldr	r3, [pc, #80]	; (800aa48 <floorf+0x7c>)
 800a9f8:	2e00      	cmp	r6, #0
 800a9fa:	bf18      	it	ne
 800a9fc:	461c      	movne	r4, r3
 800a9fe:	4621      	mov	r1, r4
 800aa00:	e01b      	b.n	800aa3a <floorf+0x6e>
 800aa02:	4e12      	ldr	r6, [pc, #72]	; (800aa4c <floorf+0x80>)
 800aa04:	412e      	asrs	r6, r5
 800aa06:	4230      	tst	r0, r6
 800aa08:	d017      	beq.n	800aa3a <floorf+0x6e>
 800aa0a:	490e      	ldr	r1, [pc, #56]	; (800aa44 <floorf+0x78>)
 800aa0c:	f7f6 f8a2 	bl	8000b54 <__addsf3>
 800aa10:	2100      	movs	r1, #0
 800aa12:	f7f6 fb63 	bl	80010dc <__aeabi_fcmpgt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d0f1      	beq.n	800a9fe <floorf+0x32>
 800aa1a:	2c00      	cmp	r4, #0
 800aa1c:	bfbe      	ittt	lt
 800aa1e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800aa22:	fa43 f505 	asrlt.w	r5, r3, r5
 800aa26:	1964      	addlt	r4, r4, r5
 800aa28:	ea24 0406 	bic.w	r4, r4, r6
 800aa2c:	e7e7      	b.n	800a9fe <floorf+0x32>
 800aa2e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800aa32:	d302      	bcc.n	800aa3a <floorf+0x6e>
 800aa34:	f7f6 f88e 	bl	8000b54 <__addsf3>
 800aa38:	4601      	mov	r1, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	bd70      	pop	{r4, r5, r6, pc}
 800aa3e:	2400      	movs	r4, #0
 800aa40:	e7dd      	b.n	800a9fe <floorf+0x32>
 800aa42:	bf00      	nop
 800aa44:	7149f2ca 	.word	0x7149f2ca
 800aa48:	bf800000 	.word	0xbf800000
 800aa4c:	007fffff 	.word	0x007fffff

0800aa50 <scalbnf>:
 800aa50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	4603      	mov	r3, r0
 800aa58:	460d      	mov	r5, r1
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	d02a      	beq.n	800aab4 <scalbnf+0x64>
 800aa5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800aa62:	d304      	bcc.n	800aa6e <scalbnf+0x1e>
 800aa64:	4601      	mov	r1, r0
 800aa66:	f7f6 f875 	bl	8000b54 <__addsf3>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	e022      	b.n	800aab4 <scalbnf+0x64>
 800aa6e:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800aa72:	d117      	bne.n	800aaa4 <scalbnf+0x54>
 800aa74:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800aa78:	f7f6 f974 	bl	8000d64 <__aeabi_fmul>
 800aa7c:	4a17      	ldr	r2, [pc, #92]	; (800aadc <scalbnf+0x8c>)
 800aa7e:	4603      	mov	r3, r0
 800aa80:	4295      	cmp	r5, r2
 800aa82:	db0b      	blt.n	800aa9c <scalbnf+0x4c>
 800aa84:	4604      	mov	r4, r0
 800aa86:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800aa8a:	3a19      	subs	r2, #25
 800aa8c:	442a      	add	r2, r5
 800aa8e:	2afe      	cmp	r2, #254	; 0xfe
 800aa90:	dd0a      	ble.n	800aaa8 <scalbnf+0x58>
 800aa92:	4913      	ldr	r1, [pc, #76]	; (800aae0 <scalbnf+0x90>)
 800aa94:	4618      	mov	r0, r3
 800aa96:	f361 001e 	bfi	r0, r1, #0, #31
 800aa9a:	e000      	b.n	800aa9e <scalbnf+0x4e>
 800aa9c:	4911      	ldr	r1, [pc, #68]	; (800aae4 <scalbnf+0x94>)
 800aa9e:	f7f6 f961 	bl	8000d64 <__aeabi_fmul>
 800aaa2:	e7e2      	b.n	800aa6a <scalbnf+0x1a>
 800aaa4:	0dd2      	lsrs	r2, r2, #23
 800aaa6:	e7f1      	b.n	800aa8c <scalbnf+0x3c>
 800aaa8:	2a00      	cmp	r2, #0
 800aaaa:	dd05      	ble.n	800aab8 <scalbnf+0x68>
 800aaac:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800aab0:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800aab4:	4618      	mov	r0, r3
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	f112 0f16 	cmn.w	r2, #22
 800aabc:	da05      	bge.n	800aaca <scalbnf+0x7a>
 800aabe:	f24c 3250 	movw	r2, #50000	; 0xc350
 800aac2:	4295      	cmp	r5, r2
 800aac4:	dce5      	bgt.n	800aa92 <scalbnf+0x42>
 800aac6:	4907      	ldr	r1, [pc, #28]	; (800aae4 <scalbnf+0x94>)
 800aac8:	e7e4      	b.n	800aa94 <scalbnf+0x44>
 800aaca:	3219      	adds	r2, #25
 800aacc:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800aad0:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800aad4:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800aad8:	e7e1      	b.n	800aa9e <scalbnf+0x4e>
 800aada:	bf00      	nop
 800aadc:	ffff3cb0 	.word	0xffff3cb0
 800aae0:	7149f2ca 	.word	0x7149f2ca
 800aae4:	0da24260 	.word	0x0da24260

0800aae8 <_init>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	bf00      	nop
 800aaec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaee:	bc08      	pop	{r3}
 800aaf0:	469e      	mov	lr, r3
 800aaf2:	4770      	bx	lr

0800aaf4 <_fini>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	bf00      	nop
 800aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafa:	bc08      	pop	{r3}
 800aafc:	469e      	mov	lr, r3
 800aafe:	4770      	bx	lr
